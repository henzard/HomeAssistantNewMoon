//------------------------------------------------------------------------------
// <auto-generated>
// Generated using NetDaemon CodeGenerator nd-codegen v24.52.0.0
//   At: 2024-12-28T17:30:28.8679852+02:00
//
// *** Make sure the version of the codegen tool and your nugets NetDaemon.* have the same version.***
// You can use following command to keep it up to date with the latest version:
//   dotnet tool update NetDaemon.HassModel.CodeGen
//
// To update this file with latest entities run this command in your project directory:
//   dotnet tool run nd-codegen
//
// In the template projects we provided a convenience powershell script that will update
// the codegen and nugets to latest versions update_all_dependencies.ps1.
//
// For more information: https://netdaemon.xyz/docs/user/hass_model/hass_model_codegen
// For more information about NetDaemon: https://netdaemon.xyz/
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.Extensions.DependencyInjection;
using System.Text.Json;
using System.Text.Json.Serialization;
using NetDaemon.HassModel;
using NetDaemon.HassModel.Entities;
using NetDaemon.HassModel.Entities.Core;

namespace HomeAssistantGenerated;
public static class GeneratedExtensions
{
    ///<summary>Registers all injectable generated types in the serviceCollection</summary>
    public static IServiceCollection AddHomeAssistantGenerated(this IServiceCollection serviceCollection)
    {
        serviceCollection.AddTransient<IEntityFactory, GeneratedEntityFactory>();
        serviceCollection.AddTransient<Entities>();
        serviceCollection.AddTransient<LightEntities>();
        serviceCollection.AddTransient<MediaPlayerEntities>();
        serviceCollection.AddTransient<AutomationEntities>();
        serviceCollection.AddTransient<BinarySensorEntities>();
        serviceCollection.AddTransient<ButtonEntities>();
        serviceCollection.AddTransient<CalendarEntities>();
        serviceCollection.AddTransient<CameraEntities>();
        serviceCollection.AddTransient<ClimateEntities>();
        serviceCollection.AddTransient<ConversationEntities>();
        serviceCollection.AddTransient<DeviceTrackerEntities>();
        serviceCollection.AddTransient<InputBooleanEntities>();
        serviceCollection.AddTransient<InputButtonEntities>();
        serviceCollection.AddTransient<InputNumberEntities>();
        serviceCollection.AddTransient<InputTextEntities>();
        serviceCollection.AddTransient<PersonEntities>();
        serviceCollection.AddTransient<ScheduleEntities>();
        serviceCollection.AddTransient<ScriptEntities>();
        serviceCollection.AddTransient<SelectEntities>();
        serviceCollection.AddTransient<SensorEntities>();
        serviceCollection.AddTransient<SensorEntities>();
        serviceCollection.AddTransient<SunEntities>();
        serviceCollection.AddTransient<SwitchEntities>();
        serviceCollection.AddTransient<TagEntities>();
        serviceCollection.AddTransient<TimerEntities>();
        serviceCollection.AddTransient<TodoEntities>();
        serviceCollection.AddTransient<UpdateEntities>();
        serviceCollection.AddTransient<WeatherEntities>();
        serviceCollection.AddTransient<ZoneEntities>();
        serviceCollection.AddTransient<Services>();
        serviceCollection.AddTransient<AlarmControlPanelServices>();
        serviceCollection.AddTransient<AutomationServices>();
        serviceCollection.AddTransient<ButtonServices>();
        serviceCollection.AddTransient<CalendarServices>();
        serviceCollection.AddTransient<CameraServices>();
        serviceCollection.AddTransient<ClimateServices>();
        serviceCollection.AddTransient<CloudServices>();
        serviceCollection.AddTransient<ConnectlifeServices>();
        serviceCollection.AddTransient<ConversationServices>();
        serviceCollection.AddTransient<CounterServices>();
        serviceCollection.AddTransient<CoverServices>();
        serviceCollection.AddTransient<DeviceTrackerServices>();
        serviceCollection.AddTransient<EsphomeServices>();
        serviceCollection.AddTransient<FanServices>();
        serviceCollection.AddTransient<FfmpegServices>();
        serviceCollection.AddTransient<FrontendServices>();
        serviceCollection.AddTransient<GoogleServices>();
        serviceCollection.AddTransient<GoogleGenerativeAiConversationServices>();
        serviceCollection.AddTransient<HabiticaServices>();
        serviceCollection.AddTransient<HassioServices>();
        serviceCollection.AddTransient<HomeassistantServices>();
        serviceCollection.AddTransient<HumidifierServices>();
        serviceCollection.AddTransient<ImapServices>();
        serviceCollection.AddTransient<InputBooleanServices>();
        serviceCollection.AddTransient<InputButtonServices>();
        serviceCollection.AddTransient<InputDatetimeServices>();
        serviceCollection.AddTransient<InputNumberServices>();
        serviceCollection.AddTransient<InputSelectServices>();
        serviceCollection.AddTransient<InputTextServices>();
        serviceCollection.AddTransient<Iperf3Services>();
        serviceCollection.AddTransient<KodiServices>();
        serviceCollection.AddTransient<LightServices>();
        serviceCollection.AddTransient<LogbookServices>();
        serviceCollection.AddTransient<LoggerServices>();
        serviceCollection.AddTransient<MediaPlayerServices>();
        serviceCollection.AddTransient<MqttServices>();
        serviceCollection.AddTransient<NoderedServices>();
        serviceCollection.AddTransient<NotifyServices>();
        serviceCollection.AddTransient<NumberServices>();
        serviceCollection.AddTransient<PersistentNotificationServices>();
        serviceCollection.AddTransient<PersonServices>();
        serviceCollection.AddTransient<QbittorrentServices>();
        serviceCollection.AddTransient<RecorderServices>();
        serviceCollection.AddTransient<RemoteServices>();
        serviceCollection.AddTransient<RestServices>();
        serviceCollection.AddTransient<RestCommandServices>();
        serviceCollection.AddTransient<SceneServices>();
        serviceCollection.AddTransient<ScheduleServices>();
        serviceCollection.AddTransient<ScriptServices>();
        serviceCollection.AddTransient<SelectServices>();
        serviceCollection.AddTransient<SirenServices>();
        serviceCollection.AddTransient<SonoffServices>();
        serviceCollection.AddTransient<SwitchServices>();
        serviceCollection.AddTransient<SystemLogServices>();
        serviceCollection.AddTransient<TemplateServices>();
        serviceCollection.AddTransient<TimerServices>();
        serviceCollection.AddTransient<TodoServices>();
        serviceCollection.AddTransient<TtsServices>();
        serviceCollection.AddTransient<UpdateServices>();
        serviceCollection.AddTransient<VacuumServices>();
        serviceCollection.AddTransient<WaterHeaterServices>();
        serviceCollection.AddTransient<WeatherServices>();
        serviceCollection.AddTransient<WhatsappServices>();
        serviceCollection.AddTransient<WorkdayServices>();
        serviceCollection.AddTransient<ZoneServices>();
        return serviceCollection;
    }
}

/// <summary>
/// Allows HassModel to instantiate the correct generated Entity types
/// </summary>
public class GeneratedEntityFactory : IEntityFactory
{
    public Entity CreateEntity(IHaContext haContext, string entityId)
    {
        var dot = entityId.IndexOf('.', StringComparison.Ordinal);
        var domain = dot < 0 ? entityId.AsSpan() : entityId[..dot];
        return domain switch
        {
            "automation" => new AutomationEntity(haContext, entityId),
            "binary_sensor" => new BinarySensorEntity(haContext, entityId),
            "button" => new ButtonEntity(haContext, entityId),
            "calendar" => new CalendarEntity(haContext, entityId),
            "camera" => new CameraEntity(haContext, entityId),
            "climate" => new ClimateEntity(haContext, entityId),
            "conversation" => new ConversationEntity(haContext, entityId),
            "device_tracker" => new DeviceTrackerEntity(haContext, entityId),
            "input_boolean" => new InputBooleanEntity(haContext, entityId),
            "input_button" => new InputButtonEntity(haContext, entityId),
            "input_number" => new InputNumberEntity(haContext, entityId),
            "input_text" => new InputTextEntity(haContext, entityId),
            "light" => new LightEntity(haContext, entityId),
            "media_player" => new MediaPlayerEntity(haContext, entityId),
            "person" => new PersonEntity(haContext, entityId),
            "schedule" => new ScheduleEntity(haContext, entityId),
            "script" => new ScriptEntity(haContext, entityId),
            "select" => new SelectEntity(haContext, entityId),
            "sensor" when IsNumeric() => new NumericSensorEntity(haContext, entityId),
            "sensor" => new SensorEntity(haContext, entityId),
            "sun" => new SunEntity(haContext, entityId),
            "switch" => new SwitchEntity(haContext, entityId),
            "tag" => new TagEntity(haContext, entityId),
            "timer" => new TimerEntity(haContext, entityId),
            "todo" => new TodoEntity(haContext, entityId),
            "update" => new UpdateEntity(haContext, entityId),
            "weather" => new WeatherEntity(haContext, entityId),
            "zone" => new ZoneEntity(haContext, entityId),
            _ => new Entity(haContext, entityId)};
        bool IsNumeric() => haContext.GetState(entityId)?.AttributesJson?.TryGetProperty("unit_of_measurement", out _) ?? false;
    }
}

public interface IEntities
{
    LightEntities Light { get; }

    MediaPlayerEntities MediaPlayer { get; }

    AutomationEntities Automation { get; }

    BinarySensorEntities BinarySensor { get; }

    ButtonEntities Button { get; }

    CalendarEntities Calendar { get; }

    CameraEntities Camera { get; }

    ClimateEntities Climate { get; }

    ConversationEntities Conversation { get; }

    DeviceTrackerEntities DeviceTracker { get; }

    InputBooleanEntities InputBoolean { get; }

    InputButtonEntities InputButton { get; }

    InputNumberEntities InputNumber { get; }

    InputTextEntities InputText { get; }

    PersonEntities Person { get; }

    ScheduleEntities Schedule { get; }

    ScriptEntities Script { get; }

    SelectEntities Select { get; }

    SensorEntities Sensor { get; }

    SunEntities Sun { get; }

    SwitchEntities Switch { get; }

    TagEntities Tag { get; }

    TimerEntities Timer { get; }

    TodoEntities Todo { get; }

    UpdateEntities Update { get; }

    WeatherEntities Weather { get; }

    ZoneEntities Zone { get; }
}

public partial class Entities : IEntities
{
    private readonly IHaContext _haContext;
    public Entities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public LightEntities Light => new(_haContext);
    public MediaPlayerEntities MediaPlayer => new(_haContext);
    public AutomationEntities Automation => new(_haContext);
    public BinarySensorEntities BinarySensor => new(_haContext);
    public ButtonEntities Button => new(_haContext);
    public CalendarEntities Calendar => new(_haContext);
    public CameraEntities Camera => new(_haContext);
    public ClimateEntities Climate => new(_haContext);
    public ConversationEntities Conversation => new(_haContext);
    public DeviceTrackerEntities DeviceTracker => new(_haContext);
    public InputBooleanEntities InputBoolean => new(_haContext);
    public InputButtonEntities InputButton => new(_haContext);
    public InputNumberEntities InputNumber => new(_haContext);
    public InputTextEntities InputText => new(_haContext);
    public PersonEntities Person => new(_haContext);
    public ScheduleEntities Schedule => new(_haContext);
    public ScriptEntities Script => new(_haContext);
    public SelectEntities Select => new(_haContext);
    public SensorEntities Sensor => new(_haContext);
    public SunEntities Sun => new(_haContext);
    public SwitchEntities Switch => new(_haContext);
    public TagEntities Tag => new(_haContext);
    public TimerEntities Timer => new(_haContext);
    public TodoEntities Todo => new(_haContext);
    public UpdateEntities Update => new(_haContext);
    public WeatherEntities Weather => new(_haContext);
    public ZoneEntities Zone => new(_haContext);
}

public partial class LightEntities
{
    private readonly IHaContext _haContext;
    public LightEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all light entities currently registered (at runtime) in Home Assistant as LightEntity</summary>
    public IEnumerable<LightEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("light.")).Select(e => new LightEntity(e));
    ///<summary>esp_cam01 light</summary>
    public LightEntity EspCam01Light => new(_haContext, "light.esp_cam01_light");
    ///<summary>espcam_02 light</summary>
    public LightEntity Espcam02Light => new(_haContext, "light.espcam_02_light");
}

public partial class MediaPlayerEntities
{
    private readonly IHaContext _haContext;
    public MediaPlayerEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all media_player entities currently registered (at runtime) in Home Assistant as MediaPlayerEntity</summary>
    public IEnumerable<MediaPlayerEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("media_player.")).Select(e => new MediaPlayerEntity(e));
    ///<summary>HENZARD-KRUGER</summary>
    public MediaPlayerEntity HenzardKruger => new(_haContext, "media_player.henzard_kruger");
    ///<summary>KWS-ONE</summary>
    public MediaPlayerEntity KwsOne => new(_haContext, "media_player.kws_one");
    ///<summary>LibreELEC</summary>
    public MediaPlayerEntity Libreelec => new(_haContext, "media_player.libreelec");
}

public partial class AutomationEntities
{
    private readonly IHaContext _haContext;
    public AutomationEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all automation entities currently registered (at runtime) in Home Assistant as AutomationEntity</summary>
    public IEnumerable<AutomationEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("automation.")).Select(e => new AutomationEntity(e));
    ///<summary>Almost New Moon</summary>
    public AutomationEntity AlmostNewMoon => new(_haContext, "automation.almost_new_moon");
    ///<summary>Boorgat 10 min</summary>
    public AutomationEntity Boorgat10Min => new(_haContext, "automation.boorgat_10_min");
    ///<summary>Check Stress</summary>
    public AutomationEntity CheckStress => new(_haContext, "automation.check_stress");
    ///<summary>Home Assistant Auto-update on a schedule base</summary>
    public AutomationEntity HomeAssistantAutoUpdateOnAScheduleBase => new(_haContext, "automation.home_assistant_auto_update_on_a_schedule_base");
    ///<summary>If it&apos;s cold Turn off the aircon</summary>
    public AutomationEntity IfItSColdTurnOffTheAircon => new(_haContext, "automation.if_it_s_cold_turn_off_the_aircon");
    ///<summary>Water the plants</summary>
    public AutomationEntity WaterThePlants => new(_haContext, "automation.water_the_plants");
    ///<summary>When I leave </summary>
    public AutomationEntity WhenILeave => new(_haContext, "automation.when_i_leave");
}

public partial class BinarySensorEntities
{
    private readonly IHaContext _haContext;
    public BinarySensorEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all binary_sensor entities currently registered (at runtime) in Home Assistant as BinarySensorEntity</summary>
    public IEnumerable<BinarySensorEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("binary_sensor.")).Select(e => new BinarySensorEntity(e));
    ///<summary>Backups Stale</summary>
    public BinarySensorEntity BackupsStale => new(_haContext, "binary_sensor.backups_stale");
    ///<summary>Henzard Kruger Pending quest invitation</summary>
    public BinarySensorEntity HenzardKrugerPendingQuestInvitation => new(_haContext, "binary_sensor.henzard_kruger_pending_quest_invitation");
    ///<summary>Kaelyn S10 App inactive</summary>
    public BinarySensorEntity KaelynS10AppInactive => new(_haContext, "binary_sensor.kaelyn_s10_app_inactive");
    ///<summary>Kaelyn S10 Bluetooth state</summary>
    public BinarySensorEntity KaelynS10BluetoothState => new(_haContext, "binary_sensor.kaelyn_s10_bluetooth_state");
    ///<summary>Kaelyn S10 Device locked</summary>
    public BinarySensorEntity KaelynS10DeviceLocked => new(_haContext, "binary_sensor.kaelyn_s10_device_locked");
    ///<summary>Kaelyn S10 Device secure</summary>
    public BinarySensorEntity KaelynS10DeviceSecure => new(_haContext, "binary_sensor.kaelyn_s10_device_secure");
    ///<summary>Kaelyn S10 Doze mode</summary>
    public BinarySensorEntity KaelynS10DozeMode => new(_haContext, "binary_sensor.kaelyn_s10_doze_mode");
    ///<summary>Kaelyn S10 Interactive</summary>
    public BinarySensorEntity KaelynS10Interactive => new(_haContext, "binary_sensor.kaelyn_s10_interactive");
    ///<summary>Kaelyn S10 Is charging</summary>
    public BinarySensorEntity KaelynS10IsCharging => new(_haContext, "binary_sensor.kaelyn_s10_is_charging");
    ///<summary>Kaelyn S10 Keyguard locked</summary>
    public BinarySensorEntity KaelynS10KeyguardLocked => new(_haContext, "binary_sensor.kaelyn_s10_keyguard_locked");
    ///<summary>Kaelyn S10 Keyguard secure</summary>
    public BinarySensorEntity KaelynS10KeyguardSecure => new(_haContext, "binary_sensor.kaelyn_s10_keyguard_secure");
    ///<summary>Kaelyn S10 Mobile data</summary>
    public BinarySensorEntity KaelynS10MobileData => new(_haContext, "binary_sensor.kaelyn_s10_mobile_data");
    ///<summary>Kaelyn S10 Mobile data roaming</summary>
    public BinarySensorEntity KaelynS10MobileDataRoaming => new(_haContext, "binary_sensor.kaelyn_s10_mobile_data_roaming");
    ///<summary>Kaelyn S10 Power save</summary>
    public BinarySensorEntity KaelynS10PowerSave => new(_haContext, "binary_sensor.kaelyn_s10_power_save");
    ///<summary>Kaelyn S10 WiFi state</summary>
    public BinarySensorEntity KaelynS10WifiState => new(_haContext, "binary_sensor.kaelyn_s10_wifi_state");
    ///<summary>Kaelyn S10 Work profile</summary>
    public BinarySensorEntity KaelynS10WorkProfile => new(_haContext, "binary_sensor.kaelyn_s10_work_profile");
    ///<summary>RC522 RFID Tag</summary>
    public BinarySensorEntity Rc522RfidTag => new(_haContext, "binary_sensor.rc522_rfid_tag");
    ///<summary>RPi Power status</summary>
    public BinarySensorEntity RpiPowerStatus => new(_haContext, "binary_sensor.rpi_power_status");
    ///<summary>SM-S901E Android Auto</summary>
    public BinarySensorEntity SmS901eAndroidAuto => new(_haContext, "binary_sensor.sm_s901e_android_auto");
    ///<summary>SM-S901E Device locked</summary>
    public BinarySensorEntity SmS901eDeviceLocked => new(_haContext, "binary_sensor.sm_s901e_device_locked");
    ///<summary>SM-S901E Device secure</summary>
    public BinarySensorEntity SmS901eDeviceSecure => new(_haContext, "binary_sensor.sm_s901e_device_secure");
    ///<summary>SM-S901E Is charging</summary>
    public BinarySensorEntity SmS901eIsCharging => new(_haContext, "binary_sensor.sm_s901e_is_charging");
    ///<summary>SM-S901E Music active</summary>
    public BinarySensorEntity SmS901eMusicActive => new(_haContext, "binary_sensor.sm_s901e_music_active");
    ///<summary>RC522 RFID Tag</summary>
    public BinarySensorEntity TagReaderRc522RfidTag => new(_haContext, "binary_sensor.tag_reader_rc522_rfid_tag");
    ///<summary>Workday Sensor</summary>
    public BinarySensorEntity WorkdaySensor => new(_haContext, "binary_sensor.workday_sensor");
}

public partial class ButtonEntities
{
    private readonly IHaContext _haContext;
    public ButtonEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all button entities currently registered (at runtime) in Home Assistant as ButtonEntity</summary>
    public IEnumerable<ButtonEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("button.")).Select(e => new ButtonEntity(e));
    ///<summary>Action For Node Red</summary>
    public ButtonEntity ActionForNodeRed => new(_haContext, "button.action_for_node_red");
    ///<summary>Henzard Kruger Allocate all stat points</summary>
    public ButtonEntity HenzardKrugerAllocateAllStatPoints => new(_haContext, "button.henzard_kruger_allocate_all_stat_points");
    ///<summary>Henzard Kruger Blessing</summary>
    public ButtonEntity HenzardKrugerBlessing => new(_haContext, "button.henzard_kruger_blessing");
    ///<summary>Henzard Kruger Buy a health potion</summary>
    public ButtonEntity HenzardKrugerBuyAHealthPotion => new(_haContext, "button.henzard_kruger_buy_a_health_potion");
    ///<summary>Henzard Kruger Healing light</summary>
    public ButtonEntity HenzardKrugerHealingLight => new(_haContext, "button.henzard_kruger_healing_light");
    ///<summary>_hibernate</summary>
    public ButtonEntity HenzardKrugerHibernate => new(_haContext, "button.henzard_kruger_hibernate");
    ///<summary>_lock</summary>
    public ButtonEntity HenzardKrugerLock => new(_haContext, "button.henzard_kruger_lock");
    ///<summary>Henzard Kruger Protective aura</summary>
    public ButtonEntity HenzardKrugerProtectiveAura => new(_haContext, "button.henzard_kruger_protective_aura");
    ///<summary>_publishallsensors</summary>
    public ButtonEntity HenzardKrugerPublishallsensors => new(_haContext, "button.henzard_kruger_publishallsensors");
    ///<summary>_restart</summary>
    public ButtonEntity HenzardKrugerRestart => new(_haContext, "button.henzard_kruger_restart");
    ///<summary>Henzard Kruger Revive from death</summary>
    public ButtonEntity HenzardKrugerReviveFromDeath => new(_haContext, "button.henzard_kruger_revive_from_death");
    ///<summary>Henzard Kruger Searing brightness</summary>
    public ButtonEntity HenzardKrugerSearingBrightness => new(_haContext, "button.henzard_kruger_searing_brightness");
    ///<summary>Henzard Kruger Start my day</summary>
    public ButtonEntity HenzardKrugerStartMyDay => new(_haContext, "button.henzard_kruger_start_my_day");
    ///<summary>_webview</summary>
    public ButtonEntity HenzardKrugerWebview => new(_haContext, "button.henzard_kruger_webview");
    ///<summary>KWS-ONE_hibernate</summary>
    public ButtonEntity KwsOneKwsOneHibernate => new(_haContext, "button.kws_one_kws_one_hibernate");
    ///<summary>KWS-ONE_launchurl</summary>
    public ButtonEntity KwsOneKwsOneLaunchurl => new(_haContext, "button.kws_one_kws_one_launchurl");
    ///<summary>KWS-ONE_lock</summary>
    public ButtonEntity KwsOneKwsOneLock => new(_haContext, "button.kws_one_kws_one_lock");
    ///<summary>KWS-ONE_setvolumeto10</summary>
    public ButtonEntity KwsOneKwsOneSetvolumeto10 => new(_haContext, "button.kws_one_kws_one_setvolumeto10");
    ///<summary>KWS-ONE_setvolumeto100</summary>
    public ButtonEntity KwsOneKwsOneSetvolumeto100 => new(_haContext, "button.kws_one_kws_one_setvolumeto100");
    ///<summary>KWS-ONE-satellite_hibernate</summary>
    public ButtonEntity KwsOneSatelliteKwsOneSatelliteHibernate => new(_haContext, "button.kws_one_satellite_kws_one_satellite_hibernate");
    ///<summary>KWS-ONE-satellite_sleep</summary>
    public ButtonEntity KwsOneSatelliteKwsOneSatelliteSleep => new(_haContext, "button.kws_one_satellite_kws_one_satellite_sleep");
}

public partial class CalendarEntities
{
    private readonly IHaContext _haContext;
    public CalendarEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all calendar entities currently registered (at runtime) in Home Assistant as CalendarEntity</summary>
    public IEnumerable<CalendarEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("calendar.")).Select(e => new CalendarEntity(e));
    ///<summary>Aliciakruger87@gmail.com</summary>
    public CalendarEntity Aliciakruger87GmailCom => new(_haContext, "calendar.aliciakruger87_gmail_com");
    ///<summary>Coursera calendar - jan hendrik kruger - henzardkruger@gmail.com</summary>
    public CalendarEntity CourseraCalendarJanHendrikKrugerHenzardkrugerGmailCom => new(_haContext, "calendar.coursera_calendar_jan_hendrik_kruger_henzardkruger_gmail_com");
    ///<summary>Events</summary>
    public CalendarEntity Events => new(_haContext, "calendar.events");
    ///<summary>Henzard kruger</summary>
    public CalendarEntity HenzardKruger => new(_haContext, "calendar.henzard_kruger");
    ///<summary>Henzard Kruger Dailies</summary>
    public CalendarEntity HenzardKrugerDailies => new(_haContext, "calendar.henzard_kruger_dailies");
    ///<summary>Henzard Kruger Daily reminders</summary>
    public CalendarEntity HenzardKrugerDailyReminders => new(_haContext, "calendar.henzard_kruger_daily_reminders");
    ///<summary>Henzard Kruger To-do reminders</summary>
    public CalendarEntity HenzardKrugerToDoReminders => new(_haContext, "calendar.henzard_kruger_to_do_reminders");
    ///<summary>Henzard Kruger To-Do&apos;s</summary>
    public CalendarEntity HenzardKrugerToDoS => new(_haContext, "calendar.henzard_kruger_to_do_s");
    ///<summary>Henzard@picahoo.co.za</summary>
    public CalendarEntity HenzardPicahooCoZa => new(_haContext, "calendar.henzard_picahoo_co_za");
    ///<summary>Holidays in south africa</summary>
    public CalendarEntity HolidaysInSouthAfrica => new(_haContext, "calendar.holidays_in_south_africa");
    ///<summary>Jewish holidays</summary>
    public CalendarEntity JewishHolidays => new(_haContext, "calendar.jewish_holidays");
}

public partial class CameraEntities
{
    private readonly IHaContext _haContext;
    public CameraEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all camera entities currently registered (at runtime) in Home Assistant as CameraEntity</summary>
    public IEnumerable<CameraEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("camera.")).Select(e => new CameraEntity(e));
    ///<summary>esp_cam01</summary>
    public CameraEntity EspCam01 => new(_haContext, "camera.esp_cam01");
    ///<summary>esp_cam02</summary>
    public CameraEntity EspCam02 => new(_haContext, "camera.esp_cam02");
}

public partial class ClimateEntities
{
    private readonly IHaContext _haContext;
    public ClimateEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all climate entities currently registered (at runtime) in Home Assistant as ClimateEntity</summary>
    public IEnumerable<ClimateEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("climate.")).Select(e => new ClimateEntity(e));
    ///<summary>Portable air conditioner</summary>
    public ClimateEntity PortableAirConditioner => new(_haContext, "climate.portable_air_conditioner");
}

public partial class ConversationEntities
{
    private readonly IHaContext _haContext;
    public ConversationEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all conversation entities currently registered (at runtime) in Home Assistant as ConversationEntity</summary>
    public IEnumerable<ConversationEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("conversation.")).Select(e => new ConversationEntity(e));
    ///<summary>Google Generative AI Conversation</summary>
    public ConversationEntity GoogleGenerativeAiConversation => new(_haContext, "conversation.google_generative_ai_conversation");
    ///<summary>Home Assistant</summary>
    public ConversationEntity HomeAssistant => new(_haContext, "conversation.home_assistant");
}

public partial class DeviceTrackerEntities
{
    private readonly IHaContext _haContext;
    public DeviceTrackerEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all device_tracker entities currently registered (at runtime) in Home Assistant as DeviceTrackerEntity</summary>
    public IEnumerable<DeviceTrackerEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("device_tracker.")).Select(e => new DeviceTrackerEntity(e));
    ///<summary>Galaxy Watch4 Classic (75RE)</summary>
    public DeviceTrackerEntity GalaxyWatch4Classic75re => new(_haContext, "device_tracker.galaxy_watch4_classic_75re");
    public DeviceTrackerEntity HenzardSamsungs22 => new(_haContext, "device_tracker.henzard_samsungs22");
    ///<summary>Kaelyn S10</summary>
    public DeviceTrackerEntity KaelynS10 => new(_haContext, "device_tracker.kaelyn_s10");
    ///<summary>SM-S901E</summary>
    public DeviceTrackerEntity SmS901e => new(_haContext, "device_tracker.sm_s901e");
}

public partial class InputBooleanEntities
{
    private readonly IHaContext _haContext;
    public InputBooleanEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all input_boolean entities currently registered (at runtime) in Home Assistant as InputBooleanEntity</summary>
    public IEnumerable<InputBooleanEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("input_boolean.")).Select(e => new InputBooleanEntity(e));
    ///<summary>Calibration</summary>
    public InputBooleanEntity Calibration => new(_haContext, "input_boolean.calibration");
    ///<summary>Brush Teeth</summary>
    public InputBooleanEntity DCXBrushTeeth => new(_haContext, "input_boolean.d_c_x_brush_teeth");
    ///<summary>Morning Pills</summary>
    public InputBooleanEntity DCXMorningPills => new(_haContext, "input_boolean.d_c_x_morning_pills");
    ///<summary>Shower</summary>
    public InputBooleanEntity DCXShower => new(_haContext, "input_boolean.d_c_x_shower");
    ///<summary>mortara_backlight_on</summary>
    public InputBooleanEntity MortaraBacklightOn => new(_haContext, "input_boolean.mortara_backlight_on");
    ///<summary>my_device_disable_sleep</summary>
    public InputBooleanEntity MyDeviceDisableSleep => new(_haContext, "input_boolean.my_device_disable_sleep");
    ///<summary>Ordered</summary>
    public InputBooleanEntity Ordered => new(_haContext, "input_boolean.ordered");
}

public partial class InputButtonEntities
{
    private readonly IHaContext _haContext;
    public InputButtonEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all input_button entities currently registered (at runtime) in Home Assistant as InputButtonEntity</summary>
    public IEnumerable<InputButtonEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("input_button.")).Select(e => new InputButtonEntity(e));
    ///<summary>Rained</summary>
    public InputButtonEntity Rained => new(_haContext, "input_button.rained");
}

public partial class InputNumberEntities
{
    private readonly IHaContext _haContext;
    public InputNumberEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all input_number entities currently registered (at runtime) in Home Assistant as InputNumberEntity</summary>
    public IEnumerable<InputNumberEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("input_number.")).Select(e => new InputNumberEntity(e));
    ///<summary>Total in Tank</summary>
    public InputNumberEntity TotalInTank => new(_haContext, "input_number.total_in_tank");
}

public partial class InputTextEntities
{
    private readonly IHaContext _haContext;
    public InputTextEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all input_text entities currently registered (at runtime) in Home Assistant as InputTextEntity</summary>
    public IEnumerable<InputTextEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("input_text.")).Select(e => new InputTextEntity(e));
    ///<summary>Amount in ml</summary>
    public InputTextEntity AmountInMl => new(_haContext, "input_text.amount_in_ml");
    ///<summary>Daily Deaths</summary>
    public InputTextEntity DailyDeaths => new(_haContext, "input_text.daily_deaths");
    ///<summary>Daily House Checks</summary>
    public InputTextEntity DailyHouseChecks => new(_haContext, "input_text.daily_house_checks");
    ///<summary>deep_sleep_sleep</summary>
    public InputTextEntity DeepSleepSleep => new(_haContext, "input_text.deep_sleep_sleep");
    ///<summary>deep_sleep_wake</summary>
    public InputTextEntity DeepSleepWake => new(_haContext, "input_text.deep_sleep_wake");
    ///<summary>display_text</summary>
    public InputTextEntity DisplayText => new(_haContext, "input_text.display_text");
    ///<summary>Food Delivery Dates</summary>
    public InputTextEntity FoodDeliveryDates => new(_haContext, "input_text.food_delivery_dates");
    ///<summary>Food Ordered</summary>
    public InputTextEntity FoodOrdered => new(_haContext, "input_text.food_ordered");
    ///<summary>Medicine Given</summary>
    public InputTextEntity MedicineGiven => new(_haContext, "input_text.medicine_given");
    ///<summary>notification_display_l1</summary>
    public InputTextEntity NotificationDisplayL1 => new(_haContext, "input_text.notification_display_l1");
    ///<summary>notification_display_l2</summary>
    public InputTextEntity NotificationDisplayL2 => new(_haContext, "input_text.notification_display_l2");
    ///<summary>Set Tank Level</summary>
    public InputTextEntity SetTankLevel => new(_haContext, "input_text.set_tank_level");
    ///<summary>Threshold</summary>
    public InputTextEntity Threshold => new(_haContext, "input_text.threshold");
    ///<summary>TTGO Text</summary>
    public InputTextEntity TtgoText => new(_haContext, "input_text.ttgo_text");
    ///<summary>whatsapp_test</summary>
    public InputTextEntity WhatsappTest => new(_haContext, "input_text.whatsapp_test");
}

public partial class PersonEntities
{
    private readonly IHaContext _haContext;
    public PersonEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all person entities currently registered (at runtime) in Home Assistant as PersonEntity</summary>
    public IEnumerable<PersonEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("person.")).Select(e => new PersonEntity(e));
    ///<summary>Alicia Kruger</summary>
    public PersonEntity Alicia => new(_haContext, "person.alicia");
    ///<summary>Henzard Kruger</summary>
    public PersonEntity HenzardKruger => new(_haContext, "person.henzard_kruger");
}

public partial class ScheduleEntities
{
    private readonly IHaContext _haContext;
    public ScheduleEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all schedule entities currently registered (at runtime) in Home Assistant as ScheduleEntity</summary>
    public IEnumerable<ScheduleEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("schedule.")).Select(e => new ScheduleEntity(e));
    ///<summary>Update Schedule</summary>
    public ScheduleEntity UpdateSchedule => new(_haContext, "schedule.update_schedule");
}

public partial class ScriptEntities
{
    private readonly IHaContext _haContext;
    public ScriptEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all script entities currently registered (at runtime) in Home Assistant as ScriptEntity</summary>
    public IEnumerable<ScriptEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("script.")).Select(e => new ScriptEntity(e));
    ///<summary>fetch_device_info</summary>
    public ScriptEntity FetchDeviceInfo => new(_haContext, "script.fetch_device_info");
}

public partial class SelectEntities
{
    private readonly IHaContext _haContext;
    public SelectEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all select entities currently registered (at runtime) in Home Assistant as SelectEntity</summary>
    public IEnumerable<SelectEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("select.")).Select(e => new SelectEntity(e));
    ///<summary>Boorgat Power on behaviour</summary>
    public SelectEntity BoorgatPowerOnBehaviour => new(_haContext, "select.boorgat_power_on_behaviour");
    ///<summary>Geyser  Power on behaviour</summary>
    public SelectEntity GeyserPowerOnBehaviour => new(_haContext, "select.geyser_power_on_behaviour");
}

public partial class SensorEntities
{
    private readonly IHaContext _haContext;
    public SensorEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all sensor entities currently registered (at runtime) in Home Assistant as SensorEntity</summary>
    public IEnumerable<SensorEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("sensor.")).Select(e => new SensorEntity(e));
    /// <summary>Enumerates all non-numeric sensor entities currently registered (at runtime) in Home Assistant as SensorEntity</summary>
    public IEnumerable<SensorEntity> EnumerateAllNonNumeric() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("sensor.") && !(e.EntityState?.AttributesJson?.TryGetProperty("unit_of_measurement", out _) ?? false)).Select(e => new SensorEntity(e));
    /// <summary>Enumerates all numeric sensor entities currently registered (at runtime) in Home Assistant as NumericSensorEntity</summary>
    public IEnumerable<NumericSensorEntity> EnumerateAllNumeric() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("sensor.") && (e.EntityState?.AttributesJson?.TryGetProperty("unit_of_measurement", out _) ?? false)).Select(e => new NumericSensorEntity(e));
    ///<summary>Backup State</summary>
    public SensorEntity BackupState => new(_haContext, "sensor.backup_state");
    ///<summary>Bloemfontein Moon High</summary>
    public SensorEntity BloemfonteinMoonHigh => new(_haContext, "sensor.bloemfontein_moon_high");
    ///<summary>Bloemfontein Moon Phase</summary>
    public SensorEntity BloemfonteinMoonPhase => new(_haContext, "sensor.bloemfontein_moon_phase");
    ///<summary>Bloemfontein Moon Rise</summary>
    public SensorEntity BloemfonteinMoonRise => new(_haContext, "sensor.bloemfontein_moon_rise");
    ///<summary>Bloemfontein Moon Set</summary>
    public SensorEntity BloemfonteinMoonSet => new(_haContext, "sensor.bloemfontein_moon_set");
    ///<summary>Bloemfontein Next First Quarter</summary>
    public SensorEntity BloemfonteinNextFirstQuarter => new(_haContext, "sensor.bloemfontein_next_first_quarter");
    ///<summary>Bloemfontein Next Full Moon</summary>
    public SensorEntity BloemfonteinNextFullMoon => new(_haContext, "sensor.bloemfontein_next_full_moon");
    ///<summary>Bloemfontein Next Moon Phase</summary>
    public SensorEntity BloemfonteinNextMoonPhase => new(_haContext, "sensor.bloemfontein_next_moon_phase");
    ///<summary>Bloemfontein Next New Moon</summary>
    public SensorEntity BloemfonteinNextNewMoon => new(_haContext, "sensor.bloemfontein_next_new_moon");
    ///<summary>Bloemfontein Next Third Quarter</summary>
    public SensorEntity BloemfonteinNextThirdQuarter => new(_haContext, "sensor.bloemfontein_next_third_quarter");
    ///<summary>water-pump BSSID</summary>
    public SensorEntity FriendlyDevicenameBssid => new(_haContext, "sensor.friendly_devicename_bssid");
    ///<summary>water-pump DNS Address</summary>
    public SensorEntity FriendlyDevicenameDnsAddress => new(_haContext, "sensor.friendly_devicename_dns_address");
    ///<summary>water-pump IP Address</summary>
    public SensorEntity FriendlyDevicenameIpAddress => new(_haContext, "sensor.friendly_devicename_ip_address");
    ///<summary>water-pump Latest Scan Results</summary>
    public SensorEntity FriendlyDevicenameLatestScanResults => new(_haContext, "sensor.friendly_devicename_latest_scan_results");
    ///<summary>water-pump Mac Wifi Address</summary>
    public SensorEntity FriendlyDevicenameMacWifiAddress => new(_haContext, "sensor.friendly_devicename_mac_wifi_address");
    ///<summary>water-pump SSID</summary>
    public SensorEntity FriendlyDevicenameSsid => new(_haContext, "sensor.friendly_devicename_ssid");
    ///<summary>Galaxy Watch4 Classic (75RE) Battery state</summary>
    public SensorEntity GalaxyWatch4Classic75reBatteryState => new(_haContext, "sensor.galaxy_watch4_classic_75re_battery_state");
    ///<summary>Galaxy Watch4 Classic (75RE) Charger type</summary>
    public SensorEntity GalaxyWatch4Classic75reChargerType => new(_haContext, "sensor.galaxy_watch4_classic_75re_charger_type");
    ///<summary>Heart Points Daily</summary>
    public SensorEntity HeartPointsDaily => new(_haContext, "sensor.heart_points_daily");
    ///<summary>_activewindow</summary>
    public SensorEntity HenzardKrugerActivewindow => new(_haContext, "sensor.henzard_kruger_activewindow");
    ///<summary>_battery Charge Remaining</summary>
    public SensorEntity HenzardKrugerBatteryChargeRemaining => new(_haContext, "sensor.henzard_kruger_battery_charge_remaining");
    ///<summary>_battery Charge Status</summary>
    public SensorEntity HenzardKrugerBatteryChargeStatus => new(_haContext, "sensor.henzard_kruger_battery_charge_status");
    ///<summary>_battery Full Charge Lifetime</summary>
    public SensorEntity HenzardKrugerBatteryFullChargeLifetime => new(_haContext, "sensor.henzard_kruger_battery_full_charge_lifetime");
    ///<summary>_battery Powerline Status</summary>
    public SensorEntity HenzardKrugerBatteryPowerlineStatus => new(_haContext, "sensor.henzard_kruger_battery_powerline_status");
    ///<summary>Henzard Kruger Class</summary>
    public SensorEntity HenzardKrugerClass => new(_haContext, "sensor.henzard_kruger_class");
    ///<summary>Henzard Kruger Display name</summary>
    public SensorEntity HenzardKrugerDisplayName => new(_haContext, "sensor.henzard_kruger_display_name");
    ///<summary>_lastactive</summary>
    public SensorEntity HenzardKrugerLastactive => new(_haContext, "sensor.henzard_kruger_lastactive");
    ///<summary>_lastboot</summary>
    public SensorEntity HenzardKrugerLastboot => new(_haContext, "sensor.henzard_kruger_lastboot");
    ///<summary>Henzard Kruger Level</summary>
    public SensorEntity HenzardKrugerLevel => new(_haContext, "sensor.henzard_kruger_level");
    ///<summary>_network Bluetooth Network Connection</summary>
    public SensorEntity HenzardKrugerNetworkBluetoothNetworkConnection => new(_haContext, "sensor.henzard_kruger_network_bluetooth_network_connection");
    ///<summary>_network Ethernet</summary>
    public SensorEntity HenzardKrugerNetworkEthernet => new(_haContext, "sensor.henzard_kruger_network_ethernet");
    ///<summary>_network Hamachi</summary>
    public SensorEntity HenzardKrugerNetworkHamachi => new(_haContext, "sensor.henzard_kruger_network_hamachi");
    ///<summary>_network Local Area Connection</summary>
    public SensorEntity HenzardKrugerNetworkLocalAreaConnection => new(_haContext, "sensor.henzard_kruger_network_local_area_connection");
    ///<summary>_network Local Area Connection* 1</summary>
    public SensorEntity HenzardKrugerNetworkLocalAreaConnection1 => new(_haContext, "sensor.henzard_kruger_network_local_area_connection_1");
    ///<summary>_network Local Area Connection* 2</summary>
    public SensorEntity HenzardKrugerNetworkLocalAreaConnection2 => new(_haContext, "sensor.henzard_kruger_network_local_area_connection_2");
    ///<summary>_network Local Area Connection</summary>
    public SensorEntity HenzardKrugerNetworkLocalAreaConnection4 => new(_haContext, "sensor.henzard_kruger_network_local_area_connection_4");
    ///<summary>_network Loopback Pseudo-Interface 1</summary>
    public SensorEntity HenzardKrugerNetworkLoopbackPseudoInterface1 => new(_haContext, "sensor.henzard_kruger_network_loopback_pseudo_interface_1");
    ///<summary>_network Network Card Count</summary>
    public SensorEntity HenzardKrugerNetworkNetworkCardCount => new(_haContext, "sensor.henzard_kruger_network_network_card_count");
    ///<summary>_network Tailscale</summary>
    public SensorEntity HenzardKrugerNetworkTailscale => new(_haContext, "sensor.henzard_kruger_network_tailscale");
    ///<summary>_network vEthernet (Default Switch)</summary>
    public SensorEntity HenzardKrugerNetworkVethernetDefaultSwitch => new(_haContext, "sensor.henzard_kruger_network_vethernet_default_switch");
    ///<summary>_network vEthernet (Default Switch)</summary>
    public SensorEntity HenzardKrugerNetworkVethernetDefaultSwitch2 => new(_haContext, "sensor.henzard_kruger_network_vethernet_default_switch_2");
    ///<summary>_network vEthernet (Default Switch)</summary>
    public SensorEntity HenzardKrugerNetworkVethernetDefaultSwitch3 => new(_haContext, "sensor.henzard_kruger_network_vethernet_default_switch_3");
    ///<summary>_network vEthernet (Default Switch)</summary>
    public SensorEntity HenzardKrugerNetworkVethernetDefaultSwitch4 => new(_haContext, "sensor.henzard_kruger_network_vethernet_default_switch_4");
    ///<summary>_network vEthernet (Default Switch)</summary>
    public SensorEntity HenzardKrugerNetworkVethernetDefaultSwitch68 => new(_haContext, "sensor.henzard_kruger_network_vethernet_default_switch_68");
    ///<summary>_network vEthernet (Default Switch)</summary>
    public SensorEntity HenzardKrugerNetworkVethernetDefaultSwitch69 => new(_haContext, "sensor.henzard_kruger_network_vethernet_default_switch_69");
    ///<summary>_network vEthernet (Default Switch)</summary>
    public SensorEntity HenzardKrugerNetworkVethernetDefaultSwitch70 => new(_haContext, "sensor.henzard_kruger_network_vethernet_default_switch_70");
    ///<summary>_network vEthernet (Default Switch)</summary>
    public SensorEntity HenzardKrugerNetworkVethernetDefaultSwitch71 => new(_haContext, "sensor.henzard_kruger_network_vethernet_default_switch_71");
    ///<summary>_network vEthernet (Default Switch)</summary>
    public SensorEntity HenzardKrugerNetworkVethernetDefaultSwitch72 => new(_haContext, "sensor.henzard_kruger_network_vethernet_default_switch_72");
    ///<summary>_network vEthernet (Default Switch)</summary>
    public SensorEntity HenzardKrugerNetworkVethernetDefaultSwitch73 => new(_haContext, "sensor.henzard_kruger_network_vethernet_default_switch_73");
    ///<summary>_network vEthernet (Default Switch)</summary>
    public SensorEntity HenzardKrugerNetworkVethernetDefaultSwitch74 => new(_haContext, "sensor.henzard_kruger_network_vethernet_default_switch_74");
    ///<summary>_network vEthernet (Default Switch)</summary>
    public SensorEntity HenzardKrugerNetworkVethernetDefaultSwitch75 => new(_haContext, "sensor.henzard_kruger_network_vethernet_default_switch_75");
    ///<summary>_network vEthernet (Default Switch)</summary>
    public SensorEntity HenzardKrugerNetworkVethernetDefaultSwitch76 => new(_haContext, "sensor.henzard_kruger_network_vethernet_default_switch_76");
    ///<summary>_network vEthernet (Default Switch)</summary>
    public SensorEntity HenzardKrugerNetworkVethernetDefaultSwitch77 => new(_haContext, "sensor.henzard_kruger_network_vethernet_default_switch_77");
    ///<summary>_network vEthernet (WSL)</summary>
    public SensorEntity HenzardKrugerNetworkVethernetWsl => new(_haContext, "sensor.henzard_kruger_network_vethernet_wsl");
    ///<summary>_network vEthernet (WSL)</summary>
    public SensorEntity HenzardKrugerNetworkVethernetWsl23 => new(_haContext, "sensor.henzard_kruger_network_vethernet_wsl_23");
    ///<summary>_network vEthernet (WSL)</summary>
    public SensorEntity HenzardKrugerNetworkVethernetWsl24 => new(_haContext, "sensor.henzard_kruger_network_vethernet_wsl_24");
    ///<summary>_network vEthernet (WSL)</summary>
    public SensorEntity HenzardKrugerNetworkVethernetWsl25 => new(_haContext, "sensor.henzard_kruger_network_vethernet_wsl_25");
    ///<summary>_network Wi-Fi</summary>
    public SensorEntity HenzardKrugerNetworkWiFi => new(_haContext, "sensor.henzard_kruger_network_wi_fi");
    ///<summary>_usernotification</summary>
    public SensorEntity HenzardKrugerUsernotification => new(_haContext, "sensor.henzard_kruger_usernotification");
    ///<summary>_webcamprocess</summary>
    public SensorEntity HenzardKrugerWebcamprocess => new(_haContext, "sensor.henzard_kruger_webcamprocess");
    ///<summary>Home Air quality day 1</summary>
    public SensorEntity HomeAirQualityDay1 => new(_haContext, "sensor.home_air_quality_day_1");
    ///<summary>Home Air quality day 2</summary>
    public SensorEntity HomeAirQualityDay2 => new(_haContext, "sensor.home_air_quality_day_2");
    ///<summary>Home Air quality day 3</summary>
    public SensorEntity HomeAirQualityDay3 => new(_haContext, "sensor.home_air_quality_day_3");
    ///<summary>Home Air quality day 4</summary>
    public SensorEntity HomeAirQualityDay4 => new(_haContext, "sensor.home_air_quality_day_4");
    ///<summary>Home Air quality day 0</summary>
    public SensorEntity HomeAirQualityToday => new(_haContext, "sensor.home_air_quality_today");
    ///<summary>Home Condition day 1</summary>
    public SensorEntity HomeConditionDay1 => new(_haContext, "sensor.home_condition_day_1");
    ///<summary>Home Condition day 2</summary>
    public SensorEntity HomeConditionDay2 => new(_haContext, "sensor.home_condition_day_2");
    ///<summary>Home Condition day 3</summary>
    public SensorEntity HomeConditionDay3 => new(_haContext, "sensor.home_condition_day_3");
    ///<summary>Home Condition day 4</summary>
    public SensorEntity HomeConditionDay4 => new(_haContext, "sensor.home_condition_day_4");
    ///<summary>Home Condition night 1</summary>
    public SensorEntity HomeConditionNight1 => new(_haContext, "sensor.home_condition_night_1");
    ///<summary>Home Condition night 2</summary>
    public SensorEntity HomeConditionNight2 => new(_haContext, "sensor.home_condition_night_2");
    ///<summary>Home Condition night 3</summary>
    public SensorEntity HomeConditionNight3 => new(_haContext, "sensor.home_condition_night_3");
    ///<summary>Home Condition night 4</summary>
    public SensorEntity HomeConditionNight4 => new(_haContext, "sensor.home_condition_night_4");
    ///<summary>Home Condition day 0</summary>
    public SensorEntity HomeConditionToday => new(_haContext, "sensor.home_condition_today");
    ///<summary>Home Condition night 0</summary>
    public SensorEntity HomeConditionTonight => new(_haContext, "sensor.home_condition_tonight");
    ///<summary>Home Pressure tendency</summary>
    public SensorEntity HomePressureTendency => new(_haContext, "sensor.home_pressure_tendency");
    ///<summary>Internet Gateway Device External IP</summary>
    public SensorEntity InternetGatewayDeviceExternalIp => new(_haContext, "sensor.internet_gateway_device_external_ip");
    ///<summary>IPv4 address eth0</summary>
    public SensorEntity Ipv4AddressEth0 => new(_haContext, "sensor.ipv4_address_eth0");
    ///<summary>IPv6 address eth0</summary>
    public SensorEntity Ipv6AddressEth0 => new(_haContext, "sensor.ipv6_address_eth0");
    ///<summary>Kaelyn S10 App importance</summary>
    public SensorEntity KaelynS10AppImportance => new(_haContext, "sensor.kaelyn_s10_app_importance");
    ///<summary>Kaelyn S10 App standby bucket</summary>
    public SensorEntity KaelynS10AppStandbyBucket => new(_haContext, "sensor.kaelyn_s10_app_standby_bucket");
    ///<summary>Kaelyn S10 Battery health</summary>
    public SensorEntity KaelynS10BatteryHealth => new(_haContext, "sensor.kaelyn_s10_battery_health");
    ///<summary>Kaelyn S10 Battery state</summary>
    public SensorEntity KaelynS10BatteryState => new(_haContext, "sensor.kaelyn_s10_battery_state");
    ///<summary>Kaelyn S10 BLE transmitter</summary>
    public SensorEntity KaelynS10BleTransmitter => new(_haContext, "sensor.kaelyn_s10_ble_transmitter");
    ///<summary>Kaelyn S10 Charger type</summary>
    public SensorEntity KaelynS10ChargerType => new(_haContext, "sensor.kaelyn_s10_charger_type");
    ///<summary>Kaelyn S10 Current time zone</summary>
    public SensorEntity KaelynS10CurrentTimeZone => new(_haContext, "sensor.kaelyn_s10_current_time_zone");
    ///<summary>Kaelyn S10 Current version</summary>
    public SensorEntity KaelynS10CurrentVersion => new(_haContext, "sensor.kaelyn_s10_current_version");
    ///<summary>Kaelyn S10 Detected activity</summary>
    public SensorEntity KaelynS10DetectedActivity => new(_haContext, "sensor.kaelyn_s10_detected_activity");
    ///<summary>Kaelyn S10 Do Not Disturb sensor</summary>
    public SensorEntity KaelynS10DoNotDisturbSensor => new(_haContext, "sensor.kaelyn_s10_do_not_disturb_sensor");
    ///<summary>Kaelyn S10 Geocoded location</summary>
    public SensorEntity KaelynS10GeocodedLocation => new(_haContext, "sensor.kaelyn_s10_geocoded_location");
    ///<summary>Kaelyn S10 Last notification</summary>
    public SensorEntity KaelynS10LastNotification => new(_haContext, "sensor.kaelyn_s10_last_notification");
    ///<summary>Kaelyn S10 Last reboot</summary>
    public SensorEntity KaelynS10LastReboot => new(_haContext, "sensor.kaelyn_s10_last_reboot");
    ///<summary>Kaelyn S10 Last removed notification</summary>
    public SensorEntity KaelynS10LastRemovedNotification => new(_haContext, "sensor.kaelyn_s10_last_removed_notification");
    ///<summary>Kaelyn S10 Last update trigger</summary>
    public SensorEntity KaelynS10LastUpdateTrigger => new(_haContext, "sensor.kaelyn_s10_last_update_trigger");
    ///<summary>Kaelyn S10 Media session</summary>
    public SensorEntity KaelynS10MediaSession => new(_haContext, "sensor.kaelyn_s10_media_session");
    ///<summary>Kaelyn S10 Next alarm</summary>
    public SensorEntity KaelynS10NextAlarm => new(_haContext, "sensor.kaelyn_s10_next_alarm");
    ///<summary>Kaelyn S10 Phone state</summary>
    public SensorEntity KaelynS10PhoneState => new(_haContext, "sensor.kaelyn_s10_phone_state");
    ///<summary>Kaelyn S10 Proximity sensor</summary>
    public SensorEntity KaelynS10ProximitySensor => new(_haContext, "sensor.kaelyn_s10_proximity_sensor");
    ///<summary>Kaelyn S10 Public IP address</summary>
    public SensorEntity KaelynS10PublicIpAddress => new(_haContext, "sensor.kaelyn_s10_public_ip_address");
    ///<summary>Kaelyn S10 Ringer mode</summary>
    public SensorEntity KaelynS10RingerMode => new(_haContext, "sensor.kaelyn_s10_ringer_mode");
    ///<summary>Kaelyn S10 SIM 1</summary>
    public SensorEntity KaelynS10Sim1 => new(_haContext, "sensor.kaelyn_s10_sim_1");
    ///<summary>Kaelyn S10 SIM 2</summary>
    public SensorEntity KaelynS10Sim2 => new(_haContext, "sensor.kaelyn_s10_sim_2");
    ///<summary>Kaelyn S10 Volume level alarm</summary>
    public SensorEntity KaelynS10VolumeLevelAlarm => new(_haContext, "sensor.kaelyn_s10_volume_level_alarm");
    ///<summary>Kaelyn S10 Volume level call</summary>
    public SensorEntity KaelynS10VolumeLevelCall => new(_haContext, "sensor.kaelyn_s10_volume_level_call");
    ///<summary>Kaelyn S10 Volume level music</summary>
    public SensorEntity KaelynS10VolumeLevelMusic => new(_haContext, "sensor.kaelyn_s10_volume_level_music");
    ///<summary>Kaelyn S10 Volume level ringer</summary>
    public SensorEntity KaelynS10VolumeLevelRinger => new(_haContext, "sensor.kaelyn_s10_volume_level_ringer");
    ///<summary>Kaelyn S10 WiFi BSSID</summary>
    public SensorEntity KaelynS10WifiBssid => new(_haContext, "sensor.kaelyn_s10_wifi_bssid");
    ///<summary>Kaelyn S10 WiFi connection</summary>
    public SensorEntity KaelynS10WifiConnection => new(_haContext, "sensor.kaelyn_s10_wifi_connection");
    ///<summary>Kaelyn S10 WiFi IP address</summary>
    public SensorEntity KaelynS10WifiIpAddress => new(_haContext, "sensor.kaelyn_s10_wifi_ip_address");
    ///<summary>KWS-ONE_battery Charge Remaining</summary>
    public SensorEntity KwsOneKwsOneBatteryChargeRemaining => new(_haContext, "sensor.kws_one_kws_one_battery_charge_remaining");
    ///<summary>KWS-ONE_battery Charge Status</summary>
    public SensorEntity KwsOneKwsOneBatteryChargeStatus => new(_haContext, "sensor.kws_one_kws_one_battery_charge_status");
    ///<summary>KWS-ONE_battery Full Charge Lifetime</summary>
    public SensorEntity KwsOneKwsOneBatteryFullChargeLifetime => new(_haContext, "sensor.kws_one_kws_one_battery_full_charge_lifetime");
    ///<summary>KWS-ONE_battery Powerline Status</summary>
    public SensorEntity KwsOneKwsOneBatteryPowerlineStatus => new(_haContext, "sensor.kws_one_kws_one_battery_powerline_status");
    ///<summary>KWS-ONE_display Display Count</summary>
    public SensorEntity KwsOneKwsOneDisplayDisplayCount => new(_haContext, "sensor.kws_one_kws_one_display_display_count");
    ///<summary>KWS-ONE_display DISPLAY1</summary>
    public SensorEntity KwsOneKwsOneDisplayDisplay1 => new(_haContext, "sensor.kws_one_kws_one_display_display1");
    ///<summary>KWS-ONE_display DISPLAY2</summary>
    public SensorEntity KwsOneKwsOneDisplayDisplay2 => new(_haContext, "sensor.kws_one_kws_one_display_display2");
    ///<summary>KWS-ONE_display DISPLAY5</summary>
    public SensorEntity KwsOneKwsOneDisplayDisplay5 => new(_haContext, "sensor.kws_one_kws_one_display_display5");
    ///<summary>KWS-ONE_display DISPLAY6</summary>
    public SensorEntity KwsOneKwsOneDisplayDisplay6 => new(_haContext, "sensor.kws_one_kws_one_display_display6");
    ///<summary>KWS-ONE_display Primary Display</summary>
    public SensorEntity KwsOneKwsOneDisplayPrimaryDisplay => new(_haContext, "sensor.kws_one_kws_one_display_primary_display");
    ///<summary>KWS-ONE_lastactive</summary>
    public SensorEntity KwsOneKwsOneLastactive => new(_haContext, "sensor.kws_one_kws_one_lastactive");
    ///<summary>KWS-ONE_lastboot</summary>
    public SensorEntity KwsOneKwsOneLastboot => new(_haContext, "sensor.kws_one_kws_one_lastboot");
    ///<summary>KWS-ONE_network Bluetooth Network Connection</summary>
    public SensorEntity KwsOneKwsOneNetworkBluetoothNetworkConnection => new(_haContext, "sensor.kws_one_kws_one_network_bluetooth_network_connection");
    ///<summary>KWS-ONE_network Hamachi</summary>
    public SensorEntity KwsOneKwsOneNetworkHamachi => new(_haContext, "sensor.kws_one_kws_one_network_hamachi");
    ///<summary>KWS-ONE_network Local Area Connection* 1</summary>
    public SensorEntity KwsOneKwsOneNetworkLocalAreaConnection1 => new(_haContext, "sensor.kws_one_kws_one_network_local_area_connection_1");
    ///<summary>KWS-ONE_network Local Area Connection* 2</summary>
    public SensorEntity KwsOneKwsOneNetworkLocalAreaConnection2 => new(_haContext, "sensor.kws_one_kws_one_network_local_area_connection_2");
    ///<summary>KWS-ONE_network Loopback Pseudo-Interface 1</summary>
    public SensorEntity KwsOneKwsOneNetworkLoopbackPseudoInterface1 => new(_haContext, "sensor.kws_one_kws_one_network_loopback_pseudo_interface_1");
    ///<summary>KWS-ONE_network Network Card Count</summary>
    public SensorEntity KwsOneKwsOneNetworkNetworkCardCount => new(_haContext, "sensor.kws_one_kws_one_network_network_card_count");
    ///<summary>KWS-ONE_network Tailscale</summary>
    public SensorEntity KwsOneKwsOneNetworkTailscale => new(_haContext, "sensor.kws_one_kws_one_network_tailscale");
    ///<summary>KWS-ONE_network vEthernet (WSL (Hyper-V firewall))</summary>
    public SensorEntity KwsOneKwsOneNetworkVethernetWslHyperVFirewall => new(_haContext, "sensor.kws_one_kws_one_network_vethernet_wsl_hyper_v_firewall");
    ///<summary>KWS-ONE_network vEthernet (WSL (Hyper-V firewall))</summary>
    public SensorEntity KwsOneKwsOneNetworkVethernetWslHyperVFirewall2 => new(_haContext, "sensor.kws_one_kws_one_network_vethernet_wsl_hyper_v_firewall_2");
    ///<summary>KWS-ONE_network Wi-Fi</summary>
    public SensorEntity KwsOneKwsOneNetworkWiFi => new(_haContext, "sensor.kws_one_kws_one_network_wi_fi");
    ///<summary>KWS-ONE_sessionstate</summary>
    public SensorEntity KwsOneKwsOneSessionstate => new(_haContext, "sensor.kws_one_kws_one_sessionstate");
    ///<summary>KWS-ONE_storage C</summary>
    public SensorEntity KwsOneKwsOneStorageC => new(_haContext, "sensor.kws_one_kws_one_storage_c");
    ///<summary>KWS-ONE_storage Total Disk Count</summary>
    public SensorEntity KwsOneKwsOneStorageTotalDiskCount => new(_haContext, "sensor.kws_one_kws_one_storage_total_disk_count");
    ///<summary>System Monitor Last boot</summary>
    public SensorEntity LastBoot => new(_haContext, "sensor.last_boot");
    ///<summary>Liters Instance</summary>
    public SensorEntity LitersInstance => new(_haContext, "sensor.liters_instance");
    ///<summary>System Monitor Load (15m)</summary>
    public SensorEntity Load15m => new(_haContext, "sensor.load_15m");
    ///<summary>System Monitor Load (1m)</summary>
    public SensorEntity Load1m => new(_haContext, "sensor.load_1m");
    ///<summary>System Monitor Load (5m)</summary>
    public SensorEntity Load5m => new(_haContext, "sensor.load_5m");
    ///<summary>Loadshedding</summary>
    public SensorEntity Loadshedding => new(_haContext, "sensor.loadshedding");
    ///<summary>loadshedding Stage</summary>
    public SensorEntity LoadsheddingStage => new(_haContext, "sensor.loadshedding_stage");
    ///<summary>loadshedding Value</summary>
    public SensorEntity LoadsheddingValue => new(_haContext, "sensor.loadshedding_value");
    ///<summary>Local IP</summary>
    public SensorEntity LocalIp => new(_haContext, "sensor.local_ip");
    ///<summary>Moon Phase</summary>
    public SensorEntity MoonPhase => new(_haContext, "sensor.moon_phase");
    ///<summary>nodered c49c97f829d3ea3f</summary>
    public SensorEntity NoderedC49c97f829d3ea3f => new(_haContext, "sensor.nodered_c49c97f829d3ea3f");
    ///<summary>Packets in eth0</summary>
    public SensorEntity PacketsInEth0 => new(_haContext, "sensor.packets_in_eth0");
    ///<summary>Packets out eth0</summary>
    public SensorEntity PacketsOutEth0 => new(_haContext, "sensor.packets_out_eth0");
    ///<summary>Debug State Text</summary>
    public SensorEntity PlantSensorWithDisplayDebugStateText => new(_haContext, "sensor.plant_sensor_with_display_debug_state_text");
    ///<summary>Plant Sensor With Display Debug State Text</summary>
    public SensorEntity PlantSensorWithDisplayDebugStateText2 => new(_haContext, "sensor.plant_sensor_with_display_debug_state_text_2");
    ///<summary>plantsensor Connected BSSID</summary>
    public SensorEntity PlantSensorWithDisplayPlantsensorConnectedBssid => new(_haContext, "sensor.plant_sensor_with_display_plantsensor_connected_bssid");
    ///<summary>Plant Sensor With Display plantsensor Connected BSSID</summary>
    public SensorEntity PlantSensorWithDisplayPlantsensorConnectedBssid2 => new(_haContext, "sensor.plant_sensor_with_display_plantsensor_connected_bssid_2");
    ///<summary>plantsensor Connected SSID</summary>
    public SensorEntity PlantSensorWithDisplayPlantsensorConnectedSsid => new(_haContext, "sensor.plant_sensor_with_display_plantsensor_connected_ssid");
    ///<summary>Plant Sensor With Display plantsensor Connected SSID</summary>
    public SensorEntity PlantSensorWithDisplayPlantsensorConnectedSsid2 => new(_haContext, "sensor.plant_sensor_with_display_plantsensor_connected_ssid_2");
    ///<summary>plantsensor DNS Address</summary>
    public SensorEntity PlantSensorWithDisplayPlantsensorDnsAddress => new(_haContext, "sensor.plant_sensor_with_display_plantsensor_dns_address");
    ///<summary>Plant Sensor With Display plantsensor DNS Address</summary>
    public SensorEntity PlantSensorWithDisplayPlantsensorDnsAddress2 => new(_haContext, "sensor.plant_sensor_with_display_plantsensor_dns_address_2");
    ///<summary>plantsensor IP Address</summary>
    public SensorEntity PlantSensorWithDisplayPlantsensorIpAddress => new(_haContext, "sensor.plant_sensor_with_display_plantsensor_ip_address");
    ///<summary>Plant Sensor With Display plantsensor IP Address</summary>
    public SensorEntity PlantSensorWithDisplayPlantsensorIpAddress2 => new(_haContext, "sensor.plant_sensor_with_display_plantsensor_ip_address_2");
    ///<summary>plantsensor Latest Scan Results</summary>
    public SensorEntity PlantSensorWithDisplayPlantsensorLatestScanResults => new(_haContext, "sensor.plant_sensor_with_display_plantsensor_latest_scan_results");
    ///<summary>Plant Sensor With Display plantsensor Latest Scan Results</summary>
    public SensorEntity PlantSensorWithDisplayPlantsensorLatestScanResults2 => new(_haContext, "sensor.plant_sensor_with_display_plantsensor_latest_scan_results_2");
    ///<summary>plantsensor Mac Wifi Address</summary>
    public SensorEntity PlantSensorWithDisplayPlantsensorMacWifiAddress => new(_haContext, "sensor.plant_sensor_with_display_plantsensor_mac_wifi_address");
    ///<summary>Plant Sensor With Display plantsensor Mac Wifi Address</summary>
    public SensorEntity PlantSensorWithDisplayPlantsensorMacWifiAddress2 => new(_haContext, "sensor.plant_sensor_with_display_plantsensor_mac_wifi_address_2");
    ///<summary>Portable air conditioner f e arkgrille</summary>
    public SensorEntity PortableAirConditionerFEArkgrille => new(_haContext, "sensor.portable_air_conditioner_f_e_arkgrille");
    ///<summary>Portable air conditioner f e dwmachine</summary>
    public SensorEntity PortableAirConditionerFEDwmachine => new(_haContext, "sensor.portable_air_conditioner_f_e_dwmachine");
    ///<summary>Portable air conditioner f e incoiltemp</summary>
    public SensorEntity PortableAirConditionerFEIncoiltemp => new(_haContext, "sensor.portable_air_conditioner_f_e_incoiltemp");
    ///<summary>Portable air conditioner f e incom</summary>
    public SensorEntity PortableAirConditionerFEIncom => new(_haContext, "sensor.portable_air_conditioner_f_e_incom");
    ///<summary>Portable air conditioner f e indisplay</summary>
    public SensorEntity PortableAirConditionerFEIndisplay => new(_haContext, "sensor.portable_air_conditioner_f_e_indisplay");
    ///<summary>Portable air conditioner f e ineeprom</summary>
    public SensorEntity PortableAirConditionerFEIneeprom => new(_haContext, "sensor.portable_air_conditioner_f_e_ineeprom");
    ///<summary>Portable air conditioner f e inele</summary>
    public SensorEntity PortableAirConditionerFEInele => new(_haContext, "sensor.portable_air_conditioner_f_e_inele");
    ///<summary>Portable air conditioner f e infanmotor</summary>
    public SensorEntity PortableAirConditionerFEInfanmotor => new(_haContext, "sensor.portable_air_conditioner_f_e_infanmotor");
    ///<summary>Portable air conditioner f e inhumidity</summary>
    public SensorEntity PortableAirConditionerFEInhumidity => new(_haContext, "sensor.portable_air_conditioner_f_e_inhumidity");
    ///<summary>Portable air conditioner f e inkeys</summary>
    public SensorEntity PortableAirConditionerFEInkeys => new(_haContext, "sensor.portable_air_conditioner_f_e_inkeys");
    ///<summary>Portable air conditioner f e intemp</summary>
    public SensorEntity PortableAirConditionerFEIntemp => new(_haContext, "sensor.portable_air_conditioner_f_e_intemp");
    ///<summary>Portable air conditioner f e invzero</summary>
    public SensorEntity PortableAirConditionerFEInvzero => new(_haContext, "sensor.portable_air_conditioner_f_e_invzero");
    ///<summary>Portable air conditioner f e inwifi</summary>
    public SensorEntity PortableAirConditionerFEInwifi => new(_haContext, "sensor.portable_air_conditioner_f_e_inwifi");
    ///<summary>Portable air conditioner f e outcoiltemp</summary>
    public SensorEntity PortableAirConditionerFEOutcoiltemp => new(_haContext, "sensor.portable_air_conditioner_f_e_outcoiltemp");
    ///<summary>Portable air conditioner f e outeeprom</summary>
    public SensorEntity PortableAirConditionerFEOuteeprom => new(_haContext, "sensor.portable_air_conditioner_f_e_outeeprom");
    ///<summary>Portable air conditioner f e outgastemp</summary>
    public SensorEntity PortableAirConditionerFEOutgastemp => new(_haContext, "sensor.portable_air_conditioner_f_e_outgastemp");
    ///<summary>Portable air conditioner f e outtemp</summary>
    public SensorEntity PortableAirConditionerFEOuttemp => new(_haContext, "sensor.portable_air_conditioner_f_e_outtemp");
    ///<summary>Portable air conditioner f e over cold</summary>
    public SensorEntity PortableAirConditionerFEOverCold => new(_haContext, "sensor.portable_air_conditioner_f_e_over_cold");
    ///<summary>Portable air conditioner f e over hot</summary>
    public SensorEntity PortableAirConditionerFEOverHot => new(_haContext, "sensor.portable_air_conditioner_f_e_over_hot");
    ///<summary>Portable air conditioner f e push</summary>
    public SensorEntity PortableAirConditionerFEPush => new(_haContext, "sensor.portable_air_conditioner_f_e_push");
    ///<summary>Portable air conditioner f e upmachine</summary>
    public SensorEntity PortableAirConditionerFEUpmachine => new(_haContext, "sensor.portable_air_conditioner_f_e_upmachine");
    ///<summary>Portable air conditioner f e waterfull</summary>
    public SensorEntity PortableAirConditionerFEWaterfull => new(_haContext, "sensor.portable_air_conditioner_f_e_waterfull");
    ///<summary>Portable air conditioner f ecm</summary>
    public SensorEntity PortableAirConditionerFEcm => new(_haContext, "sensor.portable_air_conditioner_f_ecm");
    ///<summary>Portable air conditioner f electricity</summary>
    public SensorEntity PortableAirConditionerFElectricity => new(_haContext, "sensor.portable_air_conditioner_f_electricity");
    ///<summary>Portable air conditioner f-filter</summary>
    public SensorEntity PortableAirConditionerFFilter => new(_haContext, "sensor.portable_air_conditioner_f_filter");
    ///<summary>Portable air conditioner f humidity</summary>
    public SensorEntity PortableAirConditionerFHumidity => new(_haContext, "sensor.portable_air_conditioner_f_humidity");
    ///<summary>Portable air conditioner Measured grid voltage</summary>
    public SensorEntity PortableAirConditionerMeasuredGridVoltage => new(_haContext, "sensor.portable_air_conditioner_measured_grid_voltage");
    ///<summary>Portable air conditioner Sleep</summary>
    public SensorEntity PortableAirConditionerSleep => new(_haContext, "sensor.portable_air_conditioner_sleep");
    ///<summary>Portable air conditioner t dal</summary>
    public SensorEntity PortableAirConditionerTDal => new(_haContext, "sensor.portable_air_conditioner_t_dal");
    ///<summary>Portable air conditioner t demand response</summary>
    public SensorEntity PortableAirConditionerTDemandResponse => new(_haContext, "sensor.portable_air_conditioner_t_demand_response");
    ///<summary>Portable air conditioner t fan speed s</summary>
    public SensorEntity PortableAirConditionerTFanSpeedS => new(_haContext, "sensor.portable_air_conditioner_t_fan_speed_s");
    ///<summary>Portable air conditioner t fanspeedcv</summary>
    public SensorEntity PortableAirConditionerTFanspeedcv => new(_haContext, "sensor.portable_air_conditioner_t_fanspeedcv");
    ///<summary>Portable air conditioner t swing angle</summary>
    public SensorEntity PortableAirConditionerTSwingAngle => new(_haContext, "sensor.portable_air_conditioner_t_swing_angle");
    ///<summary>Portable air conditioner t swing direction</summary>
    public SensorEntity PortableAirConditionerTSwingDirection => new(_haContext, "sensor.portable_air_conditioner_t_swing_direction");
    ///<summary>Portable air conditioner t swing follow</summary>
    public SensorEntity PortableAirConditionerTSwingFollow => new(_haContext, "sensor.portable_air_conditioner_t_swing_follow");
    ///<summary>Portable air conditioner t talr</summary>
    public SensorEntity PortableAirConditionerTTalr => new(_haContext, "sensor.portable_air_conditioner_t_talr");
    ///<summary>Portable air conditioner t temp compensate</summary>
    public SensorEntity PortableAirConditionerTTempCompensate => new(_haContext, "sensor.portable_air_conditioner_t_temp_compensate");
    ///<summary>Portable air conditioner t tms</summary>
    public SensorEntity PortableAirConditionerTTms => new(_haContext, "sensor.portable_air_conditioner_t_tms");
    ///<summary>Pushbullet Body</summary>
    public SensorEntity PushbulletBody => new(_haContext, "sensor.pushbullet_body");
    ///<summary>Pushbullet Title</summary>
    public SensorEntity PushbulletTitle => new(_haContext, "sensor.pushbullet_title");
    ///<summary>Status</summary>
    public SensorEntity QbittorrentNone => new(_haContext, "sensor.qbittorrent_none");
    ///<summary>SleepAsAndroid_henzard</summary>
    public SensorEntity SleepasandroidHenzard => new(_haContext, "sensor.sleepasandroid_henzard");
    ///<summary>SM-S901E Audio mode</summary>
    public SensorEntity SmS901eAudioMode => new(_haContext, "sensor.sm_s901e_audio_mode");
    ///<summary>SM-S901E Battery health</summary>
    public SensorEntity SmS901eBatteryHealth => new(_haContext, "sensor.sm_s901e_battery_health");
    ///<summary>SM-S901E Battery state</summary>
    public SensorEntity SmS901eBatteryState => new(_haContext, "sensor.sm_s901e_battery_state");
    ///<summary>SM-S901E Charger type</summary>
    public SensorEntity SmS901eChargerType => new(_haContext, "sensor.sm_s901e_charger_type");
    ///<summary>SM-S901E Current time zone</summary>
    public SensorEntity SmS901eCurrentTimeZone => new(_haContext, "sensor.sm_s901e_current_time_zone");
    ///<summary>SM-S901E Detected activity</summary>
    public SensorEntity SmS901eDetectedActivity => new(_haContext, "sensor.sm_s901e_detected_activity");
    ///<summary>SM-S901E Geocoded location</summary>
    public SensorEntity SmS901eGeocodedLocation => new(_haContext, "sensor.sm_s901e_geocoded_location");
    ///<summary>SM-S901E Last reboot</summary>
    public SensorEntity SmS901eLastReboot => new(_haContext, "sensor.sm_s901e_last_reboot");
    ///<summary>SM-S901E Media session</summary>
    public SensorEntity SmS901eMediaSession => new(_haContext, "sensor.sm_s901e_media_session");
    ///<summary>SM-S901E Network type</summary>
    public SensorEntity SmS901eNetworkType => new(_haContext, "sensor.sm_s901e_network_type");
    ///<summary>SM-S901E Next alarm</summary>
    public SensorEntity SmS901eNextAlarm => new(_haContext, "sensor.sm_s901e_next_alarm");
    ///<summary>SM-S901E OS version</summary>
    public SensorEntity SmS901eOsVersion => new(_haContext, "sensor.sm_s901e_os_version");
    ///<summary>SM-S901E Proximity sensor</summary>
    public SensorEntity SmS901eProximitySensor => new(_haContext, "sensor.sm_s901e_proximity_sensor");
    ///<summary>SM-S901E Ringer mode</summary>
    public SensorEntity SmS901eRingerMode => new(_haContext, "sensor.sm_s901e_ringer_mode");
    ///<summary>SM-S901E Screen brightness</summary>
    public SensorEntity SmS901eScreenBrightness => new(_haContext, "sensor.sm_s901e_screen_brightness");
    ///<summary>SM-S901E WiFi BSSID</summary>
    public SensorEntity SmS901eWifiBssid => new(_haContext, "sensor.sm_s901e_wifi_bssid");
    ///<summary>SM-S901E WiFi connection</summary>
    public SensorEntity SmS901eWifiConnection => new(_haContext, "sensor.sm_s901e_wifi_connection");
    ///<summary>SM-S901E WiFi IP address</summary>
    public SensorEntity SmS901eWifiIpAddress => new(_haContext, "sensor.sm_s901e_wifi_ip_address");
    ///<summary>Living room Fan Action</summary>
    public SensorEntity Sonoff1001eaf358Action => new(_haContext, "sensor.sonoff_1001eaf358_action");
    ///<summary>Garage Door Action</summary>
    public SensorEntity Sonoff1002025af6Action => new(_haContext, "sensor.sonoff_1002025af6_action");
    ///<summary>Hek Action</summary>
    public SensorEntity Sonoff1002025b00Action => new(_haContext, "sensor.sonoff_1002025b00_action");
    ///<summary>Steps Daily</summary>
    public SensorEntity StepsDaily => new(_haContext, "sensor.steps_daily");
    ///<summary>Sun Next dawn</summary>
    public SensorEntity SunNextDawn => new(_haContext, "sensor.sun_next_dawn");
    ///<summary>Sun Next dusk</summary>
    public SensorEntity SunNextDusk => new(_haContext, "sensor.sun_next_dusk");
    ///<summary>Sun Next midnight</summary>
    public SensorEntity SunNextMidnight => new(_haContext, "sensor.sun_next_midnight");
    ///<summary>Sun Next noon</summary>
    public SensorEntity SunNextNoon => new(_haContext, "sensor.sun_next_noon");
    ///<summary>Sun Next rising</summary>
    public SensorEntity SunNextRising => new(_haContext, "sensor.sun_next_rising");
    ///<summary>Sun Next setting</summary>
    public SensorEntity SunNextSetting => new(_haContext, "sensor.sun_next_setting");
    ///<summary>Tank Level</summary>
    public SensorEntity TankLevel => new(_haContext, "sensor.tank_level");
    ///<summary>Total Liters</summary>
    public SensorEntity TotalLiters => new(_haContext, "sensor.total_liters");
    ///<summary>Water Plants</summary>
    public SensorEntity WaterPlants => new(_haContext, "sensor.water_plants");
    ///<summary>BSSID</summary>
    public SensorEntity WaterPumpBssid => new(_haContext, "sensor.water_pump_bssid");
    ///<summary>DNS Address</summary>
    public SensorEntity WaterPumpDnsAddress => new(_haContext, "sensor.water_pump_dns_address");
    ///<summary>IP Address</summary>
    public SensorEntity WaterPumpIpAddress => new(_haContext, "sensor.water_pump_ip_address");
    ///<summary>Latest Scan Results</summary>
    public SensorEntity WaterPumpLatestScanResults => new(_haContext, "sensor.water_pump_latest_scan_results");
    ///<summary>Mac Wifi Address</summary>
    public SensorEntity WaterPumpMacWifiAddress => new(_haContext, "sensor.water_pump_mac_wifi_address");
    ///<summary>SSID</summary>
    public SensorEntity WaterPumpSsid => new(_haContext, "sensor.water_pump_ssid");
    ///<summary>Weighing</summary>
    public SensorEntity Weighing => new(_haContext, "sensor.weighing");
    ///<summary>Weighsoft Now Server WeighsoftNowServer Connected BSSID</summary>
    public SensorEntity WeighsoftNowServerWeighsoftnowserverConnectedBssid => new(_haContext, "sensor.weighsoft_now_server_weighsoftnowserver_connected_bssid");
    ///<summary>Weighsoft Now Server WeighsoftNowServer Connected SSID</summary>
    public SensorEntity WeighsoftNowServerWeighsoftnowserverConnectedSsid => new(_haContext, "sensor.weighsoft_now_server_weighsoftnowserver_connected_ssid");
    ///<summary>Weighsoft Now Server WeighsoftNowServer DNS Address</summary>
    public SensorEntity WeighsoftNowServerWeighsoftnowserverDnsAddress => new(_haContext, "sensor.weighsoft_now_server_weighsoftnowserver_dns_address");
    ///<summary>Weighsoft Now Server WeighsoftNowServer IP Address</summary>
    public SensorEntity WeighsoftNowServerWeighsoftnowserverIpAddress => new(_haContext, "sensor.weighsoft_now_server_weighsoftnowserver_ip_address");
    ///<summary>Weighsoft Now Server WeighsoftNowServer Latest Scan Results</summary>
    public SensorEntity WeighsoftNowServerWeighsoftnowserverLatestScanResults => new(_haContext, "sensor.weighsoft_now_server_weighsoftnowserver_latest_scan_results");
    ///<summary>Weighsoft Now Server WeighsoftNowServer Mac Wifi Address</summary>
    public SensorEntity WeighsoftNowServerWeighsoftnowserverMacWifiAddress => new(_haContext, "sensor.weighsoft_now_server_weighsoftnowserver_mac_wifi_address");
    ///<summary>Active Minutes Daily</summary>
    public NumericSensorEntity ActiveMinutesDaily => new(_haContext, "sensor.active_minutes_daily");
    ///<summary>Awake Time</summary>
    public NumericSensorEntity AwakeTime => new(_haContext, "sensor.awake_time");
    ///<summary>Basal Metabolic Rate</summary>
    public NumericSensorEntity BasalMetabolicRate => new(_haContext, "sensor.basal_metabolic_rate");
    ///<summary>Bloemfontein Moon Age</summary>
    public NumericSensorEntity BloemfonteinMoonAge => new(_haContext, "sensor.bloemfontein_moon_age");
    ///<summary>Bloemfontein Moon Altitude</summary>
    public NumericSensorEntity BloemfonteinMoonAltitude => new(_haContext, "sensor.bloemfontein_moon_altitude");
    ///<summary>Bloemfontein Moon Azimuth</summary>
    public NumericSensorEntity BloemfonteinMoonAzimuth => new(_haContext, "sensor.bloemfontein_moon_azimuth");
    ///<summary>Bloemfontein Moon Distance</summary>
    public NumericSensorEntity BloemfonteinMoonDistance => new(_haContext, "sensor.bloemfontein_moon_distance");
    ///<summary>Bloemfontein Moon Illumination Fraction</summary>
    public NumericSensorEntity BloemfonteinMoonIlluminationFraction => new(_haContext, "sensor.bloemfontein_moon_illumination_fraction");
    ///<summary>Bloemfontein Moon Parallactic Angle</summary>
    public NumericSensorEntity BloemfonteinMoonParallacticAngle => new(_haContext, "sensor.bloemfontein_moon_parallactic_angle");
    ///<summary>Blood Glucose</summary>
    public NumericSensorEntity BloodGlucose => new(_haContext, "sensor.blood_glucose");
    ///<summary>Blood Pressure Diastolic</summary>
    public NumericSensorEntity BloodPressureDiastolic => new(_haContext, "sensor.blood_pressure_diastolic");
    ///<summary>Blood Pressure Systolic</summary>
    public NumericSensorEntity BloodPressureSystolic => new(_haContext, "sensor.blood_pressure_systolic");
    ///<summary>Body Fat</summary>
    public NumericSensorEntity BodyFat => new(_haContext, "sensor.body_fat");
    ///<summary>Body Temperature</summary>
    public NumericSensorEntity BodyTemperature => new(_haContext, "sensor.body_temperature");
    ///<summary>Boorgat Current</summary>
    public NumericSensorEntity BoorgatCurrent => new(_haContext, "sensor.boorgat_current");
    ///<summary>Boorgat Power</summary>
    public NumericSensorEntity BoorgatPower => new(_haContext, "sensor.boorgat_power");
    ///<summary>Boorgat Voltage</summary>
    public NumericSensorEntity BoorgatVoltage => new(_haContext, "sensor.boorgat_voltage");
    ///<summary>Box Battery Level</summary>
    public NumericSensorEntity BoxBatteryLevel => new(_haContext, "sensor.box_battery_level");
    ///<summary>Box Illuminance</summary>
    public NumericSensorEntity BoxIlluminance => new(_haContext, "sensor.box_illuminance");
    ///<summary>Box Moisture</summary>
    public NumericSensorEntity BoxMoisture => new(_haContext, "sensor.box_moisture");
    ///<summary>Box Soil Conductivity</summary>
    public NumericSensorEntity BoxSoilConductivity => new(_haContext, "sensor.box_soil_conductivity");
    ///<summary>Box Temperature</summary>
    public NumericSensorEntity BoxTemperature => new(_haContext, "sensor.box_temperature");
    ///<summary>Calories Burnt Daily</summary>
    public NumericSensorEntity CaloriesBurntDaily => new(_haContext, "sensor.calories_burnt_daily");
    ///<summary>Daily Avg Weight</summary>
    public NumericSensorEntity DailyAvgWeight => new(_haContext, "sensor.daily_avg_weight");
    ///<summary>Deep Sleep</summary>
    public NumericSensorEntity DeepSleep => new(_haContext, "sensor.deep_sleep");
    ///<summary>System Monitor Disk free /</summary>
    public NumericSensorEntity DiskFree => new(_haContext, "sensor.disk_free");
    ///<summary>System Monitor Disk use /</summary>
    public NumericSensorEntity DiskUse => new(_haContext, "sensor.disk_use");
    ///<summary>System Monitor Disk usage /config</summary>
    public NumericSensorEntity DiskUsePercentConfig => new(_haContext, "sensor.disk_use_percent_config");
    ///<summary>Distance Travelled Daily</summary>
    public NumericSensorEntity DistanceTravelledDaily => new(_haContext, "sensor.distance_travelled_daily");
    ///<summary>energy_garage</summary>
    public NumericSensorEntity EnergyGarage => new(_haContext, "sensor.energy_garage");
    ///<summary>sensor Cost</summary>
    public NumericSensorEntity EnergyGarageCost => new(_haContext, "sensor.energy_garage_cost");
    ///<summary>ESP32 Humidity and Temp Living Room Humidity</summary>
    public NumericSensorEntity Esp32HumidityAndTempLivingRoomHumidity => new(_haContext, "sensor.esp32_humidity_and_temp_living_room_humidity");
    ///<summary>ESP32 Humidity and Temp Living Room Temperature</summary>
    public NumericSensorEntity Esp32HumidityAndTempLivingRoomTemperature => new(_haContext, "sensor.esp32_humidity_and_temp_living_room_temperature");
    ///<summary>Exchange rate (1 BTC)</summary>
    public NumericSensorEntity ExchangeRate1Btc => new(_haContext, "sensor.exchange_rate_1_btc");
    ///<summary>Galaxy Watch4 Classic (75RE) Battery level</summary>
    public NumericSensorEntity GalaxyWatch4Classic75reBatteryLevel => new(_haContext, "sensor.galaxy_watch4_classic_75re_battery_level");
    ///<summary>Geyser  Current</summary>
    public NumericSensorEntity GeyserCurrent => new(_haContext, "sensor.geyser_current");
    ///<summary>Geyser  Power</summary>
    public NumericSensorEntity GeyserPower => new(_haContext, "sensor.geyser_power");
    ///<summary>Geyser  Voltage</summary>
    public NumericSensorEntity GeyserVoltage => new(_haContext, "sensor.geyser_voltage");
    ///<summary>Henzard Kruger Dailies</summary>
    public NumericSensorEntity HabiticaHenzardKrugerDailys => new(_haContext, "sensor.habitica_henzard_kruger_dailys");
    ///<summary>Henzard Kruger Habits</summary>
    public NumericSensorEntity HabiticaHenzardKrugerHabits => new(_haContext, "sensor.habitica_henzard_kruger_habits");
    ///<summary>Henzard Kruger Rewards</summary>
    public NumericSensorEntity HabiticaHenzardKrugerRewards => new(_haContext, "sensor.habitica_henzard_kruger_rewards");
    ///<summary>Henzard Kruger To-Do&apos;s</summary>
    public NumericSensorEntity HabiticaHenzardKrugerTodos => new(_haContext, "sensor.habitica_henzard_kruger_todos");
    ///<summary>Heart Rate</summary>
    public NumericSensorEntity HeartRate => new(_haContext, "sensor.heart_rate");
    ///<summary>Height</summary>
    public NumericSensorEntity Height => new(_haContext, "sensor.height");
    ///<summary>_battery Charge Remaining Percentage</summary>
    public NumericSensorEntity HenzardKrugerBatteryChargeRemainingPercentage => new(_haContext, "sensor.henzard_kruger_battery_charge_remaining_percentage");
    ///<summary>Henzard Kruger Constitution</summary>
    public NumericSensorEntity HenzardKrugerConstitution => new(_haContext, "sensor.henzard_kruger_constitution");
    ///<summary>_cpuload</summary>
    public NumericSensorEntity HenzardKrugerCpuload => new(_haContext, "sensor.henzard_kruger_cpuload");
    ///<summary>Henzard Kruger Experience</summary>
    public NumericSensorEntity HenzardKrugerExperience => new(_haContext, "sensor.henzard_kruger_experience");
    ///<summary>Henzard Kruger Gems</summary>
    public NumericSensorEntity HenzardKrugerGems => new(_haContext, "sensor.henzard_kruger_gems");
    ///<summary>Henzard Kruger Gold</summary>
    public NumericSensorEntity HenzardKrugerGold => new(_haContext, "sensor.henzard_kruger_gold");
    ///<summary>Henzard Kruger Health</summary>
    public NumericSensorEntity HenzardKrugerHealth => new(_haContext, "sensor.henzard_kruger_health");
    ///<summary>Henzard Kruger Intelligence</summary>
    public NumericSensorEntity HenzardKrugerIntelligence => new(_haContext, "sensor.henzard_kruger_intelligence");
    ///<summary>Henzard Kruger Mana</summary>
    public NumericSensorEntity HenzardKrugerMana => new(_haContext, "sensor.henzard_kruger_mana");
    ///<summary>Henzard Kruger Max. mana</summary>
    public NumericSensorEntity HenzardKrugerMaxMana => new(_haContext, "sensor.henzard_kruger_max_mana");
    ///<summary>_memoryusage</summary>
    public NumericSensorEntity HenzardKrugerMemoryusage => new(_haContext, "sensor.henzard_kruger_memoryusage");
    ///<summary>Henzard Kruger Mystic hourglasses</summary>
    public NumericSensorEntity HenzardKrugerMysticHourglasses => new(_haContext, "sensor.henzard_kruger_mystic_hourglasses");
    ///<summary>Henzard Kruger Next level</summary>
    public NumericSensorEntity HenzardKrugerNextLevel => new(_haContext, "sensor.henzard_kruger_next_level");
    ///<summary>Henzard Kruger Perception</summary>
    public NumericSensorEntity HenzardKrugerPerception => new(_haContext, "sensor.henzard_kruger_perception");
    ///<summary>Henzard Kruger Strength</summary>
    public NumericSensorEntity HenzardKrugerStrength => new(_haContext, "sensor.henzard_kruger_strength");
    ///<summary>Home Cloud ceiling</summary>
    public NumericSensorEntity HomeCloudCeiling => new(_haContext, "sensor.home_cloud_ceiling");
    ///<summary>Home Hours of sun day 1</summary>
    public NumericSensorEntity HomeHoursOfSunDay1 => new(_haContext, "sensor.home_hours_of_sun_day_1");
    ///<summary>Home Hours of sun day 2</summary>
    public NumericSensorEntity HomeHoursOfSunDay2 => new(_haContext, "sensor.home_hours_of_sun_day_2");
    ///<summary>Home Hours of sun day 3</summary>
    public NumericSensorEntity HomeHoursOfSunDay3 => new(_haContext, "sensor.home_hours_of_sun_day_3");
    ///<summary>Home Hours of sun day 4</summary>
    public NumericSensorEntity HomeHoursOfSunDay4 => new(_haContext, "sensor.home_hours_of_sun_day_4");
    ///<summary>Home Hours of sun day 0</summary>
    public NumericSensorEntity HomeHoursOfSunToday => new(_haContext, "sensor.home_hours_of_sun_today");
    ///<summary>Home Precipitation</summary>
    public NumericSensorEntity HomePrecipitation => new(_haContext, "sensor.home_precipitation");
    ///<summary>Home RealFeel temperature</summary>
    public NumericSensorEntity HomeRealfeelTemperature => new(_haContext, "sensor.home_realfeel_temperature");
    ///<summary>Home RealFeel temperature max day 1</summary>
    public NumericSensorEntity HomeRealfeelTemperatureMaxDay1 => new(_haContext, "sensor.home_realfeel_temperature_max_day_1");
    ///<summary>Home RealFeel temperature max day 2</summary>
    public NumericSensorEntity HomeRealfeelTemperatureMaxDay2 => new(_haContext, "sensor.home_realfeel_temperature_max_day_2");
    ///<summary>Home RealFeel temperature max day 3</summary>
    public NumericSensorEntity HomeRealfeelTemperatureMaxDay3 => new(_haContext, "sensor.home_realfeel_temperature_max_day_3");
    ///<summary>Home RealFeel temperature max day 4</summary>
    public NumericSensorEntity HomeRealfeelTemperatureMaxDay4 => new(_haContext, "sensor.home_realfeel_temperature_max_day_4");
    ///<summary>Home RealFeel temperature max day 0</summary>
    public NumericSensorEntity HomeRealfeelTemperatureMaxToday => new(_haContext, "sensor.home_realfeel_temperature_max_today");
    ///<summary>Home RealFeel temperature min day 1</summary>
    public NumericSensorEntity HomeRealfeelTemperatureMinDay1 => new(_haContext, "sensor.home_realfeel_temperature_min_day_1");
    ///<summary>Home RealFeel temperature min day 2</summary>
    public NumericSensorEntity HomeRealfeelTemperatureMinDay2 => new(_haContext, "sensor.home_realfeel_temperature_min_day_2");
    ///<summary>Home RealFeel temperature min day 3</summary>
    public NumericSensorEntity HomeRealfeelTemperatureMinDay3 => new(_haContext, "sensor.home_realfeel_temperature_min_day_3");
    ///<summary>Home RealFeel temperature min day 4</summary>
    public NumericSensorEntity HomeRealfeelTemperatureMinDay4 => new(_haContext, "sensor.home_realfeel_temperature_min_day_4");
    ///<summary>Home RealFeel temperature min day 0</summary>
    public NumericSensorEntity HomeRealfeelTemperatureMinToday => new(_haContext, "sensor.home_realfeel_temperature_min_today");
    ///<summary>Home Thunderstorm probability day 1</summary>
    public NumericSensorEntity HomeThunderstormProbabilityDay1 => new(_haContext, "sensor.home_thunderstorm_probability_day_1");
    ///<summary>Home Thunderstorm probability day 2</summary>
    public NumericSensorEntity HomeThunderstormProbabilityDay2 => new(_haContext, "sensor.home_thunderstorm_probability_day_2");
    ///<summary>Home Thunderstorm probability day 3</summary>
    public NumericSensorEntity HomeThunderstormProbabilityDay3 => new(_haContext, "sensor.home_thunderstorm_probability_day_3");
    ///<summary>Home Thunderstorm probability day 4</summary>
    public NumericSensorEntity HomeThunderstormProbabilityDay4 => new(_haContext, "sensor.home_thunderstorm_probability_day_4");
    ///<summary>Home Thunderstorm probability night 1</summary>
    public NumericSensorEntity HomeThunderstormProbabilityNight1 => new(_haContext, "sensor.home_thunderstorm_probability_night_1");
    ///<summary>Home Thunderstorm probability night 2</summary>
    public NumericSensorEntity HomeThunderstormProbabilityNight2 => new(_haContext, "sensor.home_thunderstorm_probability_night_2");
    ///<summary>Home Thunderstorm probability night 3</summary>
    public NumericSensorEntity HomeThunderstormProbabilityNight3 => new(_haContext, "sensor.home_thunderstorm_probability_night_3");
    ///<summary>Home Thunderstorm probability night 4</summary>
    public NumericSensorEntity HomeThunderstormProbabilityNight4 => new(_haContext, "sensor.home_thunderstorm_probability_night_4");
    ///<summary>Home Thunderstorm probability day 0</summary>
    public NumericSensorEntity HomeThunderstormProbabilityToday => new(_haContext, "sensor.home_thunderstorm_probability_today");
    ///<summary>Home Thunderstorm probability night 0</summary>
    public NumericSensorEntity HomeThunderstormProbabilityTonight => new(_haContext, "sensor.home_thunderstorm_probability_tonight");
    ///<summary>Home UV index</summary>
    public NumericSensorEntity HomeUvIndex => new(_haContext, "sensor.home_uv_index");
    ///<summary>Home UV index day 1</summary>
    public NumericSensorEntity HomeUvIndexDay1 => new(_haContext, "sensor.home_uv_index_day_1");
    ///<summary>Home UV index day 2</summary>
    public NumericSensorEntity HomeUvIndexDay2 => new(_haContext, "sensor.home_uv_index_day_2");
    ///<summary>Home UV index day 3</summary>
    public NumericSensorEntity HomeUvIndexDay3 => new(_haContext, "sensor.home_uv_index_day_3");
    ///<summary>Home UV index day 4</summary>
    public NumericSensorEntity HomeUvIndexDay4 => new(_haContext, "sensor.home_uv_index_day_4");
    ///<summary>Home UV index day 0</summary>
    public NumericSensorEntity HomeUvIndexToday => new(_haContext, "sensor.home_uv_index_today");
    ///<summary>Home Wind speed</summary>
    public NumericSensorEntity HomeWind => new(_haContext, "sensor.home_wind");
    ///<summary>Home Wind speed day 1</summary>
    public NumericSensorEntity HomeWindSpeedDay1 => new(_haContext, "sensor.home_wind_speed_day_1");
    ///<summary>Home Wind speed day 2</summary>
    public NumericSensorEntity HomeWindSpeedDay2 => new(_haContext, "sensor.home_wind_speed_day_2");
    ///<summary>Home Wind speed day 3</summary>
    public NumericSensorEntity HomeWindSpeedDay3 => new(_haContext, "sensor.home_wind_speed_day_3");
    ///<summary>Home Wind speed day 4</summary>
    public NumericSensorEntity HomeWindSpeedDay4 => new(_haContext, "sensor.home_wind_speed_day_4");
    ///<summary>Home Wind speed night 1</summary>
    public NumericSensorEntity HomeWindSpeedNight1 => new(_haContext, "sensor.home_wind_speed_night_1");
    ///<summary>Home Wind speed night 2</summary>
    public NumericSensorEntity HomeWindSpeedNight2 => new(_haContext, "sensor.home_wind_speed_night_2");
    ///<summary>Home Wind speed night 3</summary>
    public NumericSensorEntity HomeWindSpeedNight3 => new(_haContext, "sensor.home_wind_speed_night_3");
    ///<summary>Home Wind speed night 4</summary>
    public NumericSensorEntity HomeWindSpeedNight4 => new(_haContext, "sensor.home_wind_speed_night_4");
    ///<summary>Home Wind speed day 0</summary>
    public NumericSensorEntity HomeWindSpeedToday => new(_haContext, "sensor.home_wind_speed_today");
    ///<summary>Home Wind speed night 0</summary>
    public NumericSensorEntity HomeWindSpeedTonight => new(_haContext, "sensor.home_wind_speed_tonight");
    ///<summary>Hydration</summary>
    public NumericSensorEntity Hydration => new(_haContext, "sensor.hydration");
    ///<summary>IMAP (Info@krugerwebsolutions.co.za ) Messages</summary>
    public NumericSensorEntity ImapInfoKrugerwebsolutionsCoZa => new(_haContext, "sensor.imap_info_krugerwebsolutions_co_za");
    ///<summary>Internet Gateway Device Download speed</summary>
    public NumericSensorEntity InternetGatewayDeviceKibSReceived => new(_haContext, "sensor.internet_gateway_device_kib_s_received");
    ///<summary>Internet Gateway Device Upload speed</summary>
    public NumericSensorEntity InternetGatewayDeviceKibSSent => new(_haContext, "sensor.internet_gateway_device_kib_s_sent");
    ///<summary>Kaelyn S10 Active notification count</summary>
    public NumericSensorEntity KaelynS10ActiveNotificationCount => new(_haContext, "sensor.kaelyn_s10_active_notification_count");
    ///<summary>Kaelyn S10 App memory</summary>
    public NumericSensorEntity KaelynS10AppMemory => new(_haContext, "sensor.kaelyn_s10_app_memory");
    ///<summary>Kaelyn S10 App Rx GB</summary>
    public NumericSensorEntity KaelynS10AppRxGb => new(_haContext, "sensor.kaelyn_s10_app_rx_gb");
    ///<summary>Kaelyn S10 App Tx GB</summary>
    public NumericSensorEntity KaelynS10AppTxGb => new(_haContext, "sensor.kaelyn_s10_app_tx_gb");
    ///<summary>Kaelyn S10 Battery level</summary>
    public NumericSensorEntity KaelynS10BatteryLevel => new(_haContext, "sensor.kaelyn_s10_battery_level");
    ///<summary>Kaelyn S10 Battery temperature</summary>
    public NumericSensorEntity KaelynS10BatteryTemperature => new(_haContext, "sensor.kaelyn_s10_battery_temperature");
    ///<summary>Kaelyn S10 Bluetooth connection</summary>
    public NumericSensorEntity KaelynS10BluetoothConnection => new(_haContext, "sensor.kaelyn_s10_bluetooth_connection");
    ///<summary>Kaelyn S10 Light sensor</summary>
    public NumericSensorEntity KaelynS10LightSensor => new(_haContext, "sensor.kaelyn_s10_light_sensor");
    ///<summary>Kaelyn S10 Pressure sensor</summary>
    public NumericSensorEntity KaelynS10PressureSensor => new(_haContext, "sensor.kaelyn_s10_pressure_sensor");
    ///<summary>Kaelyn S10 Sleep confidence</summary>
    public NumericSensorEntity KaelynS10SleepConfidence => new(_haContext, "sensor.kaelyn_s10_sleep_confidence");
    ///<summary>Kaelyn S10 Sleep segment</summary>
    public NumericSensorEntity KaelynS10SleepSegment => new(_haContext, "sensor.kaelyn_s10_sleep_segment");
    ///<summary>Kaelyn S10 Steps sensor</summary>
    public NumericSensorEntity KaelynS10StepsSensor => new(_haContext, "sensor.kaelyn_s10_steps_sensor");
    ///<summary>Kaelyn S10 Total Rx GB</summary>
    public NumericSensorEntity KaelynS10TotalRxGb => new(_haContext, "sensor.kaelyn_s10_total_rx_gb");
    ///<summary>Kaelyn S10 Total Tx GB</summary>
    public NumericSensorEntity KaelynS10TotalTxGb => new(_haContext, "sensor.kaelyn_s10_total_tx_gb");
    ///<summary>Kaelyn S10 WiFi frequency</summary>
    public NumericSensorEntity KaelynS10WifiFrequency => new(_haContext, "sensor.kaelyn_s10_wifi_frequency");
    ///<summary>Kaelyn S10 WiFi link speed</summary>
    public NumericSensorEntity KaelynS10WifiLinkSpeed => new(_haContext, "sensor.kaelyn_s10_wifi_link_speed");
    ///<summary>Kaelyn S10 WiFi signal strength</summary>
    public NumericSensorEntity KaelynS10WifiSignalStrength => new(_haContext, "sensor.kaelyn_s10_wifi_signal_strength");
    ///<summary>KWS-ONE_battery Charge Remaining Percentage</summary>
    public NumericSensorEntity KwsOneKwsOneBatteryChargeRemainingPercentage => new(_haContext, "sensor.kws_one_kws_one_battery_charge_remaining_percentage");
    ///<summary>KWS-ONE_cpuload</summary>
    public NumericSensorEntity KwsOneKwsOneCpuload => new(_haContext, "sensor.kws_one_kws_one_cpuload");
    ///<summary>KWS-ONE_memoryusage</summary>
    public NumericSensorEntity KwsOneKwsOneMemoryusage => new(_haContext, "sensor.kws_one_kws_one_memoryusage");
    ///<summary>Light Sleep</summary>
    public NumericSensorEntity LightSleep => new(_haContext, "sensor.light_sleep");
    ///<summary>System Monitor Memory free</summary>
    public NumericSensorEntity MemoryFree => new(_haContext, "sensor.memory_free");
    ///<summary>System Monitor Memory use</summary>
    public NumericSensorEntity MemoryUse => new(_haContext, "sensor.memory_use");
    ///<summary>System Monitor Memory usage</summary>
    public NumericSensorEntity MemoryUsePercent => new(_haContext, "sensor.memory_use_percent");
    ///<summary>Network in eth0</summary>
    public NumericSensorEntity NetworkInEth0 => new(_haContext, "sensor.network_in_eth0");
    ///<summary>Network out eth0</summary>
    public NumericSensorEntity NetworkOutEth0 => new(_haContext, "sensor.network_out_eth0");
    ///<summary>Network throughput in eth0</summary>
    public NumericSensorEntity NetworkThroughputInEth0 => new(_haContext, "sensor.network_throughput_in_eth0");
    ///<summary>Network throughput out eth0</summary>
    public NumericSensorEntity NetworkThroughputOutEth0 => new(_haContext, "sensor.network_throughput_out_eth0");
    ///<summary>Open Exchange Rates USD EUR</summary>
    public NumericSensorEntity OpenExchangeRatesUsdEur => new(_haContext, "sensor.open_exchange_rates_usd_eur");
    ///<summary>Open Exchange Rates USD ZAR</summary>
    public NumericSensorEntity OpenExchangeRatesUsdZar => new(_haContext, "sensor.open_exchange_rates_usd_zar");
    ///<summary>Oxygen Saturation</summary>
    public NumericSensorEntity OxygenSaturation => new(_haContext, "sensor.oxygen_saturation");
    ///<summary>Plant Sensor With Display Corner Garden Battery Level</summary>
    public NumericSensorEntity PlantSensorWithDisplayCornerGardenBatteryLevel => new(_haContext, "sensor.plant_sensor_with_display_corner_garden_battery_level");
    ///<summary>Corner Garden Battery Level</summary>
    public NumericSensorEntity PlantSensorWithDisplayCornerGardenBatteryLevel2 => new(_haContext, "sensor.plant_sensor_with_display_corner_garden_battery_level_2");
    ///<summary>Plant Sensor With Display Corner Garden Illuminance</summary>
    public NumericSensorEntity PlantSensorWithDisplayCornerGardenIlluminance => new(_haContext, "sensor.plant_sensor_with_display_corner_garden_illuminance");
    ///<summary>Corner Garden Illuminance</summary>
    public NumericSensorEntity PlantSensorWithDisplayCornerGardenIlluminance2 => new(_haContext, "sensor.plant_sensor_with_display_corner_garden_illuminance_2");
    ///<summary>Plant Sensor With Display Corner Garden Moisture</summary>
    public NumericSensorEntity PlantSensorWithDisplayCornerGardenMoisture => new(_haContext, "sensor.plant_sensor_with_display_corner_garden_moisture");
    ///<summary>Corner Garden Moisture</summary>
    public NumericSensorEntity PlantSensorWithDisplayCornerGardenMoisture2 => new(_haContext, "sensor.plant_sensor_with_display_corner_garden_moisture_2");
    ///<summary>Plant Sensor With Display Corner Garden Soil Conductivity</summary>
    public NumericSensorEntity PlantSensorWithDisplayCornerGardenSoilConductivity => new(_haContext, "sensor.plant_sensor_with_display_corner_garden_soil_conductivity");
    ///<summary>Corner Garden Soil Conductivity</summary>
    public NumericSensorEntity PlantSensorWithDisplayCornerGardenSoilConductivity2 => new(_haContext, "sensor.plant_sensor_with_display_corner_garden_soil_conductivity_2");
    ///<summary>Plant Sensor With Display Corner Garden Temperature</summary>
    public NumericSensorEntity PlantSensorWithDisplayCornerGardenTemperature => new(_haContext, "sensor.plant_sensor_with_display_corner_garden_temperature");
    ///<summary>Corner Garden Temperature</summary>
    public NumericSensorEntity PlantSensorWithDisplayCornerGardenTemperature2 => new(_haContext, "sensor.plant_sensor_with_display_corner_garden_temperature_2");
    ///<summary>Plant Sensor With Display Plant Sensor Humidity</summary>
    public NumericSensorEntity PlantSensorWithDisplayPlantSensorHumidity => new(_haContext, "sensor.plant_sensor_with_display_plant_sensor_humidity");
    ///<summary>Plant Sensor With Display Plant Sensor Temperature</summary>
    public NumericSensorEntity PlantSensorWithDisplayPlantSensorTemperature => new(_haContext, "sensor.plant_sensor_with_display_plant_sensor_temperature");
    ///<summary>plantsensor WiFi Signal Sensor</summary>
    public NumericSensorEntity PlantSensorWithDisplayPlantsensorWifiSignalSensor => new(_haContext, "sensor.plant_sensor_with_display_plantsensor_wifi_signal_sensor");
    ///<summary>Plant Sensor With Display plantsensor WiFi Signal Sensor</summary>
    public NumericSensorEntity PlantSensorWithDisplayPlantsensorWifiSignalSensor2 => new(_haContext, "sensor.plant_sensor_with_display_plantsensor_wifi_signal_sensor_2");
    ///<summary>Plant Sensor With Display Tent Battery Level</summary>
    public NumericSensorEntity PlantSensorWithDisplayTentBatteryLevel => new(_haContext, "sensor.plant_sensor_with_display_tent_battery_level");
    ///<summary>Tent Battery Level</summary>
    public NumericSensorEntity PlantSensorWithDisplayTentBatteryLevel2 => new(_haContext, "sensor.plant_sensor_with_display_tent_battery_level_2");
    ///<summary>Plant Sensor With Display Tent Illuminance</summary>
    public NumericSensorEntity PlantSensorWithDisplayTentIlluminance => new(_haContext, "sensor.plant_sensor_with_display_tent_illuminance");
    ///<summary>Tent Illuminance</summary>
    public NumericSensorEntity PlantSensorWithDisplayTentIlluminance2 => new(_haContext, "sensor.plant_sensor_with_display_tent_illuminance_2");
    ///<summary>Plant Sensor With Display Tent Moisture</summary>
    public NumericSensorEntity PlantSensorWithDisplayTentMoisture => new(_haContext, "sensor.plant_sensor_with_display_tent_moisture");
    ///<summary>Tent Moisture</summary>
    public NumericSensorEntity PlantSensorWithDisplayTentMoisture2 => new(_haContext, "sensor.plant_sensor_with_display_tent_moisture_2");
    ///<summary>Plant Sensor With Display Tent Soil Conductivity</summary>
    public NumericSensorEntity PlantSensorWithDisplayTentSoilConductivity => new(_haContext, "sensor.plant_sensor_with_display_tent_soil_conductivity");
    ///<summary>Tent Soil Conductivity</summary>
    public NumericSensorEntity PlantSensorWithDisplayTentSoilConductivity2 => new(_haContext, "sensor.plant_sensor_with_display_tent_soil_conductivity_2");
    ///<summary>Plant Sensor With Display Tent Temperature</summary>
    public NumericSensorEntity PlantSensorWithDisplayTentTemperature => new(_haContext, "sensor.plant_sensor_with_display_tent_temperature");
    ///<summary>Tent Temperature</summary>
    public NumericSensorEntity PlantSensorWithDisplayTentTemperature2 => new(_haContext, "sensor.plant_sensor_with_display_tent_temperature_2");
    ///<summary>Portable AC Mode (Numeric)</summary>
    public NumericSensorEntity PortableAcModeNumeric => new(_haContext, "sensor.portable_ac_mode_numeric");
    ///<summary>Portable air conditioner Daily energy consumption</summary>
    public NumericSensorEntity PortableAirConditionerDailyEnergyConsumption => new(_haContext, "sensor.portable_air_conditioner_daily_energy_consumption");
    ///<summary>System Monitor Processor temperature</summary>
    public NumericSensorEntity ProcessorTemperature => new(_haContext, "sensor.processor_temperature");
    ///<summary>System Monitor Processor use</summary>
    public NumericSensorEntity ProcessorUse => new(_haContext, "sensor.processor_use");
    ///<summary>Pulse Counter</summary>
    public NumericSensorEntity PulseCounter => new(_haContext, "sensor.pulse_counter");
    ///<summary>Active torrents</summary>
    public NumericSensorEntity QbittorrentActiveTorrents => new(_haContext, "sensor.qbittorrent_active_torrents");
    ///<summary>All torrents</summary>
    public NumericSensorEntity QbittorrentAllTorrents => new(_haContext, "sensor.qbittorrent_all_torrents");
    ///<summary>Download speed</summary>
    public NumericSensorEntity QbittorrentDownloadSpeed => new(_haContext, "sensor.qbittorrent_download_speed");
    ///<summary>Inactive torrents</summary>
    public NumericSensorEntity QbittorrentInactiveTorrents => new(_haContext, "sensor.qbittorrent_inactive_torrents");
    ///<summary>Paused torrents</summary>
    public NumericSensorEntity QbittorrentPausedTorrents => new(_haContext, "sensor.qbittorrent_paused_torrents");
    ///<summary>Upload speed</summary>
    public NumericSensorEntity QbittorrentUploadSpeed => new(_haContext, "sensor.qbittorrent_upload_speed");
    ///<summary>REM Sleep</summary>
    public NumericSensorEntity RemSleep => new(_haContext, "sensor.rem_sleep");
    ///<summary>Resting Heart Rate</summary>
    public NumericSensorEntity RestingHeartRate => new(_haContext, "sensor.resting_heart_rate");
    ///<summary>Sleep</summary>
    public NumericSensorEntity Sleep => new(_haContext, "sensor.sleep");
    ///<summary>SM-S901E Battery level</summary>
    public NumericSensorEntity SmS901eBatteryLevel => new(_haContext, "sensor.sm_s901e_battery_level");
    ///<summary>SM-S901E Battery power</summary>
    public NumericSensorEntity SmS901eBatteryPower => new(_haContext, "sensor.sm_s901e_battery_power");
    ///<summary>SM-S901E Battery temperature</summary>
    public NumericSensorEntity SmS901eBatteryTemperature => new(_haContext, "sensor.sm_s901e_battery_temperature");
    ///<summary>SM-S901E Light sensor</summary>
    public NumericSensorEntity SmS901eLightSensor => new(_haContext, "sensor.sm_s901e_light_sensor");
    ///<summary>SM-S901E Mobile Rx GB</summary>
    public NumericSensorEntity SmS901eMobileRxGb => new(_haContext, "sensor.sm_s901e_mobile_rx_gb");
    ///<summary>SM-S901E Mobile Tx GB</summary>
    public NumericSensorEntity SmS901eMobileTxGb => new(_haContext, "sensor.sm_s901e_mobile_tx_gb");
    ///<summary>SM-S901E Pressure sensor</summary>
    public NumericSensorEntity SmS901ePressureSensor => new(_haContext, "sensor.sm_s901e_pressure_sensor");
    ///<summary>SM-S901E Sleep confidence</summary>
    public NumericSensorEntity SmS901eSleepConfidence => new(_haContext, "sensor.sm_s901e_sleep_confidence");
    ///<summary>SM-S901E Steps sensor</summary>
    public NumericSensorEntity SmS901eStepsSensor => new(_haContext, "sensor.sm_s901e_steps_sensor");
    ///<summary>SM-S901E Total Rx GB</summary>
    public NumericSensorEntity SmS901eTotalRxGb => new(_haContext, "sensor.sm_s901e_total_rx_gb");
    ///<summary>SM-S901E Total Tx GB</summary>
    public NumericSensorEntity SmS901eTotalTxGb => new(_haContext, "sensor.sm_s901e_total_tx_gb");
    ///<summary>SM-S901E WiFi signal strength</summary>
    public NumericSensorEntity SmS901eWifiSignalStrength => new(_haContext, "sensor.sm_s901e_wifi_signal_strength");
    ///<summary>Garage  Current</summary>
    public NumericSensorEntity Sonoff1001d94b39Current => new(_haContext, "sensor.sonoff_1001d94b39_current");
    ///<summary>Garage  Power</summary>
    public NumericSensorEntity Sonoff1001d94b39Power => new(_haContext, "sensor.sonoff_1001d94b39_power");
    ///<summary>Garage  Voltage</summary>
    public NumericSensorEntity Sonoff1001d94b39Voltage => new(_haContext, "sensor.sonoff_1001d94b39_voltage");
    ///<summary>SpeedTest Download</summary>
    public NumericSensorEntity SpeedtestDownload => new(_haContext, "sensor.speedtest_download");
    ///<summary>SpeedTest Ping</summary>
    public NumericSensorEntity SpeedtestPing => new(_haContext, "sensor.speedtest_ping");
    ///<summary>SpeedTest Upload</summary>
    public NumericSensorEntity SpeedtestUpload => new(_haContext, "sensor.speedtest_upload");
    ///<summary>System Monitor Swap free</summary>
    public NumericSensorEntity SwapFree => new(_haContext, "sensor.swap_free");
    ///<summary>System Monitor Swap use</summary>
    public NumericSensorEntity SwapUse => new(_haContext, "sensor.swap_use");
    ///<summary>System Monitor Swap usage</summary>
    public NumericSensorEntity SwapUsePercent => new(_haContext, "sensor.swap_use_percent");
    ///<summary>Testing Power</summary>
    public NumericSensorEntity TestingPower => new(_haContext, "sensor.testing_power");
    ///<summary>Trade volume</summary>
    public NumericSensorEntity TradeVolume => new(_haContext, "sensor.trade_volume");
    ///<summary>Box Battery Level</summary>
    public NumericSensorEntity WaterPumpBoxBatteryLevel => new(_haContext, "sensor.water_pump_box_battery_level");
    ///<summary>Box Illuminance</summary>
    public NumericSensorEntity WaterPumpBoxIlluminance => new(_haContext, "sensor.water_pump_box_illuminance");
    ///<summary>Box Moisture</summary>
    public NumericSensorEntity WaterPumpBoxMoisture => new(_haContext, "sensor.water_pump_box_moisture");
    ///<summary>Box Soil Conductivity</summary>
    public NumericSensorEntity WaterPumpBoxSoilConductivity => new(_haContext, "sensor.water_pump_box_soil_conductivity");
    ///<summary>Box Temperature</summary>
    public NumericSensorEntity WaterPumpBoxTemperature => new(_haContext, "sensor.water_pump_box_temperature");
    ///<summary>Pulse Counter</summary>
    public NumericSensorEntity WaterPumpPulseCounter => new(_haContext, "sensor.water_pump_pulse_counter");
    ///<summary>water-pump WiFi Signal Sensor</summary>
    public NumericSensorEntity WaterPumpWifiSignalSensor => new(_haContext, "sensor.water_pump_wifi_signal_sensor");
    ///<summary>WiFi Signal Sensor</summary>
    public NumericSensorEntity WaterPumpWifiSignalSensor2 => new(_haContext, "sensor.water_pump_wifi_signal_sensor_2");
    ///<summary>Weight</summary>
    public NumericSensorEntity Weight => new(_haContext, "sensor.weight");
}

public partial class SunEntities
{
    private readonly IHaContext _haContext;
    public SunEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all sun entities currently registered (at runtime) in Home Assistant as SunEntity</summary>
    public IEnumerable<SunEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("sun.")).Select(e => new SunEntity(e));
    ///<summary>Sun</summary>
    public SunEntity Sun => new(_haContext, "sun.sun");
}

public partial class SwitchEntities
{
    private readonly IHaContext _haContext;
    public SwitchEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all switch entities currently registered (at runtime) in Home Assistant as SwitchEntity</summary>
    public IEnumerable<SwitchEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("switch.")).Select(e => new SwitchEntity(e));
    ///<summary>Boorgat Socket 1</summary>
    public SwitchEntity BoorgatSocket1 => new(_haContext, "switch.boorgat_socket_1");
    ///<summary>Geyser  Socket 1</summary>
    public SwitchEntity GeyserSocket1 => new(_haContext, "switch.geyser_socket_1");
    ///<summary>Henzard Kruger Rest in the inn</summary>
    public SwitchEntity HenzardKrugerRestInTheInn => new(_haContext, "switch.henzard_kruger_rest_in_the_inn");
    ///<summary>Not Used</summary>
    public SwitchEntity NotUsed => new(_haContext, "switch.not_used");
    ///<summary>PlantSensor Restart</summary>
    public SwitchEntity PlantSensorWithDisplayPlantsensorRestart => new(_haContext, "switch.plant_sensor_with_display_plantsensor_restart");
    ///<summary>Plant Sensor With Display PlantSensor Restart</summary>
    public SwitchEntity PlantSensorWithDisplayPlantsensorRestart2 => new(_haContext, "switch.plant_sensor_with_display_plantsensor_restart_2");
    ///<summary>Portable air conditioner Eco</summary>
    public SwitchEntity PortableAirConditionerEco => new(_haContext, "switch.portable_air_conditioner_eco");
    ///<summary>Portable air conditioner Fan mute</summary>
    public SwitchEntity PortableAirConditionerFanMute => new(_haContext, "switch.portable_air_conditioner_fan_mute");
    ///<summary>Portable air conditioner Super</summary>
    public SwitchEntity PortableAirConditionerSuper => new(_haContext, "switch.portable_air_conditioner_super");
    ///<summary>Alternative speed</summary>
    public SwitchEntity QbittorrentAlternativeSpeed => new(_haContext, "switch.qbittorrent_alternative_speed");
    ///<summary>Scale Switch</summary>
    public SwitchEntity ScaleSwitch => new(_haContext, "switch.scale_switch");
    ///<summary>Garage </summary>
    public SwitchEntity Sonoff1001d94b39 => new(_haContext, "switch.sonoff_1001d94b39");
    ///<summary>Living room Fan</summary>
    public SwitchEntity Sonoff1001eaf3581 => new(_haContext, "switch.sonoff_1001eaf358_1");
    ///<summary>Garage Door</summary>
    public SwitchEntity Sonoff1002025af61 => new(_haContext, "switch.sonoff_1002025af6_1");
    ///<summary>Hek</summary>
    public SwitchEntity Sonoff1002025b001 => new(_haContext, "switch.sonoff_1002025b00_1");
    ///<summary>switch test</summary>
    public SwitchEntity SwitchTest => new(_haContext, "switch.switch_test");
    ///<summary>Water Pump</summary>
    public SwitchEntity WaterPump => new(_haContext, "switch.water_pump");
    ///<summary>Not Used</summary>
    public SwitchEntity WaterPumpNotUsed => new(_haContext, "switch.water_pump_not_used");
    ///<summary>Water Pump</summary>
    public SwitchEntity WaterPumpWaterPump => new(_haContext, "switch.water_pump_water_pump");
}

public partial class TagEntities
{
    private readonly IHaContext _haContext;
    public TagEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all tag entities currently registered (at runtime) in Home Assistant as TagEntity</summary>
    public IEnumerable<TagEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("tag.")).Select(e => new TagEntity(e));
    ///<summary>Blue Tag</summary>
    public TagEntity BlueTag => new(_haContext, "tag.blue_tag");
    ///<summary>Henzard Mobi</summary>
    public TagEntity HenzardMobi => new(_haContext, "tag.henzard_mobi");
    ///<summary>Round Blue</summary>
    public TagEntity RoundBlue => new(_haContext, "tag.round_blue");
    ///<summary>Stephan Mobi</summary>
    public TagEntity StephanMobi => new(_haContext, "tag.stephan_mobi");
    ///<summary>White Card</summary>
    public TagEntity WhiteCard => new(_haContext, "tag.white_card");
}

public partial class TimerEntities
{
    private readonly IHaContext _haContext;
    public TimerEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all timer entities currently registered (at runtime) in Home Assistant as TimerEntity</summary>
    public IEnumerable<TimerEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("timer.")).Select(e => new TimerEntity(e));
    ///<summary>Water Plants</summary>
    public TimerEntity WaterPlants => new(_haContext, "timer.water_plants");
}

public partial class TodoEntities
{
    private readonly IHaContext _haContext;
    public TodoEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all todo entities currently registered (at runtime) in Home Assistant as TodoEntity</summary>
    public IEnumerable<TodoEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("todo.")).Select(e => new TodoEntity(e));
    ///<summary>Henzard Kruger Dailies</summary>
    public TodoEntity HenzardKrugerDailies => new(_haContext, "todo.henzard_kruger_dailies");
    ///<summary>Henzard Kruger To-Do&apos;s</summary>
    public TodoEntity HenzardKrugerToDoS => new(_haContext, "todo.henzard_kruger_to_do_s");
}

public partial class UpdateEntities
{
    private readonly IHaContext _haContext;
    public UpdateEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all update entities currently registered (at runtime) in Home Assistant as UpdateEntity</summary>
    public IEnumerable<UpdateEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("update.")).Select(e => new UpdateEntity(e));
    ///<summary>Apache2 Update</summary>
    public UpdateEntity Apache2Update => new(_haContext, "update.apache2_update");
    ///<summary>auto-entities update</summary>
    public UpdateEntity AutoEntitiesUpdate => new(_haContext, "update.auto_entities_update");
    ///<summary>chrony Update</summary>
    public UpdateEntity ChronyUpdate => new(_haContext, "update.chrony_update");
    ///<summary>Connectlife API proxy &amp; MQTT Add-on Update</summary>
    public UpdateEntity ConnectlifeApiProxyMqttAddOnUpdate => new(_haContext, "update.connectlife_api_proxy_mqtt_add_on_update");
    ///<summary>ConnectLife update</summary>
    public UpdateEntity ConnectlifeUpdate => new(_haContext, "update.connectlife_update");
    ///<summary>Firmware</summary>
    public UpdateEntity EspCam01Firmware => new(_haContext, "update.esp_cam01_firmware");
    ///<summary>Esp-Cam02 Firmware</summary>
    public UpdateEntity EspCam02Firmware => new(_haContext, "update.esp_cam02_firmware");
    ///<summary>Firmware</summary>
    public UpdateEntity Esp32HumidityAndTempFirmware => new(_haContext, "update.esp32_humidity_and_temp_firmware");
    ///<summary>ESPHome Device Builder Update</summary>
    public UpdateEntity EsphomeUpdate => new(_haContext, "update.esphome_update");
    ///<summary>Google Fit update</summary>
    public UpdateEntity GoogleFitUpdate => new(_haContext, "update.google_fit_update");
    ///<summary>Grafana Update</summary>
    public UpdateEntity GrafanaUpdate => new(_haContext, "update.grafana_update");
    ///<summary>HACS update</summary>
    public UpdateEntity HacsUpdate => new(_haContext, "update.hacs_update");
    ///<summary>HASS.Agent update</summary>
    public UpdateEntity HassAgentUpdate => new(_haContext, "update.hass_agent_update");
    ///<summary>Home Assistant Core Update</summary>
    public UpdateEntity HomeAssistantCoreUpdate => new(_haContext, "update.home_assistant_core_update");
    ///<summary>Home Assistant Google Drive Backup Update</summary>
    public UpdateEntity HomeAssistantGoogleDriveBackupUpdate => new(_haContext, "update.home_assistant_google_drive_backup_update");
    ///<summary>Home Assistant Operating System Update</summary>
    public UpdateEntity HomeAssistantOperatingSystemUpdate => new(_haContext, "update.home_assistant_operating_system_update");
    ///<summary>Home Assistant Supervisor Update</summary>
    public UpdateEntity HomeAssistantSupervisorUpdate => new(_haContext, "update.home_assistant_supervisor_update");
    ///<summary>InfluxDB Update</summary>
    public UpdateEntity InfluxdbUpdate => new(_haContext, "update.influxdb_update");
    ///<summary>iOS Themes - Dark Mode and Light Mode update</summary>
    public UpdateEntity IosThemesDarkModeAndLightModeUpdate => new(_haContext, "update.ios_themes_dark_mode_and_light_mode_update");
    ///<summary>Lunar Phase update</summary>
    public UpdateEntity LunarPhaseUpdate => new(_haContext, "update.lunar_phase_update");
    ///<summary>Microsoft Graph update</summary>
    public UpdateEntity MicrosoftGraphUpdate => new(_haContext, "update.microsoft_graph_update");
    ///<summary>mini-graph-card update</summary>
    public UpdateEntity MiniGraphCardUpdate => new(_haContext, "update.mini_graph_card_update");
    ///<summary>Mosquitto broker Update</summary>
    public UpdateEntity MosquittoBrokerUpdate => new(_haContext, "update.mosquitto_broker_update");
    ///<summary>motionEye Update</summary>
    public UpdateEntity MotioneyeUpdate => new(_haContext, "update.motioneye_update");
    ///<summary>NetDaemon update</summary>
    public UpdateEntity NetdaemonUpdate => new(_haContext, "update.netdaemon_update");
    ///<summary>NetDaemon V3 - beta Update</summary>
    public UpdateEntity NetdaemonV3BetaUpdate => new(_haContext, "update.netdaemon_v3_beta_update");
    ///<summary>Node-RED Update</summary>
    public UpdateEntity NodeRedUpdate => new(_haContext, "update.node_red_update");
    ///<summary>Firmware</summary>
    public UpdateEntity PlantSensorWithDisplayFirmware => new(_haContext, "update.plant_sensor_with_display_firmware");
    ///<summary>Rhasspy Assistant Update</summary>
    public UpdateEntity RhasspyAssistantUpdate => new(_haContext, "update.rhasspy_assistant_update");
    ///<summary>Sleep As Android update</summary>
    public UpdateEntity SleepAsAndroidUpdate => new(_haContext, "update.sleep_as_android_update");
    ///<summary>Sonoff LAN update</summary>
    public UpdateEntity SonoffLanUpdate => new(_haContext, "update.sonoff_lan_update");
    ///<summary>Studio Code Server Update</summary>
    public UpdateEntity StudioCodeServerUpdate => new(_haContext, "update.studio_code_server_update");
    ///<summary>Tag-Reader Firmware</summary>
    public UpdateEntity TagReaderFirmware => new(_haContext, "update.tag_reader_firmware");
    ///<summary>Tailscale Update</summary>
    public UpdateEntity TailscaleUpdate => new(_haContext, "update.tailscale_update");
    ///<summary>Terminal &amp; SSH Update</summary>
    public UpdateEntity TerminalSshUpdate => new(_haContext, "update.terminal_ssh_update");
    ///<summary>Firmware</summary>
    public UpdateEntity WaterPumpFirmware => new(_haContext, "update.water_pump_firmware");
    ///<summary>Firmware</summary>
    public UpdateEntity WeighsoftSerialServerFirmware => new(_haContext, "update.weighsoft_serial_server_firmware");
    ///<summary>Whatsapp Update</summary>
    public UpdateEntity WhatsappUpdate => new(_haContext, "update.whatsapp_update");
}

public partial class WeatherEntities
{
    private readonly IHaContext _haContext;
    public WeatherEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all weather entities currently registered (at runtime) in Home Assistant as WeatherEntity</summary>
    public IEnumerable<WeatherEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("weather.")).Select(e => new WeatherEntity(e));
    ///<summary>Home</summary>
    public WeatherEntity Home => new(_haContext, "weather.home");
    ///<summary>Home</summary>
    public WeatherEntity Home2 => new(_haContext, "weather.home_2");
}

public partial class ZoneEntities
{
    private readonly IHaContext _haContext;
    public ZoneEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all zone entities currently registered (at runtime) in Home Assistant as ZoneEntity</summary>
    public IEnumerable<ZoneEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("zone.")).Select(e => new ZoneEntity(e));
    ///<summary>Garage</summary>
    public ZoneEntity Garage => new(_haContext, "zone.garage");
    ///<summary>Home</summary>
    public ZoneEntity Home => new(_haContext, "zone.home");
    ///<summary>Rhyno</summary>
    public ZoneEntity Rhyno => new(_haContext, "zone.rhyno");
}

public partial record LightEntity : Entity<LightEntity, EntityState<LightAttributes>, LightAttributes>, ILightEntityCore
{
    public LightEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public LightEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record LightAttributes
{
    [JsonPropertyName("supported_color_modes")]
    public IReadOnlyList<string>? SupportedColorModes { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("color_mode")]
    public string? ColorMode { get; init; }

    [JsonPropertyName("min_color_temp_kelvin")]
    public double? MinColorTempKelvin { get; init; }

    [JsonPropertyName("max_color_temp_kelvin")]
    public double? MaxColorTempKelvin { get; init; }

    [JsonPropertyName("min_mireds")]
    public double? MinMireds { get; init; }

    [JsonPropertyName("max_mireds")]
    public double? MaxMireds { get; init; }

    [JsonPropertyName("brightness")]
    public double? Brightness { get; init; }

    [JsonPropertyName("color_temp_kelvin")]
    public double? ColorTempKelvin { get; init; }

    [JsonPropertyName("color_temp")]
    public double? ColorTemp { get; init; }

    [JsonPropertyName("hs_color")]
    public IReadOnlyList<double>? HsColor { get; init; }

    [JsonPropertyName("rgb_color")]
    public IReadOnlyList<double>? RgbColor { get; init; }

    [JsonPropertyName("xy_color")]
    public IReadOnlyList<double>? XyColor { get; init; }

    [JsonPropertyName("entity_id")]
    public IReadOnlyList<string>? EntityId { get; init; }

    [JsonPropertyName("effect_list")]
    public IReadOnlyList<string>? EffectList { get; init; }

    [JsonPropertyName("color")]
    public object? Color { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record MediaPlayerEntity : Entity<MediaPlayerEntity, EntityState<MediaPlayerAttributes>, MediaPlayerAttributes>, IMediaPlayerEntityCore
{
    public MediaPlayerEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public MediaPlayerEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record MediaPlayerAttributes
{
    [JsonPropertyName("app_id")]
    public string? AppId { get; init; }

    [JsonPropertyName("app_name")]
    public string? AppName { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("entity_picture_local")]
    public string? EntityPictureLocal { get; init; }

    [JsonPropertyName("entity_picture")]
    public string? EntityPicture { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("volume_level")]
    public double? VolumeLevel { get; init; }

    [JsonPropertyName("is_volume_muted")]
    public bool? IsVolumeMuted { get; init; }

    [JsonPropertyName("media_content_id")]
    public string? MediaContentId { get; init; }

    [JsonPropertyName("media_content_type")]
    public string? MediaContentType { get; init; }

    [JsonPropertyName("media_duration")]
    public double? MediaDuration { get; init; }

    [JsonPropertyName("media_position")]
    public double? MediaPosition { get; init; }

    [JsonPropertyName("media_position_updated_at")]
    public string? MediaPositionUpdatedAt { get; init; }

    [JsonPropertyName("media_title")]
    public string? MediaTitle { get; init; }

    [JsonPropertyName("media_album_name")]
    public string? MediaAlbumName { get; init; }

    [JsonPropertyName("media_image_url")]
    public string? MediaImageUrl { get; init; }

    [JsonPropertyName("media_artist")]
    public string? MediaArtist { get; init; }

    [JsonPropertyName("sound_mode_list")]
    public IReadOnlyList<string>? SoundModeList { get; init; }

    [JsonPropertyName("media_track")]
    public object? MediaTrack { get; init; }

    [JsonPropertyName("shuffle")]
    public bool? Shuffle { get; init; }

    [JsonPropertyName("repeat")]
    public string? Repeat { get; init; }

    [JsonPropertyName("source_list")]
    public IReadOnlyList<string>? SourceList { get; init; }

    [JsonPropertyName("source")]
    public string? Source { get; init; }

    [JsonPropertyName("adb_response")]
    public object? AdbResponse { get; init; }

    [JsonPropertyName("hdmi_input")]
    public object? HdmiInput { get; init; }

    [JsonPropertyName("sound_mode")]
    public string? SoundMode { get; init; }

    [JsonPropertyName("sound_mode_raw")]
    public string? SoundModeRaw { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }
}

public partial record AutomationEntity : Entity<AutomationEntity, EntityState<AutomationAttributes>, AutomationAttributes>, IAutomationEntityCore
{
    public AutomationEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public AutomationEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record AutomationAttributes
{
    [JsonPropertyName("id")]
    public string? Id { get; init; }

    [JsonPropertyName("last_triggered")]
    public string? LastTriggered { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("current")]
    public double? Current { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record BinarySensorEntity : Entity<BinarySensorEntity, EntityState<BinarySensorAttributes>, BinarySensorAttributes>, IBinarySensorEntityCore
{
    public BinarySensorEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public BinarySensorEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record BinarySensorAttributes
{
    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("connection_type")]
    public string? ConnectionType { get; init; }

    [JsonPropertyName("ignoring_battery_optimizations")]
    public bool? IgnoringBatteryOptimizations { get; init; }

    [JsonPropertyName("workdays")]
    public IReadOnlyList<string>? Workdays { get; init; }

    [JsonPropertyName("excludes")]
    public IReadOnlyList<string>? Excludes { get; init; }

    [JsonPropertyName("days_offset")]
    public double? DaysOffset { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record ButtonEntity : Entity<ButtonEntity, EntityState<ButtonAttributes>, ButtonAttributes>, IButtonEntityCore
{
    public ButtonEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ButtonEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record ButtonAttributes
{
    [JsonPropertyName("entity_picture")]
    public string? EntityPicture { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }
}

public partial record CalendarEntity : Entity<CalendarEntity, EntityState<CalendarAttributes>, CalendarAttributes>, ICalendarEntityCore
{
    public CalendarEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public CalendarEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record CalendarAttributes
{
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    [JsonPropertyName("all_day")]
    public bool? AllDay { get; init; }

    [JsonPropertyName("start_time")]
    public string? StartTime { get; init; }

    [JsonPropertyName("end_time")]
    public string? EndTime { get; init; }

    [JsonPropertyName("location")]
    public string? Location { get; init; }

    [JsonPropertyName("description")]
    public string? Description { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("yesterdaily")]
    public object? Yesterdaily { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("offset_reached")]
    public bool? OffsetReached { get; init; }
}

public partial record CameraEntity : Entity<CameraEntity, EntityState<CameraAttributes>, CameraAttributes>, ICameraEntityCore
{
    public CameraEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public CameraEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record CameraAttributes
{
    [JsonPropertyName("access_token")]
    public string? AccessToken { get; init; }

    [JsonPropertyName("entity_picture")]
    public string? EntityPicture { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record ClimateEntity : Entity<ClimateEntity, EntityState<ClimateAttributes>, ClimateAttributes>, IClimateEntityCore
{
    public ClimateEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ClimateEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record ClimateAttributes
{
    [JsonPropertyName("hvac_modes")]
    public IReadOnlyList<string>? HvacModes { get; init; }

    [JsonPropertyName("min_temp")]
    public double? MinTemp { get; init; }

    [JsonPropertyName("max_temp")]
    public double? MaxTemp { get; init; }

    [JsonPropertyName("target_temp_step")]
    public double? TargetTempStep { get; init; }

    [JsonPropertyName("fan_modes")]
    public IReadOnlyList<string>? FanModes { get; init; }

    [JsonPropertyName("swing_modes")]
    public IReadOnlyList<string>? SwingModes { get; init; }

    [JsonPropertyName("current_temperature")]
    public double? CurrentTemperature { get; init; }

    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    [JsonPropertyName("fan_mode")]
    public string? FanMode { get; init; }

    [JsonPropertyName("swing_mode")]
    public string? SwingMode { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record ConversationEntity : Entity<ConversationEntity, EntityState<ConversationAttributes>, ConversationAttributes>
{
    public ConversationEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ConversationEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record ConversationAttributes
{
    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record DeviceTrackerEntity : Entity<DeviceTrackerEntity, EntityState<DeviceTrackerAttributes>, DeviceTrackerAttributes>, IDeviceTrackerEntityCore
{
    public DeviceTrackerEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public DeviceTrackerEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record DeviceTrackerAttributes
{
    [JsonPropertyName("source_type")]
    public string? SourceType { get; init; }

    [JsonPropertyName("latitude")]
    public double? Latitude { get; init; }

    [JsonPropertyName("longitude")]
    public double? Longitude { get; init; }

    [JsonPropertyName("gps_accuracy")]
    public double? GpsAccuracy { get; init; }

    [JsonPropertyName("altitude")]
    public double? Altitude { get; init; }

    [JsonPropertyName("course")]
    public double? Course { get; init; }

    [JsonPropertyName("speed")]
    public double? Speed { get; init; }

    [JsonPropertyName("vertical_accuracy")]
    public double? VerticalAccuracy { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record InputBooleanEntity : Entity<InputBooleanEntity, EntityState<InputBooleanAttributes>, InputBooleanAttributes>, IInputBooleanEntityCore
{
    public InputBooleanEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public InputBooleanEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record InputBooleanAttributes
{
    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record InputButtonEntity : Entity<InputButtonEntity, EntityState<InputButtonAttributes>, InputButtonAttributes>, IInputButtonEntityCore
{
    public InputButtonEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public InputButtonEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record InputButtonAttributes
{
    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record InputNumberEntity : NumericEntity<InputNumberEntity, NumericEntityState<InputNumberAttributes>, InputNumberAttributes>, IInputNumberEntityCore
{
    public InputNumberEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public InputNumberEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record InputNumberAttributes
{
    [JsonPropertyName("initial")]
    public object? Initial { get; init; }

    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("min")]
    public double? Min { get; init; }

    [JsonPropertyName("max")]
    public double? Max { get; init; }

    [JsonPropertyName("step")]
    public double? Step { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record InputTextEntity : Entity<InputTextEntity, EntityState<InputTextAttributes>, InputTextAttributes>, IInputTextEntityCore
{
    public InputTextEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public InputTextEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record InputTextAttributes
{
    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("min")]
    public double? Min { get; init; }

    [JsonPropertyName("max")]
    public double? Max { get; init; }

    [JsonPropertyName("pattern")]
    public string? Pattern { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record PersonEntity : Entity<PersonEntity, EntityState<PersonAttributes>, PersonAttributes>, IPersonEntityCore
{
    public PersonEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public PersonEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record PersonAttributes
{
    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("id")]
    public string? Id { get; init; }

    [JsonPropertyName("device_trackers")]
    public IReadOnlyList<string>? DeviceTrackers { get; init; }

    [JsonPropertyName("latitude")]
    public double? Latitude { get; init; }

    [JsonPropertyName("longitude")]
    public double? Longitude { get; init; }

    [JsonPropertyName("gps_accuracy")]
    public double? GpsAccuracy { get; init; }

    [JsonPropertyName("source")]
    public string? Source { get; init; }

    [JsonPropertyName("user_id")]
    public string? UserId { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record ScheduleEntity : Entity<ScheduleEntity, EntityState<ScheduleAttributes>, ScheduleAttributes>, IScheduleEntityCore
{
    public ScheduleEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ScheduleEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record ScheduleAttributes
{
    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("next_event")]
    public string? NextEvent { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record ScriptEntity : Entity<ScriptEntity, EntityState<ScriptAttributes>, ScriptAttributes>, IScriptEntityCore
{
    public ScriptEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ScriptEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record ScriptAttributes
{
    [JsonPropertyName("last_triggered")]
    public object? LastTriggered { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("current")]
    public double? Current { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record SelectEntity : Entity<SelectEntity, EntityState<SelectAttributes>, SelectAttributes>, ISelectEntityCore
{
    public SelectEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SelectEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record SelectAttributes
{
    [JsonPropertyName("options")]
    public IReadOnlyList<string>? Options { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record SensorEntity : Entity<SensorEntity, EntityState<SensorAttributes>, SensorAttributes>, ISensorEntityCore
{
    public SensorEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SensorEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record SensorAttributes
{
    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("next_phase_date")]
    public string? NextPhaseDate { get; init; }

    [JsonPropertyName("options")]
    public IReadOnlyList<string>? Options { get; init; }

    [JsonPropertyName("moon_age")]
    public double? MoonAge { get; init; }

    [JsonPropertyName("moon_distance_km")]
    public double? MoonDistanceKm { get; init; }

    [JsonPropertyName("moon_azimuth_deg")]
    public double? MoonAzimuthDeg { get; init; }

    [JsonPropertyName("moon_altitude_deg")]
    public double? MoonAltitudeDeg { get; init; }

    [JsonPropertyName("moon_parallactic_angle_deg")]
    public double? MoonParallacticAngleDeg { get; init; }

    [JsonPropertyName("illumination_fraction")]
    public double? IlluminationFraction { get; init; }

    [JsonPropertyName("next_full_moon")]
    public string? NextFullMoon { get; init; }

    [JsonPropertyName("next_new_moon")]
    public string? NextNewMoon { get; init; }

    [JsonPropertyName("next_third_quarter")]
    public string? NextThirdQuarter { get; init; }

    [JsonPropertyName("next_first_quarter")]
    public string? NextFirstQuarter { get; init; }

    [JsonPropertyName("moonrise")]
    public string? Moonrise { get; init; }

    [JsonPropertyName("moonset")]
    public string? Moonset { get; init; }

    [JsonPropertyName("moon_high")]
    public string? MoonHigh { get; init; }

    [JsonPropertyName("next_phase")]
    public string? NextPhase { get; init; }

    [JsonPropertyName("location")]
    public object? Location { get; init; }

    [JsonPropertyName("is_hidden")]
    public bool? IsHidden { get; init; }

    [JsonPropertyName("still")]
    public double? Still { get; init; }

    [JsonPropertyName("metered")]
    public bool? Metered { get; init; }

    [JsonPropertyName("Local Time")]
    public string? LocalTime { get; init; }

    [JsonPropertyName("Package")]
    public string? Package { get; init; }

    [JsonPropertyName("Time in Milliseconds")]
    public double? TimeinMilliseconds { get; init; }

    [JsonPropertyName("automatic")]
    public bool? Automatic { get; init; }

    [JsonPropertyName("administrative_area")]
    public string? AdministrativeArea { get; init; }

    [JsonPropertyName("country")]
    public string? Country { get; init; }

    [JsonPropertyName("iso_country_code")]
    public string? IsoCountryCode { get; init; }

    [JsonPropertyName("locality")]
    public string? Locality { get; init; }

    [JsonPropertyName("name")]
    public string? Name { get; init; }

    [JsonPropertyName("phone")]
    public string? Phone { get; init; }

    [JsonPropertyName("postal_code")]
    public string? PostalCode { get; init; }

    [JsonPropertyName("premises")]
    public string? Premises { get; init; }

    [JsonPropertyName("sub_administrative_area")]
    public string? SubAdministrativeArea { get; init; }

    [JsonPropertyName("sub_locality")]
    public string? SubLocality { get; init; }

    [JsonPropertyName("sub_thoroughfare")]
    public string? SubThoroughfare { get; init; }

    [JsonPropertyName("thoroughfare")]
    public string? Thoroughfare { get; init; }

    [JsonPropertyName("url")]
    public string? Url { get; init; }

    [JsonPropertyName("in_daylight_time")]
    public bool? InDaylightTime { get; init; }

    [JsonPropertyName("time_zone_id")]
    public string? TimeZoneId { get; init; }

    [JsonPropertyName("time_zone_short")]
    public string? TimeZoneShort { get; init; }

    [JsonPropertyName("uses_daylight_time")]
    public bool? UsesDaylightTime { get; init; }

    [JsonPropertyName("utc_offset")]
    public double? UtcOffset { get; init; }

    [JsonPropertyName("Advertise mode")]
    public string? Advertisemode { get; init; }

    [JsonPropertyName("Measured power")]
    public double? Measuredpower { get; init; }

    [JsonPropertyName("Supports transmitter")]
    public bool? Supportstransmitter { get; init; }

    [JsonPropertyName("Transmitting power")]
    public string? Transmittingpower { get; init; }

    [JsonPropertyName("id")]
    public string? Id { get; init; }

    [JsonPropertyName("state_class")]
    public string? StateClass { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("timestamp")]
    public string? Timestamp { get; init; }

    [JsonPropertyName("label")]
    public string? Label { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("last_backup")]
    public string? LastBackup { get; init; }

    [JsonPropertyName("next_backup")]
    public string? NextBackup { get; init; }

    [JsonPropertyName("last_uploaded")]
    public string? LastUploaded { get; init; }

    [JsonPropertyName("backups_in_google_drive")]
    public double? BackupsInGoogleDrive { get; init; }

    [JsonPropertyName("backups_in_home_assistant")]
    public double? BackupsInHomeAssistant { get; init; }

    [JsonPropertyName("size_in_google_drive")]
    public string? SizeInGoogleDrive { get; init; }

    [JsonPropertyName("size_in_home_assistant")]
    public string? SizeInHomeAssistant { get; init; }

    [JsonPropertyName("backups")]
    public IReadOnlyList<object>? Backups { get; init; }

    [JsonPropertyName("free_space_in_google_drive")]
    public string? FreeSpaceInGoogleDrive { get; init; }
}

public partial record NumericSensorEntity : NumericEntity<NumericSensorEntity, NumericEntityState<NumericSensorAttributes>, NumericSensorAttributes>, ISensorEntityCore
{
    public NumericSensorEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public NumericSensorEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record NumericSensorAttributes
{
    [JsonPropertyName("unit_of_measurement")]
    public string? UnitOfMeasurement { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("state_class")]
    public string? StateClass { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("server_name")]
    public string? ServerName { get; init; }

    [JsonPropertyName("server_country")]
    public string? ServerCountry { get; init; }

    [JsonPropertyName("server_id")]
    public string? ServerId { get; init; }

    [JsonPropertyName("bytes_received")]
    public double? BytesReceived { get; init; }

    [JsonPropertyName("bytes_sent")]
    public double? BytesSent { get; init; }

    [JsonPropertyName("moon_altitude_radians")]
    public double? MoonAltitudeRadians { get; init; }

    [JsonPropertyName("moon_azimuth_radians")]
    public double? MoonAzimuthRadians { get; init; }

    [JsonPropertyName("moon_parallactic_angle")]
    public double? MoonParallacticAngle { get; init; }

    [JsonPropertyName("Protocol")]
    public string? Protocol { get; init; }

    [JsonPropertyName("Remote Server")]
    public string? RemoteServer { get; init; }

    [JsonPropertyName("Remote Port")]
    public double? RemotePort { get; init; }

    [JsonPropertyName("Version")]
    public object? Version { get; init; }

    [JsonPropertyName("entity_picture")]
    public string? EntityPicture { get; init; }

    [JsonPropertyName("level")]
    public object? Level { get; init; }

    [JsonPropertyName("equipment")]
    public double? Equipment { get; init; }

    [JsonPropertyName("class")]
    public double? Class { get; init; }

    [JsonPropertyName("allocated")]
    public double? Allocated { get; init; }

    [JsonPropertyName("buffs")]
    public double? Buffs { get; init; }

    [JsonPropertyName("c89c7ae9-771a-4886-9cb1-4968635b3e45")]
    public object? C89c7ae9771a48869cb14968635b3e45 { get; init; }

    [JsonPropertyName("885f9348-78ec-462a-8b95-c8a35df5d825")]
    public object? _885f934878ec462a8b95c8a35df5d825 { get; init; }

    [JsonPropertyName("80f3deb0-09f9-48df-8d32-b05b93027a51")]
    public object? _80f3deb009f948df8d32b05b93027a51 { get; init; }

    [JsonPropertyName("ce7d9ce2-9355-4191-9e48-ffb6b98a7573")]
    public object? Ce7d9ce2935541919e48ffb6b98a7573 { get; init; }

    [JsonPropertyName("204448c5-8f0d-44d9-80fa-a622e8caeee8")]
    public object? _204448c58f0d44d980faa622e8caeee8 { get; init; }

    [JsonPropertyName("dd9765f7-0dca-4d67-9ca8-dcaaa067769a")]
    public object? Dd9765f70dca4d679ca8dcaaa067769a { get; init; }

    [JsonPropertyName("8b198977-13d1-4f61-93ae-3f39b1e77567")]
    public object? _8b19897713d14f6193ae3f39b1e77567 { get; init; }

    [JsonPropertyName("f21d4f3c-4fc9-4742-a449-7876b0923bed")]
    public object? F21d4f3c4fc94742a4497876b0923bed { get; init; }

    [JsonPropertyName("bc588993-8a18-4805-a922-482628eb0a72")]
    public object? Bc5889938a184805a922482628eb0a72 { get; init; }

    [JsonPropertyName("39a1806d-58fc-4921-a648-c14f8bbf5cf7")]
    public object? _39a1806d58fc4921a648c14f8bbf5cf7 { get; init; }

    [JsonPropertyName("bc8e6d52-7dec-4db9-a4b0-396d9b03866d")]
    public object? Bc8e6d527dec4db9a4b0396d9b03866d { get; init; }

    [JsonPropertyName("52f86785-bae2-4c19-b8d1-7d865cd5829e")]
    public object? _52f86785bae24c19b8d17d865cd5829e { get; init; }

    [JsonPropertyName("81e990e9-e8b0-4436-af38-bb92f4a85973")]
    public object? _81e990e9e8b04436af38bb92f4a85973 { get; init; }

    [JsonPropertyName("55333295-8e3e-4f4d-9a28-2d8872683e87")]
    public object? _553332958e3e4f4d9a282d8872683e87 { get; init; }

    [JsonPropertyName("3177e574-fda5-4a94-b088-a0b96e2dc633")]
    public object? _3177e574fda54a94b088a0b96e2dc633 { get; init; }

    [JsonPropertyName("4947ff91-0caf-4057-b092-b57f617eac42")]
    public object? _4947ff910caf4057b092b57f617eac42 { get; init; }

    [JsonPropertyName("8b9381d7-33cb-4340-9ce6-ae4a2be6b3bb")]
    public object? _8b9381d733cb43409ce6ae4a2be6b3bb { get; init; }

    [JsonPropertyName("d7418a85-1948-4f29-86d2-b121014178b9")]
    public object? D7418a8519484f2986d2b121014178b9 { get; init; }

    [JsonPropertyName("f4124376-ac5d-4fbf-8daf-a3c60a89d697")]
    public object? F4124376ac5d4fbf8dafa3c60a89d697 { get; init; }

    [JsonPropertyName("0cab230c-1ba2-4757-bbcc-eca885e8f05b")]
    public object? _0cab230c1ba24757bbcceca885e8f05b { get; init; }

    [JsonPropertyName("c2ecc7f7-fb6b-407d-b8d2-5511306094dd")]
    public object? C2ecc7f7fb6b407db8d25511306094dd { get; init; }

    [JsonPropertyName("2b1e8803-3c71-4c2e-a2ce-cae973b64a05")]
    public object? _2b1e88033c714c2ea2cecae973b64a05 { get; init; }

    [JsonPropertyName("38034483-1fae-4172-9d6b-b1c377f97868")]
    public object? _380344831fae41729d6bb1c377f97868 { get; init; }

    [JsonPropertyName("9145a9dd-d116-443f-9d12-73c6b58d9261")]
    public object? _9145a9ddd116443f9d1273c6b58d9261 { get; init; }

    [JsonPropertyName("5621187d-8353-4180-ad77-ef3bf31f7f88")]
    public object? _5621187d83534180ad77ef3bf31f7f88 { get; init; }

    [JsonPropertyName("c283e49d-2e4a-47ff-9fd5-71809e276fad")]
    public object? C283e49d2e4a47ff9fd571809e276fad { get; init; }

    [JsonPropertyName("ca6afb8c-4fdf-4540-970d-5cc958812ac9")]
    public object? Ca6afb8c4fdf4540970d5cc958812ac9 { get; init; }

    [JsonPropertyName("9b728e13-c7fe-4db7-976c-8a0bdb7933f3")]
    public object? _9b728e13c7fe4db7976c8a0bdb7933f3 { get; init; }

    [JsonPropertyName("2352ed1f-248c-4f9c-b885-3a16af4099c1")]
    public object? _2352ed1f248c4f9cb8853a16af4099c1 { get; init; }

    [JsonPropertyName("current")]
    public double? Current { get; init; }

    [JsonPropertyName("voltage")]
    public double? Voltage { get; init; }

    [JsonPropertyName("light")]
    public double? Light { get; init; }

    [JsonPropertyName("motion")]
    public double? Motion { get; init; }

    [JsonPropertyName("timestamp")]
    public double? Timestamp { get; init; }

    [JsonPropertyName("end")]
    public double? End { get; init; }

    [JsonPropertyName("start")]
    public double? Start { get; init; }

    [JsonPropertyName("status")]
    public string? Status { get; init; }

    [JsonPropertyName("free_memory")]
    public double? FreeMemory { get; init; }

    [JsonPropertyName("total_memory")]
    public double? TotalMemory { get; init; }

    [JsonPropertyName("connected_not_paired_devices")]
    public IReadOnlyList<object>? ConnectedNotPairedDevices { get; init; }

    [JsonPropertyName("connected_paired_devices")]
    public IReadOnlyList<object>? ConnectedPairedDevices { get; init; }

    [JsonPropertyName("paired_devices")]
    public IReadOnlyList<string>? PairedDevices { get; init; }

    [JsonPropertyName("android.appInfo_com.android.systemui_3")]
    public string? Android_appInfoCom_android_systemui3 { get; init; }

    [JsonPropertyName("android.bigText_com.android.systemui_3")]
    public string? Android_bigTextCom_android_systemui3 { get; init; }

    [JsonPropertyName("android.reduced.images_com.android.systemui_3")]
    public bool? Android_reduced_imagesCom_android_systemui3 { get; init; }

    [JsonPropertyName("android.showWhen_com.android.systemui_3")]
    public bool? Android_showWhenCom_android_systemui3 { get; init; }

    [JsonPropertyName("android.substName_com.android.systemui_3")]
    public string? Android_substNameCom_android_systemui3 { get; init; }

    [JsonPropertyName("android.template_com.android.systemui_3")]
    public string? Android_templateCom_android_systemui3 { get; init; }

    [JsonPropertyName("android.text_com.android.systemui_3")]
    public string? Android_textCom_android_systemui3 { get; init; }

    [JsonPropertyName("android.title_com.android.systemui_3")]
    public string? Android_titleCom_android_systemui3 { get; init; }

    [JsonPropertyName("com.android.systemui_3_category")]
    public string? Com_android_systemui3Category { get; init; }

    [JsonPropertyName("com.android.systemui_3_channel_id")]
    public string? Com_android_systemui3ChannelId { get; init; }

    [JsonPropertyName("com.android.systemui_3_group_id")]
    public string? Com_android_systemui3GroupId { get; init; }

    [JsonPropertyName("com.android.systemui_3_is_clearable")]
    public bool? Com_android_systemui3IsClearable { get; init; }

    [JsonPropertyName("com.android.systemui_3_is_ongoing")]
    public bool? Com_android_systemui3IsOngoing { get; init; }

    [JsonPropertyName("com.android.systemui_3_post_time")]
    public double? Com_android_systemui3PostTime { get; init; }

    [JsonPropertyName("last_reset")]
    public string? LastReset { get; init; }

    [JsonPropertyName("type")]
    public object? Type { get; init; }

    [JsonPropertyName("direction")]
    public string? Direction { get; init; }

    [JsonPropertyName("source")]
    public string? Source { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record SunEntity : Entity<SunEntity, EntityState<SunAttributes>, SunAttributes>, ISunEntityCore
{
    public SunEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SunEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record SunAttributes
{
    [JsonPropertyName("next_dawn")]
    public string? NextDawn { get; init; }

    [JsonPropertyName("next_dusk")]
    public string? NextDusk { get; init; }

    [JsonPropertyName("next_midnight")]
    public string? NextMidnight { get; init; }

    [JsonPropertyName("next_noon")]
    public string? NextNoon { get; init; }

    [JsonPropertyName("next_rising")]
    public string? NextRising { get; init; }

    [JsonPropertyName("next_setting")]
    public string? NextSetting { get; init; }

    [JsonPropertyName("elevation")]
    public double? Elevation { get; init; }

    [JsonPropertyName("azimuth")]
    public double? Azimuth { get; init; }

    [JsonPropertyName("rising")]
    public bool? Rising { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record SwitchEntity : Entity<SwitchEntity, EntityState<SwitchAttributes>, SwitchAttributes>, ISwitchEntityCore
{
    public SwitchEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SwitchEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record SwitchAttributes
{
    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record TagEntity : Entity<TagEntity, EntityState<TagAttributes>, TagAttributes>
{
    public TagEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public TagEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record TagAttributes
{
    [JsonPropertyName("tag_id")]
    public string? TagId { get; init; }

    [JsonPropertyName("last_scanned_by_device_id")]
    public object? LastScannedByDeviceId { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record TimerEntity : Entity<TimerEntity, EntityState<TimerAttributes>, TimerAttributes>, ITimerEntityCore
{
    public TimerEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public TimerEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record TimerAttributes
{
    [JsonPropertyName("duration")]
    public string? Duration { get; init; }

    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record TodoEntity : Entity<TodoEntity, EntityState<TodoAttributes>, TodoAttributes>
{
    public TodoEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public TodoEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record TodoAttributes
{
    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record UpdateEntity : Entity<UpdateEntity, EntityState<UpdateAttributes>, UpdateAttributes>, IUpdateEntityCore
{
    public UpdateEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public UpdateEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record UpdateAttributes
{
    [JsonPropertyName("auto_update")]
    public bool? AutoUpdate { get; init; }

    [JsonPropertyName("display_precision")]
    public double? DisplayPrecision { get; init; }

    [JsonPropertyName("installed_version")]
    public string? InstalledVersion { get; init; }

    [JsonPropertyName("in_progress")]
    public bool? InProgress { get; init; }

    [JsonPropertyName("latest_version")]
    public string? LatestVersion { get; init; }

    [JsonPropertyName("release_summary")]
    public string? ReleaseSummary { get; init; }

    [JsonPropertyName("release_url")]
    public string? ReleaseUrl { get; init; }

    [JsonPropertyName("skipped_version")]
    public object? SkippedVersion { get; init; }

    [JsonPropertyName("title")]
    public string? Title { get; init; }

    [JsonPropertyName("update_percentage")]
    public object? UpdatePercentage { get; init; }

    [JsonPropertyName("entity_picture")]
    public string? EntityPicture { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }
}

public partial record WeatherEntity : Entity<WeatherEntity, EntityState<WeatherAttributes>, WeatherAttributes>, IWeatherEntityCore
{
    public WeatherEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public WeatherEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record WeatherAttributes
{
    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    [JsonPropertyName("apparent_temperature")]
    public double? ApparentTemperature { get; init; }

    [JsonPropertyName("dew_point")]
    public double? DewPoint { get; init; }

    [JsonPropertyName("temperature_unit")]
    public string? TemperatureUnit { get; init; }

    [JsonPropertyName("humidity")]
    public double? Humidity { get; init; }

    [JsonPropertyName("cloud_coverage")]
    public double? CloudCoverage { get; init; }

    [JsonPropertyName("uv_index")]
    public double? UvIndex { get; init; }

    [JsonPropertyName("pressure")]
    public double? Pressure { get; init; }

    [JsonPropertyName("pressure_unit")]
    public string? PressureUnit { get; init; }

    [JsonPropertyName("wind_bearing")]
    public double? WindBearing { get; init; }

    [JsonPropertyName("wind_gust_speed")]
    public double? WindGustSpeed { get; init; }

    [JsonPropertyName("wind_speed")]
    public double? WindSpeed { get; init; }

    [JsonPropertyName("wind_speed_unit")]
    public string? WindSpeedUnit { get; init; }

    [JsonPropertyName("visibility")]
    public double? Visibility { get; init; }

    [JsonPropertyName("visibility_unit")]
    public string? VisibilityUnit { get; init; }

    [JsonPropertyName("precipitation_unit")]
    public string? PrecipitationUnit { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record ZoneEntity : Entity<ZoneEntity, EntityState<ZoneAttributes>, ZoneAttributes>, IZoneEntityCore
{
    public ZoneEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ZoneEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record ZoneAttributes
{
    [JsonPropertyName("latitude")]
    public double? Latitude { get; init; }

    [JsonPropertyName("longitude")]
    public double? Longitude { get; init; }

    [JsonPropertyName("radius")]
    public double? Radius { get; init; }

    [JsonPropertyName("passive")]
    public bool? Passive { get; init; }

    [JsonPropertyName("persons")]
    public IReadOnlyList<string>? Persons { get; init; }

    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public interface IServices
{
    AlarmControlPanelServices AlarmControlPanel { get; }

    AutomationServices Automation { get; }

    ButtonServices Button { get; }

    CalendarServices Calendar { get; }

    CameraServices Camera { get; }

    ClimateServices Climate { get; }

    CloudServices Cloud { get; }

    ConnectlifeServices Connectlife { get; }

    ConversationServices Conversation { get; }

    CounterServices Counter { get; }

    CoverServices Cover { get; }

    DeviceTrackerServices DeviceTracker { get; }

    EsphomeServices Esphome { get; }

    FanServices Fan { get; }

    FfmpegServices Ffmpeg { get; }

    FrontendServices Frontend { get; }

    GoogleServices Google { get; }

    GoogleGenerativeAiConversationServices GoogleGenerativeAiConversation { get; }

    HabiticaServices Habitica { get; }

    HassioServices Hassio { get; }

    HomeassistantServices Homeassistant { get; }

    HumidifierServices Humidifier { get; }

    ImapServices Imap { get; }

    InputBooleanServices InputBoolean { get; }

    InputButtonServices InputButton { get; }

    InputDatetimeServices InputDatetime { get; }

    InputNumberServices InputNumber { get; }

    InputSelectServices InputSelect { get; }

    InputTextServices InputText { get; }

    Iperf3Services Iperf3 { get; }

    KodiServices Kodi { get; }

    LightServices Light { get; }

    LogbookServices Logbook { get; }

    LoggerServices Logger { get; }

    MediaPlayerServices MediaPlayer { get; }

    MqttServices Mqtt { get; }

    NoderedServices Nodered { get; }

    NotifyServices Notify { get; }

    NumberServices Number { get; }

    PersistentNotificationServices PersistentNotification { get; }

    PersonServices Person { get; }

    QbittorrentServices Qbittorrent { get; }

    RecorderServices Recorder { get; }

    RemoteServices Remote { get; }

    RestServices Rest { get; }

    RestCommandServices RestCommand { get; }

    SceneServices Scene { get; }

    ScheduleServices Schedule { get; }

    ScriptServices Script { get; }

    SelectServices Select { get; }

    SirenServices Siren { get; }

    SonoffServices Sonoff { get; }

    SwitchServices Switch { get; }

    SystemLogServices SystemLog { get; }

    TemplateServices Template { get; }

    TimerServices Timer { get; }

    TodoServices Todo { get; }

    TtsServices Tts { get; }

    UpdateServices Update { get; }

    VacuumServices Vacuum { get; }

    WaterHeaterServices WaterHeater { get; }

    WeatherServices Weather { get; }

    WhatsappServices Whatsapp { get; }

    WorkdayServices Workday { get; }

    ZoneServices Zone { get; }
}

public partial class Services : IServices
{
    private readonly IHaContext _haContext;
    public Services(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public AlarmControlPanelServices AlarmControlPanel => new(_haContext);
    public AutomationServices Automation => new(_haContext);
    public ButtonServices Button => new(_haContext);
    public CalendarServices Calendar => new(_haContext);
    public CameraServices Camera => new(_haContext);
    public ClimateServices Climate => new(_haContext);
    public CloudServices Cloud => new(_haContext);
    public ConnectlifeServices Connectlife => new(_haContext);
    public ConversationServices Conversation => new(_haContext);
    public CounterServices Counter => new(_haContext);
    public CoverServices Cover => new(_haContext);
    public DeviceTrackerServices DeviceTracker => new(_haContext);
    public EsphomeServices Esphome => new(_haContext);
    public FanServices Fan => new(_haContext);
    public FfmpegServices Ffmpeg => new(_haContext);
    public FrontendServices Frontend => new(_haContext);
    public GoogleServices Google => new(_haContext);
    public GoogleGenerativeAiConversationServices GoogleGenerativeAiConversation => new(_haContext);
    public HabiticaServices Habitica => new(_haContext);
    public HassioServices Hassio => new(_haContext);
    public HomeassistantServices Homeassistant => new(_haContext);
    public HumidifierServices Humidifier => new(_haContext);
    public ImapServices Imap => new(_haContext);
    public InputBooleanServices InputBoolean => new(_haContext);
    public InputButtonServices InputButton => new(_haContext);
    public InputDatetimeServices InputDatetime => new(_haContext);
    public InputNumberServices InputNumber => new(_haContext);
    public InputSelectServices InputSelect => new(_haContext);
    public InputTextServices InputText => new(_haContext);
    public Iperf3Services Iperf3 => new(_haContext);
    public KodiServices Kodi => new(_haContext);
    public LightServices Light => new(_haContext);
    public LogbookServices Logbook => new(_haContext);
    public LoggerServices Logger => new(_haContext);
    public MediaPlayerServices MediaPlayer => new(_haContext);
    public MqttServices Mqtt => new(_haContext);
    public NoderedServices Nodered => new(_haContext);
    public NotifyServices Notify => new(_haContext);
    public NumberServices Number => new(_haContext);
    public PersistentNotificationServices PersistentNotification => new(_haContext);
    public PersonServices Person => new(_haContext);
    public QbittorrentServices Qbittorrent => new(_haContext);
    public RecorderServices Recorder => new(_haContext);
    public RemoteServices Remote => new(_haContext);
    public RestServices Rest => new(_haContext);
    public RestCommandServices RestCommand => new(_haContext);
    public SceneServices Scene => new(_haContext);
    public ScheduleServices Schedule => new(_haContext);
    public ScriptServices Script => new(_haContext);
    public SelectServices Select => new(_haContext);
    public SirenServices Siren => new(_haContext);
    public SonoffServices Sonoff => new(_haContext);
    public SwitchServices Switch => new(_haContext);
    public SystemLogServices SystemLog => new(_haContext);
    public TemplateServices Template => new(_haContext);
    public TimerServices Timer => new(_haContext);
    public TodoServices Todo => new(_haContext);
    public TtsServices Tts => new(_haContext);
    public UpdateServices Update => new(_haContext);
    public VacuumServices Vacuum => new(_haContext);
    public WaterHeaterServices WaterHeater => new(_haContext);
    public WeatherServices Weather => new(_haContext);
    public WhatsappServices Whatsapp => new(_haContext);
    public WorkdayServices Workday => new(_haContext);
    public ZoneServices Zone => new(_haContext);
}

public partial class AlarmControlPanelServices
{
    private readonly IHaContext _haContext;
    public AlarmControlPanelServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets the alarm to: _armed, no one home_.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmAway(ServiceTarget target, AlarmControlPanelAlarmArmAwayParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_away", target, data);
    }

    ///<summary>Sets the alarm to: _armed, no one home_.</summary>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmArmAway(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_away", target, new AlarmControlPanelAlarmArmAwayParameters { Code = code });
    }

    ///<summary>Arms the alarm while allowing to bypass a custom area.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmCustomBypass(ServiceTarget target, AlarmControlPanelAlarmArmCustomBypassParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_custom_bypass", target, data);
    }

    ///<summary>Arms the alarm while allowing to bypass a custom area.</summary>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmArmCustomBypass(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_custom_bypass", target, new AlarmControlPanelAlarmArmCustomBypassParameters { Code = code });
    }

    ///<summary>Sets the alarm to: _armed, but someone is home_.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmHome(ServiceTarget target, AlarmControlPanelAlarmArmHomeParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_home", target, data);
    }

    ///<summary>Sets the alarm to: _armed, but someone is home_.</summary>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmArmHome(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_home", target, new AlarmControlPanelAlarmArmHomeParameters { Code = code });
    }

    ///<summary>Sets the alarm to: _armed for the night_.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmNight(ServiceTarget target, AlarmControlPanelAlarmArmNightParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_night", target, data);
    }

    ///<summary>Sets the alarm to: _armed for the night_.</summary>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmArmNight(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_night", target, new AlarmControlPanelAlarmArmNightParameters { Code = code });
    }

    ///<summary>Sets the alarm to: _armed for vacation_.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmVacation(ServiceTarget target, AlarmControlPanelAlarmArmVacationParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_vacation", target, data);
    }

    ///<summary>Sets the alarm to: _armed for vacation_.</summary>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmArmVacation(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_vacation", target, new AlarmControlPanelAlarmArmVacationParameters { Code = code });
    }

    ///<summary>Disarms the alarm.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmDisarm(ServiceTarget target, AlarmControlPanelAlarmDisarmParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_disarm", target, data);
    }

    ///<summary>Disarms the alarm.</summary>
    ///<param name="code">Code to disarm the alarm. eg: 1234</param>
    public void AlarmDisarm(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_disarm", target, new AlarmControlPanelAlarmDisarmParameters { Code = code });
    }

    ///<summary>Trigger the alarm manually.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmTrigger(ServiceTarget target, AlarmControlPanelAlarmTriggerParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_trigger", target, data);
    }

    ///<summary>Trigger the alarm manually.</summary>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmTrigger(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_trigger", target, new AlarmControlPanelAlarmTriggerParameters { Code = code });
    }
}

public partial record AlarmControlPanelAlarmArmAwayParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmArmCustomBypassParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmArmHomeParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmArmNightParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmArmVacationParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmDisarmParameters
{
    ///<summary>Code to disarm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmTriggerParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial class AutomationServices
{
    private readonly IHaContext _haContext;
    public AutomationServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads the automation configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("automation", "reload", null, data);
    }

    ///<summary>Toggles (enable / disable) an automation.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("automation", "toggle", target, data);
    }

    ///<summary>Triggers the actions of an automation.</summary>
    ///<param name="target">The target for this service call</param>
    public void Trigger(ServiceTarget target, AutomationTriggerParameters data)
    {
        _haContext.CallService("automation", "trigger", target, data);
    }

    ///<summary>Triggers the actions of an automation.</summary>
    ///<param name="skipCondition">Defines whether or not the conditions will be skipped.</param>
    public void Trigger(ServiceTarget target, bool? skipCondition = null)
    {
        _haContext.CallService("automation", "trigger", target, new AutomationTriggerParameters { SkipCondition = skipCondition });
    }

    ///<summary>Disables an automation.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, AutomationTurnOffParameters data)
    {
        _haContext.CallService("automation", "turn_off", target, data);
    }

    ///<summary>Disables an automation.</summary>
    ///<param name="stopActions">Stops currently running actions.</param>
    public void TurnOff(ServiceTarget target, bool? stopActions = null)
    {
        _haContext.CallService("automation", "turn_off", target, new AutomationTurnOffParameters { StopActions = stopActions });
    }

    ///<summary>Enables an automation.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("automation", "turn_on", target, data);
    }
}

public partial record AutomationTriggerParameters
{
    ///<summary>Defines whether or not the conditions will be skipped.</summary>
    [JsonPropertyName("skip_condition")]
    public bool? SkipCondition { get; init; }
}

public partial record AutomationTurnOffParameters
{
    ///<summary>Stops currently running actions.</summary>
    [JsonPropertyName("stop_actions")]
    public bool? StopActions { get; init; }
}

public partial class ButtonServices
{
    private readonly IHaContext _haContext;
    public ButtonServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Press the button entity.</summary>
    ///<param name="target">The target for this service call</param>
    public void Press(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("button", "press", target, data);
    }
}

public partial class CalendarServices
{
    private readonly IHaContext _haContext;
    public CalendarServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Adds a new calendar event.</summary>
    ///<param name="target">The target for this service call</param>
    public void CreateEvent(ServiceTarget target, CalendarCreateEventParameters data)
    {
        _haContext.CallService("calendar", "create_event", target, data);
    }

    ///<summary>Adds a new calendar event.</summary>
    ///<param name="summary">Defines the short summary or subject for the event. eg: Department Party</param>
    ///<param name="description">A more complete description of the event than the one provided by the summary. eg: Meeting to provide technical review for &apos;Phoenix&apos; design.</param>
    ///<param name="startDateTime">The date and time the event should start. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">The date and time the event should end. eg: 2022-03-22 22:00:00</param>
    ///<param name="startDate">The date the all-day event should start. eg: 2022-03-22</param>
    ///<param name="endDate">The date the all-day event should end (exclusive). eg: 2022-03-23</param>
    ///<param name="in">Days or weeks that you want to create the event in. eg: {&quot;days&quot;: 2} or {&quot;weeks&quot;: 2}</param>
    ///<param name="location">The location of the event. eg: Conference Room - F123, Bldg. 002</param>
    public void CreateEvent(ServiceTarget target, string summary, string? description = null, DateTime? startDateTime = null, DateTime? endDateTime = null, DateOnly? startDate = null, DateOnly? endDate = null, object? @in = null, string? location = null)
    {
        _haContext.CallService("calendar", "create_event", target, new CalendarCreateEventParameters { Summary = summary, Description = description, StartDateTime = startDateTime, EndDateTime = endDateTime, StartDate = startDate, EndDate = endDate, In = @in, Location = location });
    }

    ///<summary>Get events on a calendar within a time range.</summary>
    ///<param name="target">The target for this service call</param>
    public void GetEvents(ServiceTarget target, CalendarGetEventsParameters data)
    {
        _haContext.CallService("calendar", "get_events", target, data);
    }

    ///<summary>Get events on a calendar within a time range.</summary>
    ///<param name="startDateTime">Returns active events after this time (exclusive). When not set, defaults to now. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">Returns active events before this time (exclusive). Cannot be used with Duration. eg: 2022-03-22 22:00:00</param>
    ///<param name="duration">Returns active events from Start time for the specified duration.</param>
    public void GetEvents(ServiceTarget target, DateTime? startDateTime = null, DateTime? endDateTime = null, object? duration = null)
    {
        _haContext.CallService("calendar", "get_events", target, new CalendarGetEventsParameters { StartDateTime = startDateTime, EndDateTime = endDateTime, Duration = duration });
    }

    ///<summary>Get events on a calendar within a time range.</summary>
    ///<param name="target">The target for this service call</param>
    public Task<JsonElement?> GetEventsAsync(ServiceTarget target, CalendarGetEventsParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("calendar", "get_events", target, data);
    }

    ///<summary>Get events on a calendar within a time range.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="startDateTime">Returns active events after this time (exclusive). When not set, defaults to now. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">Returns active events before this time (exclusive). Cannot be used with Duration. eg: 2022-03-22 22:00:00</param>
    ///<param name="duration">Returns active events from Start time for the specified duration.</param>
    public Task<JsonElement?> GetEventsAsync(ServiceTarget target, DateTime? startDateTime = null, DateTime? endDateTime = null, object? duration = null)
    {
        return _haContext.CallServiceWithResponseAsync("calendar", "get_events", target, new CalendarGetEventsParameters { StartDateTime = startDateTime, EndDateTime = endDateTime, Duration = duration });
    }
}

public partial record CalendarCreateEventParameters
{
    ///<summary>Defines the short summary or subject for the event. eg: Department Party</summary>
    [JsonPropertyName("summary")]
    public string? Summary { get; init; }

    ///<summary>A more complete description of the event than the one provided by the summary. eg: Meeting to provide technical review for &apos;Phoenix&apos; design.</summary>
    [JsonPropertyName("description")]
    public string? Description { get; init; }

    ///<summary>The date and time the event should start. eg: 2022-03-22 20:00:00</summary>
    [JsonPropertyName("start_date_time")]
    public DateTime? StartDateTime { get; init; }

    ///<summary>The date and time the event should end. eg: 2022-03-22 22:00:00</summary>
    [JsonPropertyName("end_date_time")]
    public DateTime? EndDateTime { get; init; }

    ///<summary>The date the all-day event should start. eg: 2022-03-22</summary>
    [JsonPropertyName("start_date")]
    public DateOnly? StartDate { get; init; }

    ///<summary>The date the all-day event should end (exclusive). eg: 2022-03-23</summary>
    [JsonPropertyName("end_date")]
    public DateOnly? EndDate { get; init; }

    ///<summary>Days or weeks that you want to create the event in. eg: {&quot;days&quot;: 2} or {&quot;weeks&quot;: 2}</summary>
    [JsonPropertyName("in")]
    public object? In { get; init; }

    ///<summary>The location of the event. eg: Conference Room - F123, Bldg. 002</summary>
    [JsonPropertyName("location")]
    public string? Location { get; init; }
}

public partial record CalendarGetEventsParameters
{
    ///<summary>Returns active events after this time (exclusive). When not set, defaults to now. eg: 2022-03-22 20:00:00</summary>
    [JsonPropertyName("start_date_time")]
    public DateTime? StartDateTime { get; init; }

    ///<summary>Returns active events before this time (exclusive). Cannot be used with Duration. eg: 2022-03-22 22:00:00</summary>
    [JsonPropertyName("end_date_time")]
    public DateTime? EndDateTime { get; init; }

    ///<summary>Returns active events from Start time for the specified duration.</summary>
    [JsonPropertyName("duration")]
    public object? Duration { get; init; }
}

public partial class CameraServices
{
    private readonly IHaContext _haContext;
    public CameraServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Disables the motion detection.</summary>
    ///<param name="target">The target for this service call</param>
    public void DisableMotionDetection(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("camera", "disable_motion_detection", target, data);
    }

    ///<summary>Enables the motion detection.</summary>
    ///<param name="target">The target for this service call</param>
    public void EnableMotionDetection(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("camera", "enable_motion_detection", target, data);
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void PlayStream(ServiceTarget target, CameraPlayStreamParameters data)
    {
        _haContext.CallService("camera", "play_stream", target, data);
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    ///<param name="mediaPlayer">Media players to stream to.</param>
    ///<param name="format">Stream format supported by the media player.</param>
    public void PlayStream(ServiceTarget target, string mediaPlayer, object? format = null)
    {
        _haContext.CallService("camera", "play_stream", target, new CameraPlayStreamParameters { MediaPlayer = mediaPlayer, Format = format });
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    ///<param name="target">The target for this service call</param>
    public void Record(ServiceTarget target, CameraRecordParameters data)
    {
        _haContext.CallService("camera", "record", target, data);
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    ///<param name="filename">Full path to filename. Must be mp4. eg: /tmp/snapshot_{{ entity_id.name }}.mp4</param>
    ///<param name="duration">Planned duration of the recording. The actual duration may vary.</param>
    ///<param name="lookback">Planned lookback period to include in the recording (in addition to the duration). Only available if there is currently an active HLS stream. The actual length of the lookback period may vary.</param>
    public void Record(ServiceTarget target, string filename, double? duration = null, double? lookback = null)
    {
        _haContext.CallService("camera", "record", target, new CameraRecordParameters { Filename = filename, Duration = duration, Lookback = lookback });
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    ///<param name="target">The target for this service call</param>
    public void Snapshot(ServiceTarget target, CameraSnapshotParameters data)
    {
        _haContext.CallService("camera", "snapshot", target, data);
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    ///<param name="filename">Full path to filename. eg: /tmp/snapshot_{{ entity_id.name }}.jpg</param>
    public void Snapshot(ServiceTarget target, string filename)
    {
        _haContext.CallService("camera", "snapshot", target, new CameraSnapshotParameters { Filename = filename });
    }

    ///<summary>Turns off the camera.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("camera", "turn_off", target, data);
    }

    ///<summary>Turns on the camera.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("camera", "turn_on", target, data);
    }
}

public partial record CameraPlayStreamParameters
{
    ///<summary>Media players to stream to.</summary>
    [JsonPropertyName("media_player")]
    public string? MediaPlayer { get; init; }

    ///<summary>Stream format supported by the media player.</summary>
    [JsonPropertyName("format")]
    public object? Format { get; init; }
}

public partial record CameraRecordParameters
{
    ///<summary>Full path to filename. Must be mp4. eg: /tmp/snapshot_{{ entity_id.name }}.mp4</summary>
    [JsonPropertyName("filename")]
    public string? Filename { get; init; }

    ///<summary>Planned duration of the recording. The actual duration may vary.</summary>
    [JsonPropertyName("duration")]
    public double? Duration { get; init; }

    ///<summary>Planned lookback period to include in the recording (in addition to the duration). Only available if there is currently an active HLS stream. The actual length of the lookback period may vary.</summary>
    [JsonPropertyName("lookback")]
    public double? Lookback { get; init; }
}

public partial record CameraSnapshotParameters
{
    ///<summary>Full path to filename. eg: /tmp/snapshot_{{ entity_id.name }}.jpg</summary>
    [JsonPropertyName("filename")]
    public string? Filename { get; init; }
}

public partial class ClimateServices
{
    private readonly IHaContext _haContext;
    public ClimateServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Turns auxiliary heater on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetAuxHeat(ServiceTarget target, ClimateSetAuxHeatParameters data)
    {
        _haContext.CallService("climate", "set_aux_heat", target, data);
    }

    ///<summary>Turns auxiliary heater on/off.</summary>
    ///<param name="auxHeat">New value of auxiliary heater.</param>
    public void SetAuxHeat(ServiceTarget target, bool auxHeat)
    {
        _haContext.CallService("climate", "set_aux_heat", target, new ClimateSetAuxHeatParameters { AuxHeat = auxHeat });
    }

    ///<summary>Sets fan operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetFanMode(ServiceTarget target, ClimateSetFanModeParameters data)
    {
        _haContext.CallService("climate", "set_fan_mode", target, data);
    }

    ///<summary>Sets fan operation mode.</summary>
    ///<param name="fanMode">Fan operation mode. eg: low</param>
    public void SetFanMode(ServiceTarget target, string fanMode)
    {
        _haContext.CallService("climate", "set_fan_mode", target, new ClimateSetFanModeParameters { FanMode = fanMode });
    }

    ///<summary>Sets target humidity.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetHumidity(ServiceTarget target, ClimateSetHumidityParameters data)
    {
        _haContext.CallService("climate", "set_humidity", target, data);
    }

    ///<summary>Sets target humidity.</summary>
    ///<param name="humidity">Target humidity.</param>
    public void SetHumidity(ServiceTarget target, double humidity)
    {
        _haContext.CallService("climate", "set_humidity", target, new ClimateSetHumidityParameters { Humidity = humidity });
    }

    ///<summary>Sets HVAC operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetHvacMode(ServiceTarget target, ClimateSetHvacModeParameters data)
    {
        _haContext.CallService("climate", "set_hvac_mode", target, data);
    }

    ///<summary>Sets HVAC operation mode.</summary>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public void SetHvacMode(ServiceTarget target, object? hvacMode = null)
    {
        _haContext.CallService("climate", "set_hvac_mode", target, new ClimateSetHvacModeParameters { HvacMode = hvacMode });
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetPresetMode(ServiceTarget target, ClimateSetPresetModeParameters data)
    {
        _haContext.CallService("climate", "set_preset_mode", target, data);
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="presetMode">Preset mode. eg: away</param>
    public void SetPresetMode(ServiceTarget target, string presetMode)
    {
        _haContext.CallService("climate", "set_preset_mode", target, new ClimateSetPresetModeParameters { PresetMode = presetMode });
    }

    ///<summary>Sets horizontal swing operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetSwingHorizontalMode(ServiceTarget target, ClimateSetSwingHorizontalModeParameters data)
    {
        _haContext.CallService("climate", "set_swing_horizontal_mode", target, data);
    }

    ///<summary>Sets horizontal swing operation mode.</summary>
    ///<param name="swingHorizontalMode">Horizontal swing operation mode. eg: on</param>
    public void SetSwingHorizontalMode(ServiceTarget target, string swingHorizontalMode)
    {
        _haContext.CallService("climate", "set_swing_horizontal_mode", target, new ClimateSetSwingHorizontalModeParameters { SwingHorizontalMode = swingHorizontalMode });
    }

    ///<summary>Sets swing operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetSwingMode(ServiceTarget target, ClimateSetSwingModeParameters data)
    {
        _haContext.CallService("climate", "set_swing_mode", target, data);
    }

    ///<summary>Sets swing operation mode.</summary>
    ///<param name="swingMode">Swing operation mode. eg: on</param>
    public void SetSwingMode(ServiceTarget target, string swingMode)
    {
        _haContext.CallService("climate", "set_swing_mode", target, new ClimateSetSwingModeParameters { SwingMode = swingMode });
    }

    ///<summary>Sets the temperature setpoint.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetTemperature(ServiceTarget target, ClimateSetTemperatureParameters data)
    {
        _haContext.CallService("climate", "set_temperature", target, data);
    }

    ///<summary>Sets the temperature setpoint.</summary>
    ///<param name="temperature">The temperature setpoint.</param>
    ///<param name="targetTempHigh">The max temperature setpoint.</param>
    ///<param name="targetTempLow">The min temperature setpoint.</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public void SetTemperature(ServiceTarget target, double? temperature = null, double? targetTempHigh = null, double? targetTempLow = null, object? hvacMode = null)
    {
        _haContext.CallService("climate", "set_temperature", target, new ClimateSetTemperatureParameters { Temperature = temperature, TargetTempHigh = targetTempHigh, TargetTempLow = targetTempLow, HvacMode = hvacMode });
    }

    ///<summary>Toggles climate device, from on to off, or off to on.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("climate", "toggle", target, data);
    }

    ///<summary>Turns climate device off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("climate", "turn_off", target, data);
    }

    ///<summary>Turns climate device on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("climate", "turn_on", target, data);
    }
}

public partial record ClimateSetAuxHeatParameters
{
    ///<summary>New value of auxiliary heater.</summary>
    [JsonPropertyName("aux_heat")]
    public bool? AuxHeat { get; init; }
}

public partial record ClimateSetFanModeParameters
{
    ///<summary>Fan operation mode. eg: low</summary>
    [JsonPropertyName("fan_mode")]
    public string? FanMode { get; init; }
}

public partial record ClimateSetHumidityParameters
{
    ///<summary>Target humidity.</summary>
    [JsonPropertyName("humidity")]
    public double? Humidity { get; init; }
}

public partial record ClimateSetHvacModeParameters
{
    ///<summary>HVAC operation mode.</summary>
    [JsonPropertyName("hvac_mode")]
    public object? HvacMode { get; init; }
}

public partial record ClimateSetPresetModeParameters
{
    ///<summary>Preset mode. eg: away</summary>
    [JsonPropertyName("preset_mode")]
    public string? PresetMode { get; init; }
}

public partial record ClimateSetSwingHorizontalModeParameters
{
    ///<summary>Horizontal swing operation mode. eg: on</summary>
    [JsonPropertyName("swing_horizontal_mode")]
    public string? SwingHorizontalMode { get; init; }
}

public partial record ClimateSetSwingModeParameters
{
    ///<summary>Swing operation mode. eg: on</summary>
    [JsonPropertyName("swing_mode")]
    public string? SwingMode { get; init; }
}

public partial record ClimateSetTemperatureParameters
{
    ///<summary>The temperature setpoint.</summary>
    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    ///<summary>The max temperature setpoint.</summary>
    [JsonPropertyName("target_temp_high")]
    public double? TargetTempHigh { get; init; }

    ///<summary>The min temperature setpoint.</summary>
    [JsonPropertyName("target_temp_low")]
    public double? TargetTempLow { get; init; }

    ///<summary>HVAC operation mode.</summary>
    [JsonPropertyName("hvac_mode")]
    public object? HvacMode { get; init; }
}

public partial class CloudServices
{
    private readonly IHaContext _haContext;
    public CloudServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Makes the instance UI accessible from outside of the local network by enabling your Home Assistant Cloud connection.</summary>
    public void RemoteConnect(object? data = null)
    {
        _haContext.CallService("cloud", "remote_connect", null, data);
    }

    ///<summary>Disconnects the instance UI from Home Assistant Cloud. This disables access to it from outside your local network.</summary>
    public void RemoteDisconnect(object? data = null)
    {
        _haContext.CallService("cloud", "remote_disconnect", null, data);
    }
}

public partial class ConnectlifeServices
{
    private readonly IHaContext _haContext;
    public ConnectlifeServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets a value for the status. Use with care.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, ConnectlifeSetValueParameters data)
    {
        _haContext.CallService("connectlife", "set_value", target, data);
    }

    ///<summary>Sets a value for the status. Use with care.</summary>
    ///<param name="value">Value to set.</param>
    public void SetValue(ServiceTarget target, double value)
    {
        _haContext.CallService("connectlife", "set_value", target, new ConnectlifeSetValueParameters { Value = value });
    }
}

public partial record ConnectlifeSetValueParameters
{
    ///<summary>Value to set.</summary>
    [JsonPropertyName("value")]
    public double? Value { get; init; }
}

public partial class ConversationServices
{
    private readonly IHaContext _haContext;
    public ConversationServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Launches a conversation from a transcribed text.</summary>
    public void Process(ConversationProcessParameters data)
    {
        _haContext.CallService("conversation", "process", null, data);
    }

    ///<summary>Launches a conversation from a transcribed text.</summary>
    ///<param name="text">Transcribed text input. eg: Turn all lights on</param>
    ///<param name="language">Language of text. Defaults to server language. eg: NL</param>
    ///<param name="agentId">Conversation agent to process your request. The conversation agent is the brains of your assistant. It processes the incoming text commands. eg: homeassistant</param>
    ///<param name="conversationId">ID of the conversation, to be able to continue a previous conversation eg: my_conversation_1</param>
    public void Process(string text, string? language = null, object? agentId = null, string? conversationId = null)
    {
        _haContext.CallService("conversation", "process", null, new ConversationProcessParameters { Text = text, Language = language, AgentId = agentId, ConversationId = conversationId });
    }

    ///<summary>Launches a conversation from a transcribed text.</summary>
    public Task<JsonElement?> ProcessAsync(ConversationProcessParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("conversation", "process", null, data);
    }

    ///<summary>Launches a conversation from a transcribed text.</summary>
    ///<param name="text">Transcribed text input. eg: Turn all lights on</param>
    ///<param name="language">Language of text. Defaults to server language. eg: NL</param>
    ///<param name="agentId">Conversation agent to process your request. The conversation agent is the brains of your assistant. It processes the incoming text commands. eg: homeassistant</param>
    ///<param name="conversationId">ID of the conversation, to be able to continue a previous conversation eg: my_conversation_1</param>
    public Task<JsonElement?> ProcessAsync(string text, string? language = null, object? agentId = null, string? conversationId = null)
    {
        return _haContext.CallServiceWithResponseAsync("conversation", "process", null, new ConversationProcessParameters { Text = text, Language = language, AgentId = agentId, ConversationId = conversationId });
    }

    ///<summary>Reloads the intent configuration.</summary>
    public void Reload(ConversationReloadParameters data)
    {
        _haContext.CallService("conversation", "reload", null, data);
    }

    ///<summary>Reloads the intent configuration.</summary>
    ///<param name="language">Language to clear cached intents for. Defaults to server language. eg: NL</param>
    ///<param name="agentId">Conversation agent to reload. eg: homeassistant</param>
    public void Reload(string? language = null, object? agentId = null)
    {
        _haContext.CallService("conversation", "reload", null, new ConversationReloadParameters { Language = language, AgentId = agentId });
    }
}

public partial record ConversationProcessParameters
{
    ///<summary>Transcribed text input. eg: Turn all lights on</summary>
    [JsonPropertyName("text")]
    public string? Text { get; init; }

    ///<summary>Language of text. Defaults to server language. eg: NL</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary>Conversation agent to process your request. The conversation agent is the brains of your assistant. It processes the incoming text commands. eg: homeassistant</summary>
    [JsonPropertyName("agent_id")]
    public object? AgentId { get; init; }

    ///<summary>ID of the conversation, to be able to continue a previous conversation eg: my_conversation_1</summary>
    [JsonPropertyName("conversation_id")]
    public string? ConversationId { get; init; }
}

public partial record ConversationReloadParameters
{
    ///<summary>Language to clear cached intents for. Defaults to server language. eg: NL</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary>Conversation agent to reload. eg: homeassistant</summary>
    [JsonPropertyName("agent_id")]
    public object? AgentId { get; init; }
}

public partial class CounterServices
{
    private readonly IHaContext _haContext;
    public CounterServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Decrements a counter by its step size.</summary>
    ///<param name="target">The target for this service call</param>
    public void Decrement(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("counter", "decrement", target, data);
    }

    ///<summary>Increments a counter by its step size.</summary>
    ///<param name="target">The target for this service call</param>
    public void Increment(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("counter", "increment", target, data);
    }

    ///<summary>Resets a counter to its initial value.</summary>
    ///<param name="target">The target for this service call</param>
    public void Reset(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("counter", "reset", target, data);
    }

    ///<summary>Sets the counter to a specific value.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, CounterSetValueParameters data)
    {
        _haContext.CallService("counter", "set_value", target, data);
    }

    ///<summary>Sets the counter to a specific value.</summary>
    ///<param name="value">The new counter value the entity should be set to.</param>
    public void SetValue(ServiceTarget target, double value)
    {
        _haContext.CallService("counter", "set_value", target, new CounterSetValueParameters { Value = value });
    }
}

public partial record CounterSetValueParameters
{
    ///<summary>The new counter value the entity should be set to.</summary>
    [JsonPropertyName("value")]
    public double? Value { get; init; }
}

public partial class CoverServices
{
    private readonly IHaContext _haContext;
    public CoverServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Closes a cover.</summary>
    ///<param name="target">The target for this service call</param>
    public void CloseCover(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("cover", "close_cover", target, data);
    }

    ///<summary>Tilts a cover to close.</summary>
    ///<param name="target">The target for this service call</param>
    public void CloseCoverTilt(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("cover", "close_cover_tilt", target, data);
    }

    ///<summary>Opens a cover.</summary>
    ///<param name="target">The target for this service call</param>
    public void OpenCover(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("cover", "open_cover", target, data);
    }

    ///<summary>Tilts a cover open.</summary>
    ///<param name="target">The target for this service call</param>
    public void OpenCoverTilt(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("cover", "open_cover_tilt", target, data);
    }

    ///<summary>Moves a cover to a specific position.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetCoverPosition(ServiceTarget target, CoverSetCoverPositionParameters data)
    {
        _haContext.CallService("cover", "set_cover_position", target, data);
    }

    ///<summary>Moves a cover to a specific position.</summary>
    ///<param name="position">Target position.</param>
    public void SetCoverPosition(ServiceTarget target, double position)
    {
        _haContext.CallService("cover", "set_cover_position", target, new CoverSetCoverPositionParameters { Position = position });
    }

    ///<summary>Moves a cover tilt to a specific position.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetCoverTiltPosition(ServiceTarget target, CoverSetCoverTiltPositionParameters data)
    {
        _haContext.CallService("cover", "set_cover_tilt_position", target, data);
    }

    ///<summary>Moves a cover tilt to a specific position.</summary>
    ///<param name="tiltPosition">Target tilt positition.</param>
    public void SetCoverTiltPosition(ServiceTarget target, double tiltPosition)
    {
        _haContext.CallService("cover", "set_cover_tilt_position", target, new CoverSetCoverTiltPositionParameters { TiltPosition = tiltPosition });
    }

    ///<summary>Stops the cover movement.</summary>
    ///<param name="target">The target for this service call</param>
    public void StopCover(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("cover", "stop_cover", target, data);
    }

    ///<summary>Stops a tilting cover movement.</summary>
    ///<param name="target">The target for this service call</param>
    public void StopCoverTilt(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("cover", "stop_cover_tilt", target, data);
    }

    ///<summary>Toggles a cover open/closed.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("cover", "toggle", target, data);
    }

    ///<summary>Toggles a cover tilt open/closed.</summary>
    ///<param name="target">The target for this service call</param>
    public void ToggleCoverTilt(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("cover", "toggle_cover_tilt", target, data);
    }
}

public partial record CoverSetCoverPositionParameters
{
    ///<summary>Target position.</summary>
    [JsonPropertyName("position")]
    public double? Position { get; init; }
}

public partial record CoverSetCoverTiltPositionParameters
{
    ///<summary>Target tilt positition.</summary>
    [JsonPropertyName("tilt_position")]
    public double? TiltPosition { get; init; }
}

public partial class DeviceTrackerServices
{
    private readonly IHaContext _haContext;
    public DeviceTrackerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Manually update the records of a seen legacy device tracker in the known_devices.yaml file.</summary>
    public void See(DeviceTrackerSeeParameters data)
    {
        _haContext.CallService("device_tracker", "see", null, data);
    }

    ///<summary>Manually update the records of a seen legacy device tracker in the known_devices.yaml file.</summary>
    ///<param name="mac">MAC address of the device. eg: FF:FF:FF:FF:FF:FF</param>
    ///<param name="devId">ID of the device (find the ID in `known_devices.yaml`). eg: phonedave</param>
    ///<param name="hostName">Hostname of the device. eg: Dave</param>
    ///<param name="locationName">Name of the location where the device is located. The options are: `home`, `not_home`, or the name of the zone. eg: home</param>
    ///<param name="gps">GPS coordinates where the device is located, specified by latitude and longitude (for example: [51.513845, -0.100539]). eg: [51.509802, -0.086692]</param>
    ///<param name="gpsAccuracy">Accuracy of the GPS coordinates.</param>
    ///<param name="battery">Battery level of the device.</param>
    public void See(string? mac = null, string? devId = null, string? hostName = null, string? locationName = null, object? gps = null, double? gpsAccuracy = null, double? battery = null)
    {
        _haContext.CallService("device_tracker", "see", null, new DeviceTrackerSeeParameters { Mac = mac, DevId = devId, HostName = hostName, LocationName = locationName, Gps = gps, GpsAccuracy = gpsAccuracy, Battery = battery });
    }
}

public partial record DeviceTrackerSeeParameters
{
    ///<summary>MAC address of the device. eg: FF:FF:FF:FF:FF:FF</summary>
    [JsonPropertyName("mac")]
    public string? Mac { get; init; }

    ///<summary>ID of the device (find the ID in `known_devices.yaml`). eg: phonedave</summary>
    [JsonPropertyName("dev_id")]
    public string? DevId { get; init; }

    ///<summary>Hostname of the device. eg: Dave</summary>
    [JsonPropertyName("host_name")]
    public string? HostName { get; init; }

    ///<summary>Name of the location where the device is located. The options are: `home`, `not_home`, or the name of the zone. eg: home</summary>
    [JsonPropertyName("location_name")]
    public string? LocationName { get; init; }

    ///<summary>GPS coordinates where the device is located, specified by latitude and longitude (for example: [51.513845, -0.100539]). eg: [51.509802, -0.086692]</summary>
    [JsonPropertyName("gps")]
    public object? Gps { get; init; }

    ///<summary>Accuracy of the GPS coordinates.</summary>
    [JsonPropertyName("gps_accuracy")]
    public double? GpsAccuracy { get; init; }

    ///<summary>Battery level of the device.</summary>
    [JsonPropertyName("battery")]
    public double? Battery { get; init; }
}

public partial class EsphomeServices
{
    private readonly IHaContext _haContext;
    public EsphomeServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Calls the service start_water of the node water-pump</summary>
    public void WaterPumpStartWater(object? data = null)
    {
        _haContext.CallService("esphome", "water_pump_start_water", null, data);
    }
}

public partial class FanServices
{
    private readonly IHaContext _haContext;
    public FanServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Decreases the speed of a fan.</summary>
    ///<param name="target">The target for this service call</param>
    public void DecreaseSpeed(ServiceTarget target, FanDecreaseSpeedParameters data)
    {
        _haContext.CallService("fan", "decrease_speed", target, data);
    }

    ///<summary>Decreases the speed of a fan.</summary>
    ///<param name="percentageStep">Percentage step by which the speed should be decreased.</param>
    public void DecreaseSpeed(ServiceTarget target, double? percentageStep = null)
    {
        _haContext.CallService("fan", "decrease_speed", target, new FanDecreaseSpeedParameters { PercentageStep = percentageStep });
    }

    ///<summary>Increases the speed of a fan.</summary>
    ///<param name="target">The target for this service call</param>
    public void IncreaseSpeed(ServiceTarget target, FanIncreaseSpeedParameters data)
    {
        _haContext.CallService("fan", "increase_speed", target, data);
    }

    ///<summary>Increases the speed of a fan.</summary>
    ///<param name="percentageStep">Percentage step by which the speed should be increased.</param>
    public void IncreaseSpeed(ServiceTarget target, double? percentageStep = null)
    {
        _haContext.CallService("fan", "increase_speed", target, new FanIncreaseSpeedParameters { PercentageStep = percentageStep });
    }

    ///<summary>Controls the oscillation of a fan.</summary>
    ///<param name="target">The target for this service call</param>
    public void Oscillate(ServiceTarget target, FanOscillateParameters data)
    {
        _haContext.CallService("fan", "oscillate", target, data);
    }

    ///<summary>Controls the oscillation of a fan.</summary>
    ///<param name="oscillating">Turns oscillation on/off.</param>
    public void Oscillate(ServiceTarget target, bool oscillating)
    {
        _haContext.CallService("fan", "oscillate", target, new FanOscillateParameters { Oscillating = oscillating });
    }

    ///<summary>Sets a fan&apos;s rotation direction.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetDirection(ServiceTarget target, FanSetDirectionParameters data)
    {
        _haContext.CallService("fan", "set_direction", target, data);
    }

    ///<summary>Sets a fan&apos;s rotation direction.</summary>
    ///<param name="direction">Direction of the fan rotation.</param>
    public void SetDirection(ServiceTarget target, object direction)
    {
        _haContext.CallService("fan", "set_direction", target, new FanSetDirectionParameters { Direction = direction });
    }

    ///<summary>Sets the speed of a fan.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetPercentage(ServiceTarget target, FanSetPercentageParameters data)
    {
        _haContext.CallService("fan", "set_percentage", target, data);
    }

    ///<summary>Sets the speed of a fan.</summary>
    ///<param name="percentage">Speed of the fan.</param>
    public void SetPercentage(ServiceTarget target, double percentage)
    {
        _haContext.CallService("fan", "set_percentage", target, new FanSetPercentageParameters { Percentage = percentage });
    }

    ///<summary>Sets preset fan mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetPresetMode(ServiceTarget target, FanSetPresetModeParameters data)
    {
        _haContext.CallService("fan", "set_preset_mode", target, data);
    }

    ///<summary>Sets preset fan mode.</summary>
    ///<param name="presetMode">Preset fan mode. eg: auto</param>
    public void SetPresetMode(ServiceTarget target, string presetMode)
    {
        _haContext.CallService("fan", "set_preset_mode", target, new FanSetPresetModeParameters { PresetMode = presetMode });
    }

    ///<summary>Toggles a fan on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("fan", "toggle", target, data);
    }

    ///<summary>Turns fan off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("fan", "turn_off", target, data);
    }

    ///<summary>Turns fan on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, FanTurnOnParameters data)
    {
        _haContext.CallService("fan", "turn_on", target, data);
    }

    ///<summary>Turns fan on.</summary>
    ///<param name="percentage">Speed of the fan.</param>
    ///<param name="presetMode">Preset fan mode. eg: auto</param>
    public void TurnOn(ServiceTarget target, double? percentage = null, string? presetMode = null)
    {
        _haContext.CallService("fan", "turn_on", target, new FanTurnOnParameters { Percentage = percentage, PresetMode = presetMode });
    }
}

public partial record FanDecreaseSpeedParameters
{
    ///<summary>Percentage step by which the speed should be decreased.</summary>
    [JsonPropertyName("percentage_step")]
    public double? PercentageStep { get; init; }
}

public partial record FanIncreaseSpeedParameters
{
    ///<summary>Percentage step by which the speed should be increased.</summary>
    [JsonPropertyName("percentage_step")]
    public double? PercentageStep { get; init; }
}

public partial record FanOscillateParameters
{
    ///<summary>Turns oscillation on/off.</summary>
    [JsonPropertyName("oscillating")]
    public bool? Oscillating { get; init; }
}

public partial record FanSetDirectionParameters
{
    ///<summary>Direction of the fan rotation.</summary>
    [JsonPropertyName("direction")]
    public object? Direction { get; init; }
}

public partial record FanSetPercentageParameters
{
    ///<summary>Speed of the fan.</summary>
    [JsonPropertyName("percentage")]
    public double? Percentage { get; init; }
}

public partial record FanSetPresetModeParameters
{
    ///<summary>Preset fan mode. eg: auto</summary>
    [JsonPropertyName("preset_mode")]
    public string? PresetMode { get; init; }
}

public partial record FanTurnOnParameters
{
    ///<summary>Speed of the fan.</summary>
    [JsonPropertyName("percentage")]
    public double? Percentage { get; init; }

    ///<summary>Preset fan mode. eg: auto</summary>
    [JsonPropertyName("preset_mode")]
    public string? PresetMode { get; init; }
}

public partial class FfmpegServices
{
    private readonly IHaContext _haContext;
    public FfmpegServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sends a restart command to a ffmpeg based sensor.</summary>
    public void Restart(FfmpegRestartParameters data)
    {
        _haContext.CallService("ffmpeg", "restart", null, data);
    }

    ///<summary>Sends a restart command to a ffmpeg based sensor.</summary>
    ///<param name="entityId">Name of entity that will restart. Platform dependent.</param>
    public void Restart(string? entityId = null)
    {
        _haContext.CallService("ffmpeg", "restart", null, new FfmpegRestartParameters { EntityId = entityId });
    }

    ///<summary>Sends a start command to a ffmpeg based sensor.</summary>
    public void Start(FfmpegStartParameters data)
    {
        _haContext.CallService("ffmpeg", "start", null, data);
    }

    ///<summary>Sends a start command to a ffmpeg based sensor.</summary>
    ///<param name="entityId">Name of entity that will start. Platform dependent.</param>
    public void Start(string? entityId = null)
    {
        _haContext.CallService("ffmpeg", "start", null, new FfmpegStartParameters { EntityId = entityId });
    }

    ///<summary>Sends a stop command to a ffmpeg based sensor.</summary>
    public void Stop(FfmpegStopParameters data)
    {
        _haContext.CallService("ffmpeg", "stop", null, data);
    }

    ///<summary>Sends a stop command to a ffmpeg based sensor.</summary>
    ///<param name="entityId">Name of entity that will stop. Platform dependent.</param>
    public void Stop(string? entityId = null)
    {
        _haContext.CallService("ffmpeg", "stop", null, new FfmpegStopParameters { EntityId = entityId });
    }
}

public partial record FfmpegRestartParameters
{
    ///<summary>Name of entity that will restart. Platform dependent.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }
}

public partial record FfmpegStartParameters
{
    ///<summary>Name of entity that will start. Platform dependent.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }
}

public partial record FfmpegStopParameters
{
    ///<summary>Name of entity that will stop. Platform dependent.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }
}

public partial class FrontendServices
{
    private readonly IHaContext _haContext;
    public FrontendServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads themes from the YAML-configuration.</summary>
    public void ReloadThemes(object? data = null)
    {
        _haContext.CallService("frontend", "reload_themes", null, data);
    }

    ///<summary>Sets the default theme Home Assistant uses. Can be overridden by a user.</summary>
    public void SetTheme(FrontendSetThemeParameters data)
    {
        _haContext.CallService("frontend", "set_theme", null, data);
    }

    ///<summary>Sets the default theme Home Assistant uses. Can be overridden by a user.</summary>
    ///<param name="name">Name of a theme. eg: default</param>
    ///<param name="mode">Theme mode.</param>
    public void SetTheme(object name, object? mode = null)
    {
        _haContext.CallService("frontend", "set_theme", null, new FrontendSetThemeParameters { Name = name, Mode = mode });
    }
}

public partial record FrontendSetThemeParameters
{
    ///<summary>Name of a theme. eg: default</summary>
    [JsonPropertyName("name")]
    public object? Name { get; init; }

    ///<summary>Theme mode.</summary>
    [JsonPropertyName("mode")]
    public object? Mode { get; init; }
}

public partial class GoogleServices
{
    private readonly IHaContext _haContext;
    public GoogleServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Adds a new calendar event.</summary>
    public void AddEvent(GoogleAddEventParameters data)
    {
        _haContext.CallService("google", "add_event", null, data);
    }

    ///<summary>Adds a new calendar event.</summary>
    ///<param name="calendarId">The id of the calendar you want. eg: Your email</param>
    ///<param name="summary">Acts as the title of the event. eg: Bowling</param>
    ///<param name="description">The description of the event. Optional. eg: Birthday bowling</param>
    ///<param name="startDateTime">The date and time the event should start. eg: 2019-03-22 20:00:00</param>
    ///<param name="endDateTime">The date and time the event should end. eg: 2019-03-22 22:00:00</param>
    ///<param name="startDate">The date the whole day event should start. eg: 2019-03-10</param>
    ///<param name="endDate">The date the whole day event should end. eg: 2019-03-11</param>
    ///<param name="in">Days or weeks that you want to create the event in. eg: &quot;days&quot;: 2 or &quot;weeks&quot;: 2</param>
    public void AddEvent(string calendarId, string summary, string? description = null, string? startDateTime = null, string? endDateTime = null, string? startDate = null, string? endDate = null, object? @in = null)
    {
        _haContext.CallService("google", "add_event", null, new GoogleAddEventParameters { CalendarId = calendarId, Summary = summary, Description = description, StartDateTime = startDateTime, EndDateTime = endDateTime, StartDate = startDate, EndDate = endDate, In = @in });
    }

    ///<summary>Adds a new calendar event.</summary>
    ///<param name="target">The target for this service call</param>
    public void CreateEvent(ServiceTarget target, GoogleCreateEventParameters data)
    {
        _haContext.CallService("google", "create_event", target, data);
    }

    ///<summary>Adds a new calendar event.</summary>
    ///<param name="summary">Acts as the title of the event. eg: Bowling</param>
    ///<param name="description">The description of the event. Optional. eg: Birthday bowling</param>
    ///<param name="startDateTime">The date and time the event should start. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">The date and time the event should end. eg: 2022-03-22 22:00:00</param>
    ///<param name="startDate">The date the whole day event should start. eg: 2022-03-10</param>
    ///<param name="endDate">The date the whole day event should end. eg: 2022-03-11</param>
    ///<param name="in">Days or weeks that you want to create the event in. eg: &quot;days&quot;: 2 or &quot;weeks&quot;: 2</param>
    ///<param name="location">The location of the event. Optional. eg: Conference Room - F123, Bldg. 002</param>
    public void CreateEvent(ServiceTarget target, string summary, string? description = null, string? startDateTime = null, string? endDateTime = null, string? startDate = null, string? endDate = null, object? @in = null, string? location = null)
    {
        _haContext.CallService("google", "create_event", target, new GoogleCreateEventParameters { Summary = summary, Description = description, StartDateTime = startDateTime, EndDateTime = endDateTime, StartDate = startDate, EndDate = endDate, In = @in, Location = location });
    }
}

public partial record GoogleAddEventParameters
{
    ///<summary>The id of the calendar you want. eg: Your email</summary>
    [JsonPropertyName("calendar_id")]
    public string? CalendarId { get; init; }

    ///<summary>Acts as the title of the event. eg: Bowling</summary>
    [JsonPropertyName("summary")]
    public string? Summary { get; init; }

    ///<summary>The description of the event. Optional. eg: Birthday bowling</summary>
    [JsonPropertyName("description")]
    public string? Description { get; init; }

    ///<summary>The date and time the event should start. eg: 2019-03-22 20:00:00</summary>
    [JsonPropertyName("start_date_time")]
    public string? StartDateTime { get; init; }

    ///<summary>The date and time the event should end. eg: 2019-03-22 22:00:00</summary>
    [JsonPropertyName("end_date_time")]
    public string? EndDateTime { get; init; }

    ///<summary>The date the whole day event should start. eg: 2019-03-10</summary>
    [JsonPropertyName("start_date")]
    public string? StartDate { get; init; }

    ///<summary>The date the whole day event should end. eg: 2019-03-11</summary>
    [JsonPropertyName("end_date")]
    public string? EndDate { get; init; }

    ///<summary>Days or weeks that you want to create the event in. eg: &quot;days&quot;: 2 or &quot;weeks&quot;: 2</summary>
    [JsonPropertyName("in")]
    public object? In { get; init; }
}

public partial record GoogleCreateEventParameters
{
    ///<summary>Acts as the title of the event. eg: Bowling</summary>
    [JsonPropertyName("summary")]
    public string? Summary { get; init; }

    ///<summary>The description of the event. Optional. eg: Birthday bowling</summary>
    [JsonPropertyName("description")]
    public string? Description { get; init; }

    ///<summary>The date and time the event should start. eg: 2022-03-22 20:00:00</summary>
    [JsonPropertyName("start_date_time")]
    public string? StartDateTime { get; init; }

    ///<summary>The date and time the event should end. eg: 2022-03-22 22:00:00</summary>
    [JsonPropertyName("end_date_time")]
    public string? EndDateTime { get; init; }

    ///<summary>The date the whole day event should start. eg: 2022-03-10</summary>
    [JsonPropertyName("start_date")]
    public string? StartDate { get; init; }

    ///<summary>The date the whole day event should end. eg: 2022-03-11</summary>
    [JsonPropertyName("end_date")]
    public string? EndDate { get; init; }

    ///<summary>Days or weeks that you want to create the event in. eg: &quot;days&quot;: 2 or &quot;weeks&quot;: 2</summary>
    [JsonPropertyName("in")]
    public object? In { get; init; }

    ///<summary>The location of the event. Optional. eg: Conference Room - F123, Bldg. 002</summary>
    [JsonPropertyName("location")]
    public string? Location { get; init; }
}

public partial class GoogleGenerativeAiConversationServices
{
    private readonly IHaContext _haContext;
    public GoogleGenerativeAiConversationServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Generate content from a prompt consisting of text and optionally images</summary>
    public void GenerateContent(GoogleGenerativeAiConversationGenerateContentParameters data)
    {
        _haContext.CallService("google_generative_ai_conversation", "generate_content", null, data);
    }

    ///<summary>Generate content from a prompt consisting of text and optionally images</summary>
    ///<param name="prompt">The prompt eg: Describe what you see in these images</param>
    ///<param name="imageFilename">Images eg: /config/www/image.jpg</param>
    public void GenerateContent(string prompt, object? imageFilename = null)
    {
        _haContext.CallService("google_generative_ai_conversation", "generate_content", null, new GoogleGenerativeAiConversationGenerateContentParameters { Prompt = prompt, ImageFilename = imageFilename });
    }

    ///<summary>Generate content from a prompt consisting of text and optionally images</summary>
    public Task<JsonElement?> GenerateContentAsync(GoogleGenerativeAiConversationGenerateContentParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("google_generative_ai_conversation", "generate_content", null, data);
    }

    ///<summary>Generate content from a prompt consisting of text and optionally images</summary>
    ///<param name="prompt">The prompt eg: Describe what you see in these images</param>
    ///<param name="imageFilename">Images eg: /config/www/image.jpg</param>
    public Task<JsonElement?> GenerateContentAsync(string prompt, object? imageFilename = null)
    {
        return _haContext.CallServiceWithResponseAsync("google_generative_ai_conversation", "generate_content", null, new GoogleGenerativeAiConversationGenerateContentParameters { Prompt = prompt, ImageFilename = imageFilename });
    }
}

public partial record GoogleGenerativeAiConversationGenerateContentParameters
{
    ///<summary>The prompt eg: Describe what you see in these images</summary>
    [JsonPropertyName("prompt")]
    public string? Prompt { get; init; }

    ///<summary>Images eg: /config/www/image.jpg</summary>
    [JsonPropertyName("image_filename")]
    public object? ImageFilename { get; init; }
}

public partial class HabiticaServices
{
    private readonly IHaContext _haContext;
    public HabiticaServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Terminate your party&apos;s ongoing quest. All progress will be lost and the quest roll returned to the owner&apos;s inventory. Only quest leader or group leader can perform this action.</summary>
    public void AbortQuest(HabiticaAbortQuestParameters data)
    {
        _haContext.CallService("habitica", "abort_quest", null, data);
    }

    ///<summary>Terminate your party&apos;s ongoing quest. All progress will be lost and the quest roll returned to the owner&apos;s inventory. Only quest leader or group leader can perform this action.</summary>
    ///<param name="configEntry">Choose the Habitica character for which to perform the action.</param>
    public void AbortQuest(object configEntry)
    {
        _haContext.CallService("habitica", "abort_quest", null, new HabiticaAbortQuestParameters { ConfigEntry = configEntry });
    }

    ///<summary>Terminate your party&apos;s ongoing quest. All progress will be lost and the quest roll returned to the owner&apos;s inventory. Only quest leader or group leader can perform this action.</summary>
    public Task<JsonElement?> AbortQuestAsync(HabiticaAbortQuestParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("habitica", "abort_quest", null, data);
    }

    ///<summary>Terminate your party&apos;s ongoing quest. All progress will be lost and the quest roll returned to the owner&apos;s inventory. Only quest leader or group leader can perform this action.</summary>
    ///<param name="configEntry">Choose the Habitica character for which to perform the action.</param>
    public Task<JsonElement?> AbortQuestAsync(object configEntry)
    {
        return _haContext.CallServiceWithResponseAsync("habitica", "abort_quest", null, new HabiticaAbortQuestParameters { ConfigEntry = configEntry });
    }

    ///<summary>Accept a pending invitation to a quest.</summary>
    public void AcceptQuest(HabiticaAcceptQuestParameters data)
    {
        _haContext.CallService("habitica", "accept_quest", null, data);
    }

    ///<summary>Accept a pending invitation to a quest.</summary>
    ///<param name="configEntry">Choose the Habitica character for which to perform the action.</param>
    public void AcceptQuest(object configEntry)
    {
        _haContext.CallService("habitica", "accept_quest", null, new HabiticaAcceptQuestParameters { ConfigEntry = configEntry });
    }

    ///<summary>Accept a pending invitation to a quest.</summary>
    public Task<JsonElement?> AcceptQuestAsync(HabiticaAcceptQuestParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("habitica", "accept_quest", null, data);
    }

    ///<summary>Accept a pending invitation to a quest.</summary>
    ///<param name="configEntry">Choose the Habitica character for which to perform the action.</param>
    public Task<JsonElement?> AcceptQuestAsync(object configEntry)
    {
        return _haContext.CallServiceWithResponseAsync("habitica", "accept_quest", null, new HabiticaAcceptQuestParameters { ConfigEntry = configEntry });
    }

    ///<summary>Calls Habitica API.</summary>
    public void ApiCall(HabiticaApiCallParameters data)
    {
        _haContext.CallService("habitica", "api_call", null, data);
    }

    ///<summary>Calls Habitica API.</summary>
    ///<param name="name">Habitica&apos;s username to call for. eg: xxxNotAValidNickxxx</param>
    ///<param name="path">Items from API URL in form of an array with method attached at the end. Consult https://habitica.com/apidoc/. Example uses https://habitica.com/apidoc/#api-Task-CreateUserTasks. eg: [&quot;tasks&quot;, &quot;user&quot;, &quot;post&quot;]</param>
    ///<param name="args">Any additional JSON or URL parameter arguments. See apidoc mentioned for path. Example uses same API endpoint. eg: {&quot;text&quot;: &quot;Use API from Home Assistant&quot;, &quot;type&quot;: &quot;todo&quot;}</param>
    public void ApiCall(string name, object path, object? args = null)
    {
        _haContext.CallService("habitica", "api_call", null, new HabiticaApiCallParameters { Name = name, Path = path, Args = args });
    }

    ///<summary>Cancel a quest that has not yet startet. All accepted and pending invitations will be canceled and the quest roll returned to the owner&apos;s inventory. Only quest leader or group leader can perform this action.</summary>
    public void CancelQuest(HabiticaCancelQuestParameters data)
    {
        _haContext.CallService("habitica", "cancel_quest", null, data);
    }

    ///<summary>Cancel a quest that has not yet startet. All accepted and pending invitations will be canceled and the quest roll returned to the owner&apos;s inventory. Only quest leader or group leader can perform this action.</summary>
    ///<param name="configEntry">Choose the Habitica character for which to perform the action.</param>
    public void CancelQuest(object configEntry)
    {
        _haContext.CallService("habitica", "cancel_quest", null, new HabiticaCancelQuestParameters { ConfigEntry = configEntry });
    }

    ///<summary>Cancel a quest that has not yet startet. All accepted and pending invitations will be canceled and the quest roll returned to the owner&apos;s inventory. Only quest leader or group leader can perform this action.</summary>
    public Task<JsonElement?> CancelQuestAsync(HabiticaCancelQuestParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("habitica", "cancel_quest", null, data);
    }

    ///<summary>Cancel a quest that has not yet startet. All accepted and pending invitations will be canceled and the quest roll returned to the owner&apos;s inventory. Only quest leader or group leader can perform this action.</summary>
    ///<param name="configEntry">Choose the Habitica character for which to perform the action.</param>
    public Task<JsonElement?> CancelQuestAsync(object configEntry)
    {
        return _haContext.CallServiceWithResponseAsync("habitica", "cancel_quest", null, new HabiticaCancelQuestParameters { ConfigEntry = configEntry });
    }

    ///<summary>Use a skill or spell from your Habitica character on a specific task to affect its progress or status.</summary>
    public void CastSkill(HabiticaCastSkillParameters data)
    {
        _haContext.CallService("habitica", "cast_skill", null, data);
    }

    ///<summary>Use a skill or spell from your Habitica character on a specific task to affect its progress or status.</summary>
    ///<param name="configEntry">Choose the Habitica character to cast the skill.</param>
    ///<param name="skill">Select the skill or spell you want to cast on the task. Only skills corresponding to your character&apos;s class can be used.</param>
    ///<param name="task">The name (or task ID) of the task you want to target with the skill or spell.</param>
    public void CastSkill(object configEntry, object skill, string task)
    {
        _haContext.CallService("habitica", "cast_skill", null, new HabiticaCastSkillParameters { ConfigEntry = configEntry, Skill = skill, Task = task });
    }

    ///<summary>Use a skill or spell from your Habitica character on a specific task to affect its progress or status.</summary>
    public Task<JsonElement?> CastSkillAsync(HabiticaCastSkillParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("habitica", "cast_skill", null, data);
    }

    ///<summary>Use a skill or spell from your Habitica character on a specific task to affect its progress or status.</summary>
    ///<param name="configEntry">Choose the Habitica character to cast the skill.</param>
    ///<param name="skill">Select the skill or spell you want to cast on the task. Only skills corresponding to your character&apos;s class can be used.</param>
    ///<param name="task">The name (or task ID) of the task you want to target with the skill or spell.</param>
    public Task<JsonElement?> CastSkillAsync(object configEntry, object skill, string task)
    {
        return _haContext.CallServiceWithResponseAsync("habitica", "cast_skill", null, new HabiticaCastSkillParameters { ConfigEntry = configEntry, Skill = skill, Task = task });
    }

    ///<summary>Leave the current quest you are participating in.</summary>
    public void LeaveQuest(HabiticaLeaveQuestParameters data)
    {
        _haContext.CallService("habitica", "leave_quest", null, data);
    }

    ///<summary>Leave the current quest you are participating in.</summary>
    ///<param name="configEntry">Choose the Habitica character for which to perform the action.</param>
    public void LeaveQuest(object configEntry)
    {
        _haContext.CallService("habitica", "leave_quest", null, new HabiticaLeaveQuestParameters { ConfigEntry = configEntry });
    }

    ///<summary>Leave the current quest you are participating in.</summary>
    public Task<JsonElement?> LeaveQuestAsync(HabiticaLeaveQuestParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("habitica", "leave_quest", null, data);
    }

    ///<summary>Leave the current quest you are participating in.</summary>
    ///<param name="configEntry">Choose the Habitica character for which to perform the action.</param>
    public Task<JsonElement?> LeaveQuestAsync(object configEntry)
    {
        return _haContext.CallServiceWithResponseAsync("habitica", "leave_quest", null, new HabiticaLeaveQuestParameters { ConfigEntry = configEntry });
    }

    ///<summary>Reject a pending invitation to a quest.</summary>
    public void RejectQuest(HabiticaRejectQuestParameters data)
    {
        _haContext.CallService("habitica", "reject_quest", null, data);
    }

    ///<summary>Reject a pending invitation to a quest.</summary>
    ///<param name="configEntry">Choose the Habitica character for which to perform the action.</param>
    public void RejectQuest(object configEntry)
    {
        _haContext.CallService("habitica", "reject_quest", null, new HabiticaRejectQuestParameters { ConfigEntry = configEntry });
    }

    ///<summary>Reject a pending invitation to a quest.</summary>
    public Task<JsonElement?> RejectQuestAsync(HabiticaRejectQuestParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("habitica", "reject_quest", null, data);
    }

    ///<summary>Reject a pending invitation to a quest.</summary>
    ///<param name="configEntry">Choose the Habitica character for which to perform the action.</param>
    public Task<JsonElement?> RejectQuestAsync(object configEntry)
    {
        return _haContext.CallServiceWithResponseAsync("habitica", "reject_quest", null, new HabiticaRejectQuestParameters { ConfigEntry = configEntry });
    }

    ///<summary>Increase the positive or negative streak of a habit to track its progress.</summary>
    public void ScoreHabit(HabiticaScoreHabitParameters data)
    {
        _haContext.CallService("habitica", "score_habit", null, data);
    }

    ///<summary>Increase the positive or negative streak of a habit to track its progress.</summary>
    ///<param name="configEntry">Select the Habitica character tracking your habit.</param>
    ///<param name="task">The name (or task ID) of the Habitica habit.</param>
    ///<param name="direction">Is it positive or negative progress you want to track for your habit.</param>
    public void ScoreHabit(object configEntry, string task, object direction)
    {
        _haContext.CallService("habitica", "score_habit", null, new HabiticaScoreHabitParameters { ConfigEntry = configEntry, Task = task, Direction = direction });
    }

    ///<summary>Increase the positive or negative streak of a habit to track its progress.</summary>
    public Task<JsonElement?> ScoreHabitAsync(HabiticaScoreHabitParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("habitica", "score_habit", null, data);
    }

    ///<summary>Increase the positive or negative streak of a habit to track its progress.</summary>
    ///<param name="configEntry">Select the Habitica character tracking your habit.</param>
    ///<param name="task">The name (or task ID) of the Habitica habit.</param>
    ///<param name="direction">Is it positive or negative progress you want to track for your habit.</param>
    public Task<JsonElement?> ScoreHabitAsync(object configEntry, string task, object direction)
    {
        return _haContext.CallServiceWithResponseAsync("habitica", "score_habit", null, new HabiticaScoreHabitParameters { ConfigEntry = configEntry, Task = task, Direction = direction });
    }

    ///<summary>Reward yourself and buy one of your custom rewards with gold earned by fulfilling tasks.</summary>
    public void ScoreReward(HabiticaScoreRewardParameters data)
    {
        _haContext.CallService("habitica", "score_reward", null, data);
    }

    ///<summary>Reward yourself and buy one of your custom rewards with gold earned by fulfilling tasks.</summary>
    ///<param name="configEntry">Select the Habitica character buying the reward.</param>
    ///<param name="task">The name (or task ID) of the custom reward.</param>
    public void ScoreReward(object configEntry, string task)
    {
        _haContext.CallService("habitica", "score_reward", null, new HabiticaScoreRewardParameters { ConfigEntry = configEntry, Task = task });
    }

    ///<summary>Reward yourself and buy one of your custom rewards with gold earned by fulfilling tasks.</summary>
    public Task<JsonElement?> ScoreRewardAsync(HabiticaScoreRewardParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("habitica", "score_reward", null, data);
    }

    ///<summary>Reward yourself and buy one of your custom rewards with gold earned by fulfilling tasks.</summary>
    ///<param name="configEntry">Select the Habitica character buying the reward.</param>
    ///<param name="task">The name (or task ID) of the custom reward.</param>
    public Task<JsonElement?> ScoreRewardAsync(object configEntry, string task)
    {
        return _haContext.CallServiceWithResponseAsync("habitica", "score_reward", null, new HabiticaScoreRewardParameters { ConfigEntry = configEntry, Task = task });
    }

    ///<summary>Begin the quest immediately, bypassing any pending invitations that haven&apos;t been accepted or rejected. Only quest leader or group leader can perform this action.</summary>
    public void StartQuest(HabiticaStartQuestParameters data)
    {
        _haContext.CallService("habitica", "start_quest", null, data);
    }

    ///<summary>Begin the quest immediately, bypassing any pending invitations that haven&apos;t been accepted or rejected. Only quest leader or group leader can perform this action.</summary>
    ///<param name="configEntry">Choose the Habitica character for which to perform the action.</param>
    public void StartQuest(object configEntry)
    {
        _haContext.CallService("habitica", "start_quest", null, new HabiticaStartQuestParameters { ConfigEntry = configEntry });
    }

    ///<summary>Begin the quest immediately, bypassing any pending invitations that haven&apos;t been accepted or rejected. Only quest leader or group leader can perform this action.</summary>
    public Task<JsonElement?> StartQuestAsync(HabiticaStartQuestParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("habitica", "start_quest", null, data);
    }

    ///<summary>Begin the quest immediately, bypassing any pending invitations that haven&apos;t been accepted or rejected. Only quest leader or group leader can perform this action.</summary>
    ///<param name="configEntry">Choose the Habitica character for which to perform the action.</param>
    public Task<JsonElement?> StartQuestAsync(object configEntry)
    {
        return _haContext.CallServiceWithResponseAsync("habitica", "start_quest", null, new HabiticaStartQuestParameters { ConfigEntry = configEntry });
    }

    ///<summary>Use a transformation item from your Habitica character&apos;s inventory on a member of your party or yourself.</summary>
    public void Transformation(HabiticaTransformationParameters data)
    {
        _haContext.CallService("habitica", "transformation", null, data);
    }

    ///<summary>Use a transformation item from your Habitica character&apos;s inventory on a member of your party or yourself.</summary>
    ///<param name="configEntry">Choose the Habitica character to use the transformation item.</param>
    ///<param name="item">Select the transformation item you want to use. Item must be in the characters inventory.</param>
    ///<param name="target">The name of the character you want to use the transformation item on. You can also specify the players username or user ID.</param>
    public void Transformation(object configEntry, object item, string target)
    {
        _haContext.CallService("habitica", "transformation", null, new HabiticaTransformationParameters { ConfigEntry = configEntry, Item = item, Target = target });
    }

    ///<summary>Use a transformation item from your Habitica character&apos;s inventory on a member of your party or yourself.</summary>
    public Task<JsonElement?> TransformationAsync(HabiticaTransformationParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("habitica", "transformation", null, data);
    }

    ///<summary>Use a transformation item from your Habitica character&apos;s inventory on a member of your party or yourself.</summary>
    ///<param name="configEntry">Choose the Habitica character to use the transformation item.</param>
    ///<param name="item">Select the transformation item you want to use. Item must be in the characters inventory.</param>
    ///<param name="target">The name of the character you want to use the transformation item on. You can also specify the players username or user ID.</param>
    public Task<JsonElement?> TransformationAsync(object configEntry, object item, string target)
    {
        return _haContext.CallServiceWithResponseAsync("habitica", "transformation", null, new HabiticaTransformationParameters { ConfigEntry = configEntry, Item = item, Target = target });
    }
}

public partial record HabiticaAbortQuestParameters
{
    ///<summary>Choose the Habitica character for which to perform the action.</summary>
    [JsonPropertyName("config_entry")]
    public object? ConfigEntry { get; init; }
}

public partial record HabiticaAcceptQuestParameters
{
    ///<summary>Choose the Habitica character for which to perform the action.</summary>
    [JsonPropertyName("config_entry")]
    public object? ConfigEntry { get; init; }
}

public partial record HabiticaApiCallParameters
{
    ///<summary>Habitica&apos;s username to call for. eg: xxxNotAValidNickxxx</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>Items from API URL in form of an array with method attached at the end. Consult https://habitica.com/apidoc/. Example uses https://habitica.com/apidoc/#api-Task-CreateUserTasks. eg: [&quot;tasks&quot;, &quot;user&quot;, &quot;post&quot;]</summary>
    [JsonPropertyName("path")]
    public object? Path { get; init; }

    ///<summary>Any additional JSON or URL parameter arguments. See apidoc mentioned for path. Example uses same API endpoint. eg: {&quot;text&quot;: &quot;Use API from Home Assistant&quot;, &quot;type&quot;: &quot;todo&quot;}</summary>
    [JsonPropertyName("args")]
    public object? Args { get; init; }
}

public partial record HabiticaCancelQuestParameters
{
    ///<summary>Choose the Habitica character for which to perform the action.</summary>
    [JsonPropertyName("config_entry")]
    public object? ConfigEntry { get; init; }
}

public partial record HabiticaCastSkillParameters
{
    ///<summary>Choose the Habitica character to cast the skill.</summary>
    [JsonPropertyName("config_entry")]
    public object? ConfigEntry { get; init; }

    ///<summary>Select the skill or spell you want to cast on the task. Only skills corresponding to your character&apos;s class can be used.</summary>
    [JsonPropertyName("skill")]
    public object? Skill { get; init; }

    ///<summary>The name (or task ID) of the task you want to target with the skill or spell.</summary>
    [JsonPropertyName("task")]
    public string? Task { get; init; }
}

public partial record HabiticaLeaveQuestParameters
{
    ///<summary>Choose the Habitica character for which to perform the action.</summary>
    [JsonPropertyName("config_entry")]
    public object? ConfigEntry { get; init; }
}

public partial record HabiticaRejectQuestParameters
{
    ///<summary>Choose the Habitica character for which to perform the action.</summary>
    [JsonPropertyName("config_entry")]
    public object? ConfigEntry { get; init; }
}

public partial record HabiticaScoreHabitParameters
{
    ///<summary>Select the Habitica character tracking your habit.</summary>
    [JsonPropertyName("config_entry")]
    public object? ConfigEntry { get; init; }

    ///<summary>The name (or task ID) of the Habitica habit.</summary>
    [JsonPropertyName("task")]
    public string? Task { get; init; }

    ///<summary>Is it positive or negative progress you want to track for your habit.</summary>
    [JsonPropertyName("direction")]
    public object? Direction { get; init; }
}

public partial record HabiticaScoreRewardParameters
{
    ///<summary>Select the Habitica character buying the reward.</summary>
    [JsonPropertyName("config_entry")]
    public object? ConfigEntry { get; init; }

    ///<summary>The name (or task ID) of the custom reward.</summary>
    [JsonPropertyName("task")]
    public string? Task { get; init; }
}

public partial record HabiticaStartQuestParameters
{
    ///<summary>Choose the Habitica character for which to perform the action.</summary>
    [JsonPropertyName("config_entry")]
    public object? ConfigEntry { get; init; }
}

public partial record HabiticaTransformationParameters
{
    ///<summary>Choose the Habitica character to use the transformation item.</summary>
    [JsonPropertyName("config_entry")]
    public object? ConfigEntry { get; init; }

    ///<summary>Select the transformation item you want to use. Item must be in the characters inventory.</summary>
    [JsonPropertyName("item")]
    public object? Item { get; init; }

    ///<summary>The name of the character you want to use the transformation item on. You can also specify the players username or user ID.</summary>
    [JsonPropertyName("target")]
    public string? Target { get; init; }
}

public partial class HassioServices
{
    private readonly IHaContext _haContext;
    public HassioServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Restarts an add-on.</summary>
    public void AddonRestart(HassioAddonRestartParameters data)
    {
        _haContext.CallService("hassio", "addon_restart", null, data);
    }

    ///<summary>Restarts an add-on.</summary>
    ///<param name="addon">The add-on to restart. eg: core_ssh</param>
    public void AddonRestart(object addon)
    {
        _haContext.CallService("hassio", "addon_restart", null, new HassioAddonRestartParameters { Addon = addon });
    }

    ///<summary>Starts an add-on.</summary>
    public void AddonStart(HassioAddonStartParameters data)
    {
        _haContext.CallService("hassio", "addon_start", null, data);
    }

    ///<summary>Starts an add-on.</summary>
    ///<param name="addon">The add-on to start. eg: core_ssh</param>
    public void AddonStart(object addon)
    {
        _haContext.CallService("hassio", "addon_start", null, new HassioAddonStartParameters { Addon = addon });
    }

    ///<summary>Writes data to the add-on&apos;s standard input.</summary>
    public void AddonStdin(HassioAddonStdinParameters data)
    {
        _haContext.CallService("hassio", "addon_stdin", null, data);
    }

    ///<summary>Writes data to the add-on&apos;s standard input.</summary>
    ///<param name="addon">The add-on to write to. eg: core_ssh</param>
    public void AddonStdin(object addon)
    {
        _haContext.CallService("hassio", "addon_stdin", null, new HassioAddonStdinParameters { Addon = addon });
    }

    ///<summary>Stops an add-on.</summary>
    public void AddonStop(HassioAddonStopParameters data)
    {
        _haContext.CallService("hassio", "addon_stop", null, data);
    }

    ///<summary>Stops an add-on.</summary>
    ///<param name="addon">The add-on to stop. eg: core_ssh</param>
    public void AddonStop(object addon)
    {
        _haContext.CallService("hassio", "addon_stop", null, new HassioAddonStopParameters { Addon = addon });
    }

    ///<summary>Updates an add-on. This action should be used with caution since add-on updates can contain breaking changes. It is highly recommended that you review release notes/change logs before updating an add-on.</summary>
    public void AddonUpdate(HassioAddonUpdateParameters data)
    {
        _haContext.CallService("hassio", "addon_update", null, data);
    }

    ///<summary>Updates an add-on. This action should be used with caution since add-on updates can contain breaking changes. It is highly recommended that you review release notes/change logs before updating an add-on.</summary>
    ///<param name="addon">The add-on to update. eg: core_ssh</param>
    public void AddonUpdate(object addon)
    {
        _haContext.CallService("hassio", "addon_update", null, new HassioAddonUpdateParameters { Addon = addon });
    }

    ///<summary>Creates a full backup.</summary>
    public void BackupFull(HassioBackupFullParameters data)
    {
        _haContext.CallService("hassio", "backup_full", null, data);
    }

    ///<summary>Creates a full backup.</summary>
    ///<param name="name">Optional (default = current date and time). eg: Backup 1</param>
    ///<param name="password">Password to protect the backup with. eg: password</param>
    ///<param name="compressed">Compresses the backup files.</param>
    ///<param name="location">Name of a backup network storage to host backups. eg: my_backup_mount</param>
    ///<param name="homeassistantExcludeDatabase">Exclude the Home Assistant database file from backup</param>
    public void BackupFull(string? name = null, string? password = null, bool? compressed = null, object? location = null, bool? homeassistantExcludeDatabase = null)
    {
        _haContext.CallService("hassio", "backup_full", null, new HassioBackupFullParameters { Name = name, Password = password, Compressed = compressed, Location = location, HomeassistantExcludeDatabase = homeassistantExcludeDatabase });
    }

    ///<summary>Creates a partial backup.</summary>
    public void BackupPartial(HassioBackupPartialParameters data)
    {
        _haContext.CallService("hassio", "backup_partial", null, data);
    }

    ///<summary>Creates a partial backup.</summary>
    ///<param name="homeassistant">Includes Home Assistant settings in the backup.</param>
    ///<param name="homeassistantExcludeDatabase">Exclude the Home Assistant database file from backup</param>
    ///<param name="addons">List of add-ons to include in the backup. Use the name slug of the add-on. eg: [&quot;core_ssh&quot;,&quot;core_samba&quot;,&quot;core_mosquitto&quot;]</param>
    ///<param name="folders">List of directories to include in the backup. eg: [&quot;homeassistant&quot;,&quot;share&quot;]</param>
    ///<param name="name">Optional (default = current date and time). eg: Partial backup 1</param>
    ///<param name="password">Password to protect the backup with. eg: password</param>
    ///<param name="compressed">Compresses the backup files.</param>
    ///<param name="location">Name of a backup network storage to host backups. eg: my_backup_mount</param>
    public void BackupPartial(bool? homeassistant = null, bool? homeassistantExcludeDatabase = null, object? addons = null, object? folders = null, string? name = null, string? password = null, bool? compressed = null, object? location = null)
    {
        _haContext.CallService("hassio", "backup_partial", null, new HassioBackupPartialParameters { Homeassistant = homeassistant, HomeassistantExcludeDatabase = homeassistantExcludeDatabase, Addons = addons, Folders = folders, Name = name, Password = password, Compressed = compressed, Location = location });
    }

    ///<summary>Reboots the host system.</summary>
    public void HostReboot(object? data = null)
    {
        _haContext.CallService("hassio", "host_reboot", null, data);
    }

    ///<summary>Powers off the host system.</summary>
    public void HostShutdown(object? data = null)
    {
        _haContext.CallService("hassio", "host_shutdown", null, data);
    }

    ///<summary>Restores from full backup.</summary>
    public void RestoreFull(HassioRestoreFullParameters data)
    {
        _haContext.CallService("hassio", "restore_full", null, data);
    }

    ///<summary>Restores from full backup.</summary>
    ///<param name="slug">Slug of backup to restore from.</param>
    ///<param name="password">Optional password. eg: password</param>
    public void RestoreFull(string slug, string? password = null)
    {
        _haContext.CallService("hassio", "restore_full", null, new HassioRestoreFullParameters { Slug = slug, Password = password });
    }

    ///<summary>Restores from a partial backup.</summary>
    public void RestorePartial(HassioRestorePartialParameters data)
    {
        _haContext.CallService("hassio", "restore_partial", null, data);
    }

    ///<summary>Restores from a partial backup.</summary>
    ///<param name="slug">Slug of backup to restore from.</param>
    ///<param name="homeassistant">Restores Home Assistant.</param>
    ///<param name="folders">List of directories to include in the backup. eg: [&quot;homeassistant&quot;,&quot;share&quot;]</param>
    ///<param name="addons">List of add-ons to include in the backup. Use the name slug of the add-on. eg: [&quot;core_ssh&quot;,&quot;core_samba&quot;,&quot;core_mosquitto&quot;]</param>
    ///<param name="password">Optional password. eg: password</param>
    public void RestorePartial(string slug, bool? homeassistant = null, object? folders = null, object? addons = null, string? password = null)
    {
        _haContext.CallService("hassio", "restore_partial", null, new HassioRestorePartialParameters { Slug = slug, Homeassistant = homeassistant, Folders = folders, Addons = addons, Password = password });
    }
}

public partial record HassioAddonRestartParameters
{
    ///<summary>The add-on to restart. eg: core_ssh</summary>
    [JsonPropertyName("addon")]
    public object? Addon { get; init; }
}

public partial record HassioAddonStartParameters
{
    ///<summary>The add-on to start. eg: core_ssh</summary>
    [JsonPropertyName("addon")]
    public object? Addon { get; init; }
}

public partial record HassioAddonStdinParameters
{
    ///<summary>The add-on to write to. eg: core_ssh</summary>
    [JsonPropertyName("addon")]
    public object? Addon { get; init; }
}

public partial record HassioAddonStopParameters
{
    ///<summary>The add-on to stop. eg: core_ssh</summary>
    [JsonPropertyName("addon")]
    public object? Addon { get; init; }
}

public partial record HassioAddonUpdateParameters
{
    ///<summary>The add-on to update. eg: core_ssh</summary>
    [JsonPropertyName("addon")]
    public object? Addon { get; init; }
}

public partial record HassioBackupFullParameters
{
    ///<summary>Optional (default = current date and time). eg: Backup 1</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>Password to protect the backup with. eg: password</summary>
    [JsonPropertyName("password")]
    public string? Password { get; init; }

    ///<summary>Compresses the backup files.</summary>
    [JsonPropertyName("compressed")]
    public bool? Compressed { get; init; }

    ///<summary>Name of a backup network storage to host backups. eg: my_backup_mount</summary>
    [JsonPropertyName("location")]
    public object? Location { get; init; }

    ///<summary>Exclude the Home Assistant database file from backup</summary>
    [JsonPropertyName("homeassistant_exclude_database")]
    public bool? HomeassistantExcludeDatabase { get; init; }
}

public partial record HassioBackupPartialParameters
{
    ///<summary>Includes Home Assistant settings in the backup.</summary>
    [JsonPropertyName("homeassistant")]
    public bool? Homeassistant { get; init; }

    ///<summary>Exclude the Home Assistant database file from backup</summary>
    [JsonPropertyName("homeassistant_exclude_database")]
    public bool? HomeassistantExcludeDatabase { get; init; }

    ///<summary>List of add-ons to include in the backup. Use the name slug of the add-on. eg: [&quot;core_ssh&quot;,&quot;core_samba&quot;,&quot;core_mosquitto&quot;]</summary>
    [JsonPropertyName("addons")]
    public object? Addons { get; init; }

    ///<summary>List of directories to include in the backup. eg: [&quot;homeassistant&quot;,&quot;share&quot;]</summary>
    [JsonPropertyName("folders")]
    public object? Folders { get; init; }

    ///<summary>Optional (default = current date and time). eg: Partial backup 1</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>Password to protect the backup with. eg: password</summary>
    [JsonPropertyName("password")]
    public string? Password { get; init; }

    ///<summary>Compresses the backup files.</summary>
    [JsonPropertyName("compressed")]
    public bool? Compressed { get; init; }

    ///<summary>Name of a backup network storage to host backups. eg: my_backup_mount</summary>
    [JsonPropertyName("location")]
    public object? Location { get; init; }
}

public partial record HassioRestoreFullParameters
{
    ///<summary>Slug of backup to restore from.</summary>
    [JsonPropertyName("slug")]
    public string? Slug { get; init; }

    ///<summary>Optional password. eg: password</summary>
    [JsonPropertyName("password")]
    public string? Password { get; init; }
}

public partial record HassioRestorePartialParameters
{
    ///<summary>Slug of backup to restore from.</summary>
    [JsonPropertyName("slug")]
    public string? Slug { get; init; }

    ///<summary>Restores Home Assistant.</summary>
    [JsonPropertyName("homeassistant")]
    public bool? Homeassistant { get; init; }

    ///<summary>List of directories to include in the backup. eg: [&quot;homeassistant&quot;,&quot;share&quot;]</summary>
    [JsonPropertyName("folders")]
    public object? Folders { get; init; }

    ///<summary>List of add-ons to include in the backup. Use the name slug of the add-on. eg: [&quot;core_ssh&quot;,&quot;core_samba&quot;,&quot;core_mosquitto&quot;]</summary>
    [JsonPropertyName("addons")]
    public object? Addons { get; init; }

    ///<summary>Optional password. eg: password</summary>
    [JsonPropertyName("password")]
    public string? Password { get; init; }
}

public partial class HomeassistantServices
{
    private readonly IHaContext _haContext;
    public HomeassistantServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Checks the Home Assistant YAML-configuration files for errors. Errors will be shown in the Home Assistant logs.</summary>
    public void CheckConfig(object? data = null)
    {
        _haContext.CallService("homeassistant", "check_config", null, data);
    }

    ///<summary>Reload all YAML configuration that can be reloaded without restarting Home Assistant.</summary>
    public void ReloadAll(object? data = null)
    {
        _haContext.CallService("homeassistant", "reload_all", null, data);
    }

    ///<summary>Reloads the specified config entry.</summary>
    ///<param name="target">The target for this service call</param>
    public void ReloadConfigEntry(ServiceTarget target, HomeassistantReloadConfigEntryParameters data)
    {
        _haContext.CallService("homeassistant", "reload_config_entry", target, data);
    }

    ///<summary>Reloads the specified config entry.</summary>
    ///<param name="entryId">The configuration entry ID of the entry to be reloaded. eg: 8955375327824e14ba89e4b29cc3ec9a</param>
    public void ReloadConfigEntry(ServiceTarget target, string? entryId = null)
    {
        _haContext.CallService("homeassistant", "reload_config_entry", target, new HomeassistantReloadConfigEntryParameters { EntryId = entryId });
    }

    ///<summary>Reloads the core configuration from the YAML-configuration.</summary>
    public void ReloadCoreConfig(object? data = null)
    {
        _haContext.CallService("homeassistant", "reload_core_config", null, data);
    }

    ///<summary>Reloads Jinja2 templates found in the `custom_templates` folder in your config. New values will be applied on the next render of the template.</summary>
    public void ReloadCustomTemplates(object? data = null)
    {
        _haContext.CallService("homeassistant", "reload_custom_templates", null, data);
    }

    ///<summary>Restarts Home Assistant.</summary>
    public void Restart(object? data = null)
    {
        _haContext.CallService("homeassistant", "restart", null, data);
    }

    ///<summary>Saves the persistent states immediately. Maintains the normal periodic saving interval.</summary>
    public void SavePersistentStates(object? data = null)
    {
        _haContext.CallService("homeassistant", "save_persistent_states", null, data);
    }

    ///<summary>Updates the Home Assistant location.</summary>
    public void SetLocation(HomeassistantSetLocationParameters data)
    {
        _haContext.CallService("homeassistant", "set_location", null, data);
    }

    ///<summary>Updates the Home Assistant location.</summary>
    ///<param name="latitude">Latitude of your location. eg: 32.87336</param>
    ///<param name="longitude">Longitude of your location. eg: 117.22743</param>
    ///<param name="elevation">Elevation of your location above sea level. eg: 120</param>
    public void SetLocation(double latitude, double longitude, double? elevation = null)
    {
        _haContext.CallService("homeassistant", "set_location", null, new HomeassistantSetLocationParameters { Latitude = latitude, Longitude = longitude, Elevation = elevation });
    }

    ///<summary>Stops Home Assistant.</summary>
    public void Stop(object? data = null)
    {
        _haContext.CallService("homeassistant", "stop", null, data);
    }

    ///<summary>Generic action to toggle devices on/off under any domain.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("homeassistant", "toggle", target, data);
    }

    ///<summary>Generic action to turn devices off under any domain.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("homeassistant", "turn_off", target, data);
    }

    ///<summary>Generic action to turn devices on under any domain.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("homeassistant", "turn_on", target, data);
    }

    ///<summary>Forces one or more entities to update its data.</summary>
    public void UpdateEntity(HomeassistantUpdateEntityParameters data)
    {
        _haContext.CallService("homeassistant", "update_entity", null, data);
    }

    ///<summary>Forces one or more entities to update its data.</summary>
    ///<param name="entityId">List of entities to force update.</param>
    public void UpdateEntity(IEnumerable<string> entityId)
    {
        _haContext.CallService("homeassistant", "update_entity", null, new HomeassistantUpdateEntityParameters { EntityId = entityId });
    }
}

public partial record HomeassistantReloadConfigEntryParameters
{
    ///<summary>The configuration entry ID of the entry to be reloaded. eg: 8955375327824e14ba89e4b29cc3ec9a</summary>
    [JsonPropertyName("entry_id")]
    public string? EntryId { get; init; }
}

public partial record HomeassistantSetLocationParameters
{
    ///<summary>Latitude of your location. eg: 32.87336</summary>
    [JsonPropertyName("latitude")]
    public double? Latitude { get; init; }

    ///<summary>Longitude of your location. eg: 117.22743</summary>
    [JsonPropertyName("longitude")]
    public double? Longitude { get; init; }

    ///<summary>Elevation of your location above sea level. eg: 120</summary>
    [JsonPropertyName("elevation")]
    public double? Elevation { get; init; }
}

public partial record HomeassistantUpdateEntityParameters
{
    ///<summary>List of entities to force update.</summary>
    [JsonPropertyName("entity_id")]
    public IEnumerable<string>? EntityId { get; init; }
}

public partial class HumidifierServices
{
    private readonly IHaContext _haContext;
    public HumidifierServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets the target humidity.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetHumidity(ServiceTarget target, HumidifierSetHumidityParameters data)
    {
        _haContext.CallService("humidifier", "set_humidity", target, data);
    }

    ///<summary>Sets the target humidity.</summary>
    ///<param name="humidity">Target humidity.</param>
    public void SetHumidity(ServiceTarget target, double humidity)
    {
        _haContext.CallService("humidifier", "set_humidity", target, new HumidifierSetHumidityParameters { Humidity = humidity });
    }

    ///<summary>Sets the humidifier operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetMode(ServiceTarget target, HumidifierSetModeParameters data)
    {
        _haContext.CallService("humidifier", "set_mode", target, data);
    }

    ///<summary>Sets the humidifier operation mode.</summary>
    ///<param name="mode">Operation mode. For example, _normal_, _eco_, or _away_. For a list of possible values, refer to the integration documentation. eg: away</param>
    public void SetMode(ServiceTarget target, string mode)
    {
        _haContext.CallService("humidifier", "set_mode", target, new HumidifierSetModeParameters { Mode = mode });
    }

    ///<summary>Toggles the humidifier on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("humidifier", "toggle", target, data);
    }

    ///<summary>Turns the humidifier off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("humidifier", "turn_off", target, data);
    }

    ///<summary>Turns the humidifier on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("humidifier", "turn_on", target, data);
    }
}

public partial record HumidifierSetHumidityParameters
{
    ///<summary>Target humidity.</summary>
    [JsonPropertyName("humidity")]
    public double? Humidity { get; init; }
}

public partial record HumidifierSetModeParameters
{
    ///<summary>Operation mode. For example, _normal_, _eco_, or _away_. For a list of possible values, refer to the integration documentation. eg: away</summary>
    [JsonPropertyName("mode")]
    public string? Mode { get; init; }
}

public partial class ImapServices
{
    private readonly IHaContext _haContext;
    public ImapServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Delete an email.</summary>
    public void Delete(ImapDeleteParameters data)
    {
        _haContext.CallService("imap", "delete", null, data);
    }

    ///<summary>Delete an email.</summary>
    ///<param name="entry">The IMAP config entry.</param>
    ///<param name="uid">The email identifier (UID). eg: 12</param>
    public void Delete(object entry, string uid)
    {
        _haContext.CallService("imap", "delete", null, new ImapDeleteParameters { Entry = entry, Uid = uid });
    }

    ///<summary>Fetch an email message from the server.</summary>
    public void Fetch(ImapFetchParameters data)
    {
        _haContext.CallService("imap", "fetch", null, data);
    }

    ///<summary>Fetch an email message from the server.</summary>
    ///<param name="entry">The IMAP config entry.</param>
    ///<param name="uid">The email identifier (UID). eg: 12</param>
    public void Fetch(object entry, string uid)
    {
        _haContext.CallService("imap", "fetch", null, new ImapFetchParameters { Entry = entry, Uid = uid });
    }

    ///<summary>Fetch an email message from the server.</summary>
    public Task<JsonElement?> FetchAsync(ImapFetchParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("imap", "fetch", null, data);
    }

    ///<summary>Fetch an email message from the server.</summary>
    ///<param name="entry">The IMAP config entry.</param>
    ///<param name="uid">The email identifier (UID). eg: 12</param>
    public Task<JsonElement?> FetchAsync(object entry, string uid)
    {
        return _haContext.CallServiceWithResponseAsync("imap", "fetch", null, new ImapFetchParameters { Entry = entry, Uid = uid });
    }

    ///<summary>Move an email to a target folder.</summary>
    public void Move(ImapMoveParameters data)
    {
        _haContext.CallService("imap", "move", null, data);
    }

    ///<summary>Move an email to a target folder.</summary>
    ///<param name="entry">The IMAP config entry.</param>
    ///<param name="uid">The email identifier (UID). eg: 12</param>
    ///<param name="seen">Mark the email as seen.</param>
    ///<param name="targetFolder">The target folder the email should be moved to. eg: INBOX.Trash</param>
    public void Move(object entry, string uid, string targetFolder, bool? seen = null)
    {
        _haContext.CallService("imap", "move", null, new ImapMoveParameters { Entry = entry, Uid = uid, Seen = seen, TargetFolder = targetFolder });
    }

    ///<summary>Mark an email as seen.</summary>
    public void Seen(ImapSeenParameters data)
    {
        _haContext.CallService("imap", "seen", null, data);
    }

    ///<summary>Mark an email as seen.</summary>
    ///<param name="entry">The IMAP config entry.</param>
    ///<param name="uid">The email identifier (UID). eg: 12</param>
    public void Seen(object entry, string uid)
    {
        _haContext.CallService("imap", "seen", null, new ImapSeenParameters { Entry = entry, Uid = uid });
    }
}

public partial record ImapDeleteParameters
{
    ///<summary>The IMAP config entry.</summary>
    [JsonPropertyName("entry")]
    public object? Entry { get; init; }

    ///<summary>The email identifier (UID). eg: 12</summary>
    [JsonPropertyName("uid")]
    public string? Uid { get; init; }
}

public partial record ImapFetchParameters
{
    ///<summary>The IMAP config entry.</summary>
    [JsonPropertyName("entry")]
    public object? Entry { get; init; }

    ///<summary>The email identifier (UID). eg: 12</summary>
    [JsonPropertyName("uid")]
    public string? Uid { get; init; }
}

public partial record ImapMoveParameters
{
    ///<summary>The IMAP config entry.</summary>
    [JsonPropertyName("entry")]
    public object? Entry { get; init; }

    ///<summary>The email identifier (UID). eg: 12</summary>
    [JsonPropertyName("uid")]
    public string? Uid { get; init; }

    ///<summary>Mark the email as seen.</summary>
    [JsonPropertyName("seen")]
    public bool? Seen { get; init; }

    ///<summary>The target folder the email should be moved to. eg: INBOX.Trash</summary>
    [JsonPropertyName("target_folder")]
    public string? TargetFolder { get; init; }
}

public partial record ImapSeenParameters
{
    ///<summary>The IMAP config entry.</summary>
    [JsonPropertyName("entry")]
    public object? Entry { get; init; }

    ///<summary>The email identifier (UID). eg: 12</summary>
    [JsonPropertyName("uid")]
    public string? Uid { get; init; }
}

public partial class InputBooleanServices
{
    private readonly IHaContext _haContext;
    public InputBooleanServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("input_boolean", "reload", null, data);
    }

    ///<summary>Toggles the helper on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("input_boolean", "toggle", target, data);
    }

    ///<summary>Turns off the helper.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("input_boolean", "turn_off", target, data);
    }

    ///<summary>Turns on the helper.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("input_boolean", "turn_on", target, data);
    }
}

public partial class InputButtonServices
{
    private readonly IHaContext _haContext;
    public InputButtonServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Mimics the physical button press on the device.</summary>
    ///<param name="target">The target for this service call</param>
    public void Press(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("input_button", "press", target, data);
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("input_button", "reload", null, data);
    }
}

public partial class InputDatetimeServices
{
    private readonly IHaContext _haContext;
    public InputDatetimeServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("input_datetime", "reload", null, data);
    }

    ///<summary>Sets the date and/or time.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetDatetime(ServiceTarget target, InputDatetimeSetDatetimeParameters data)
    {
        _haContext.CallService("input_datetime", "set_datetime", target, data);
    }

    ///<summary>Sets the date and/or time.</summary>
    ///<param name="date">The target date. eg: &quot;2019-04-20&quot;</param>
    ///<param name="time">The target time. eg: &quot;05:04:20&quot;</param>
    ///<param name="datetime">The target date &amp; time. eg: &quot;2019-04-20 05:04:20&quot;</param>
    ///<param name="timestamp">The target date &amp; time, expressed by a UNIX timestamp.</param>
    public void SetDatetime(ServiceTarget target, string? date = null, TimeOnly? time = null, string? datetime = null, double? timestamp = null)
    {
        _haContext.CallService("input_datetime", "set_datetime", target, new InputDatetimeSetDatetimeParameters { Date = date, Time = time, Datetime = datetime, Timestamp = timestamp });
    }
}

public partial record InputDatetimeSetDatetimeParameters
{
    ///<summary>The target date. eg: &quot;2019-04-20&quot;</summary>
    [JsonPropertyName("date")]
    public string? Date { get; init; }

    ///<summary>The target time. eg: &quot;05:04:20&quot;</summary>
    [JsonPropertyName("time")]
    public TimeOnly? Time { get; init; }

    ///<summary>The target date &amp; time. eg: &quot;2019-04-20 05:04:20&quot;</summary>
    [JsonPropertyName("datetime")]
    public string? Datetime { get; init; }

    ///<summary>The target date &amp; time, expressed by a UNIX timestamp.</summary>
    [JsonPropertyName("timestamp")]
    public double? Timestamp { get; init; }
}

public partial class InputNumberServices
{
    private readonly IHaContext _haContext;
    public InputNumberServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Decrements the current value by 1 step.</summary>
    ///<param name="target">The target for this service call</param>
    public void Decrement(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("input_number", "decrement", target, data);
    }

    ///<summary>Increments the current value by 1 step.</summary>
    ///<param name="target">The target for this service call</param>
    public void Increment(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("input_number", "increment", target, data);
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("input_number", "reload", null, data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, InputNumberSetValueParameters data)
    {
        _haContext.CallService("input_number", "set_value", target, data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="value">The target value.</param>
    public void SetValue(ServiceTarget target, double value)
    {
        _haContext.CallService("input_number", "set_value", target, new InputNumberSetValueParameters { Value = value });
    }
}

public partial record InputNumberSetValueParameters
{
    ///<summary>The target value.</summary>
    [JsonPropertyName("value")]
    public double? Value { get; init; }
}

public partial class InputSelectServices
{
    private readonly IHaContext _haContext;
    public InputSelectServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("input_select", "reload", null, data);
    }

    ///<summary>Selects the first option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectFirst(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("input_select", "select_first", target, data);
    }

    ///<summary>Selects the last option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectLast(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("input_select", "select_last", target, data);
    }

    ///<summary>Select the next option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectNext(ServiceTarget target, InputSelectSelectNextParameters data)
    {
        _haContext.CallService("input_select", "select_next", target, data);
    }

    ///<summary>Select the next option.</summary>
    ///<param name="cycle">If the option should cycle from the last to the first option on the list.</param>
    public void SelectNext(ServiceTarget target, bool? cycle = null)
    {
        _haContext.CallService("input_select", "select_next", target, new InputSelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectOption(ServiceTarget target, InputSelectSelectOptionParameters data)
    {
        _haContext.CallService("input_select", "select_option", target, data);
    }

    ///<summary>Selects an option.</summary>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public void SelectOption(ServiceTarget target, string option)
    {
        _haContext.CallService("input_select", "select_option", target, new InputSelectSelectOptionParameters { Option = option });
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectPrevious(ServiceTarget target, InputSelectSelectPreviousParameters data)
    {
        _haContext.CallService("input_select", "select_previous", target, data);
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="cycle">If the option should cycle from the last to the first option on the list.</param>
    public void SelectPrevious(ServiceTarget target, bool? cycle = null)
    {
        _haContext.CallService("input_select", "select_previous", target, new InputSelectSelectPreviousParameters { Cycle = cycle });
    }

    ///<summary>Sets the options.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetOptions(ServiceTarget target, InputSelectSetOptionsParameters data)
    {
        _haContext.CallService("input_select", "set_options", target, data);
    }

    ///<summary>Sets the options.</summary>
    ///<param name="options">List of options. eg: [&quot;Item A&quot;, &quot;Item B&quot;, &quot;Item C&quot;]</param>
    public void SetOptions(ServiceTarget target, IEnumerable<string> options)
    {
        _haContext.CallService("input_select", "set_options", target, new InputSelectSetOptionsParameters { Options = options });
    }
}

public partial record InputSelectSelectNextParameters
{
    ///<summary>If the option should cycle from the last to the first option on the list.</summary>
    [JsonPropertyName("cycle")]
    public bool? Cycle { get; init; }
}

public partial record InputSelectSelectOptionParameters
{
    ///<summary>Option to be selected. eg: &quot;Item A&quot;</summary>
    [JsonPropertyName("option")]
    public string? Option { get; init; }
}

public partial record InputSelectSelectPreviousParameters
{
    ///<summary>If the option should cycle from the last to the first option on the list.</summary>
    [JsonPropertyName("cycle")]
    public bool? Cycle { get; init; }
}

public partial record InputSelectSetOptionsParameters
{
    ///<summary>List of options. eg: [&quot;Item A&quot;, &quot;Item B&quot;, &quot;Item C&quot;]</summary>
    [JsonPropertyName("options")]
    public IEnumerable<string>? Options { get; init; }
}

public partial class InputTextServices
{
    private readonly IHaContext _haContext;
    public InputTextServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("input_text", "reload", null, data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, InputTextSetValueParameters data)
    {
        _haContext.CallService("input_text", "set_value", target, data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="value">The target value. eg: This is an example text</param>
    public void SetValue(ServiceTarget target, string value)
    {
        _haContext.CallService("input_text", "set_value", target, new InputTextSetValueParameters { Value = value });
    }
}

public partial record InputTextSetValueParameters
{
    ///<summary>The target value. eg: This is an example text</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }
}

public partial class Iperf3Services
{
    private readonly IHaContext _haContext;
    public Iperf3Services(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Immediately executes a speed test with iperf3.</summary>
    public void Speedtest(Iperf3SpeedtestParameters data)
    {
        _haContext.CallService("iperf3", "speedtest", null, data);
    }

    ///<summary>Immediately executes a speed test with iperf3.</summary>
    ///<param name="host">The host name of the iperf3 server (already configured) to run a test with. eg: iperf.he.net</param>
    public void Speedtest(string? host = null)
    {
        _haContext.CallService("iperf3", "speedtest", null, new Iperf3SpeedtestParameters { Host = host });
    }
}

public partial record Iperf3SpeedtestParameters
{
    ///<summary>The host name of the iperf3 server (already configured) to run a test with. eg: iperf.he.net</summary>
    [JsonPropertyName("host")]
    public string? Host { get; init; }
}

public partial class KodiServices
{
    private readonly IHaContext _haContext;
    public KodiServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Adds music to the default playlist (i.e. playlistid=0).</summary>
    ///<param name="target">The target for this service call</param>
    public void AddToPlaylist(ServiceTarget target, KodiAddToPlaylistParameters data)
    {
        _haContext.CallService("kodi", "add_to_playlist", target, data);
    }

    ///<summary>Adds music to the default playlist (i.e. playlistid=0).</summary>
    ///<param name="mediaType">Media type identifier. It must be one of SONG or ALBUM. eg: ALBUM</param>
    ///<param name="mediaId">Unique Id of the media entry to add (`songid` or albumid`). If not defined, `media_name` and `artist_name` are needed to search the Kodi music library. eg: 123456</param>
    ///<param name="mediaName">Optional media name for filtering media. Can be &apos;ALL&apos; when `media_type` is &apos;ALBUM&apos; and `artist_name` is specified, to add all songs from one artist. eg: Highway to Hell</param>
    ///<param name="artistName">Optional artist name for filtering media. eg: AC/DC</param>
    public void AddToPlaylist(ServiceTarget target, string mediaType, string? mediaId = null, string? mediaName = null, string? artistName = null)
    {
        _haContext.CallService("kodi", "add_to_playlist", target, new KodiAddToPlaylistParameters { MediaType = mediaType, MediaId = mediaId, MediaName = mediaName, ArtistName = artistName });
    }

    ///<summary>Calls a Kodi JSONRPC API method with optional parameters. Results of the Kodi API call will be redirected in a Home Assistant event: `kodi_call_method_result`.</summary>
    ///<param name="target">The target for this service call</param>
    public void CallMethod(ServiceTarget target, KodiCallMethodParameters data)
    {
        _haContext.CallService("kodi", "call_method", target, data);
    }

    ///<summary>Calls a Kodi JSONRPC API method with optional parameters. Results of the Kodi API call will be redirected in a Home Assistant event: `kodi_call_method_result`.</summary>
    ///<param name="method">Name of the Kodi JSONRPC API method to be called. eg: VideoLibrary.GetRecentlyAddedEpisodes</param>
    public void CallMethod(ServiceTarget target, string @method)
    {
        _haContext.CallService("kodi", "call_method", target, new KodiCallMethodParameters { Method = @method });
    }
}

public partial record KodiAddToPlaylistParameters
{
    ///<summary>Media type identifier. It must be one of SONG or ALBUM. eg: ALBUM</summary>
    [JsonPropertyName("media_type")]
    public string? MediaType { get; init; }

    ///<summary>Unique Id of the media entry to add (`songid` or albumid`). If not defined, `media_name` and `artist_name` are needed to search the Kodi music library. eg: 123456</summary>
    [JsonPropertyName("media_id")]
    public string? MediaId { get; init; }

    ///<summary>Optional media name for filtering media. Can be &apos;ALL&apos; when `media_type` is &apos;ALBUM&apos; and `artist_name` is specified, to add all songs from one artist. eg: Highway to Hell</summary>
    [JsonPropertyName("media_name")]
    public string? MediaName { get; init; }

    ///<summary>Optional artist name for filtering media. eg: AC/DC</summary>
    [JsonPropertyName("artist_name")]
    public string? ArtistName { get; init; }
}

public partial record KodiCallMethodParameters
{
    ///<summary>Name of the Kodi JSONRPC API method to be called. eg: VideoLibrary.GetRecentlyAddedEpisodes</summary>
    [JsonPropertyName("method")]
    public string? Method { get; init; }
}

public partial class LightServices
{
    private readonly IHaContext _haContext;
    public LightServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, LightToggleParameters data)
    {
        _haContext.CallService("light", "toggle", target, data);
    }

    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state.</summary>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
    ///<param name="kelvin">Color temperature in Kelvin.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="effect">Light effect.</param>
    ///<param name="rgbwColor"> eg: [255, 100, 100, 50]</param>
    ///<param name="rgbwwColor"> eg: [255, 100, 100, 50, 70]</param>
    ///<param name="colorName"></param>
    ///<param name="hsColor"> eg: [300, 70]</param>
    ///<param name="xyColor"> eg: [0.52, 0.43]</param>
    ///<param name="colorTemp"></param>
    ///<param name="brightness"></param>
    ///<param name="white"></param>
    ///<param name="profile"> eg: relax</param>
    ///<param name="flash"></param>
    public void Toggle(ServiceTarget target, double? transition = null, IReadOnlyCollection<int>? rgbColor = null, object? kelvin = null, double? brightnessPct = null, string? effect = null, object? rgbwColor = null, object? rgbwwColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, double? brightness = null, object? white = null, string? profile = null, object? flash = null)
    {
        _haContext.CallService("light", "toggle", target, new LightToggleParameters { Transition = transition, RgbColor = rgbColor, Kelvin = kelvin, BrightnessPct = brightnessPct, Effect = effect, RgbwColor = rgbwColor, RgbwwColor = rgbwwColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Brightness = brightness, White = white, Profile = profile, Flash = flash });
    }

    ///<summary>Turn off one or more lights.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, LightTurnOffParameters data)
    {
        _haContext.CallService("light", "turn_off", target, data);
    }

    ///<summary>Turn off one or more lights.</summary>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="flash"></param>
    public void TurnOff(ServiceTarget target, double? transition = null, object? flash = null)
    {
        _haContext.CallService("light", "turn_off", target, new LightTurnOffParameters { Transition = transition, Flash = flash });
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, LightTurnOnParameters data)
    {
        _haContext.CallService("light", "turn_on", target, data);
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already.</summary>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
    ///<param name="kelvin">Color temperature in Kelvin.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="brightnessStepPct">Change brightness by a percentage.</param>
    ///<param name="effect">Light effect.</param>
    ///<param name="rgbwColor"> eg: [255, 100, 100, 50]</param>
    ///<param name="rgbwwColor"> eg: [255, 100, 100, 50, 70]</param>
    ///<param name="colorName"></param>
    ///<param name="hsColor"> eg: [300, 70]</param>
    ///<param name="xyColor"> eg: [0.52, 0.43]</param>
    ///<param name="colorTemp"></param>
    ///<param name="brightness"></param>
    ///<param name="brightnessStep"></param>
    ///<param name="white"></param>
    ///<param name="profile"> eg: relax</param>
    ///<param name="flash"></param>
    public void TurnOn(ServiceTarget target, double? transition = null, IReadOnlyCollection<int>? rgbColor = null, object? kelvin = null, double? brightnessPct = null, double? brightnessStepPct = null, string? effect = null, object? rgbwColor = null, object? rgbwwColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, double? brightness = null, double? brightnessStep = null, object? white = null, string? profile = null, object? flash = null)
    {
        _haContext.CallService("light", "turn_on", target, new LightTurnOnParameters { Transition = transition, RgbColor = rgbColor, Kelvin = kelvin, BrightnessPct = brightnessPct, BrightnessStepPct = brightnessStepPct, Effect = effect, RgbwColor = rgbwColor, RgbwwColor = rgbwwColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Brightness = brightness, BrightnessStep = brightnessStep, White = white, Profile = profile, Flash = flash });
    }
}

public partial record LightToggleParameters
{
    ///<summary>Duration it takes to get to next state.</summary>
    [JsonPropertyName("transition")]
    public double? Transition { get; init; }

    ///<summary>The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</summary>
    [JsonPropertyName("rgb_color")]
    public IReadOnlyCollection<int>? RgbColor { get; init; }

    ///<summary>Color temperature in Kelvin.</summary>
    [JsonPropertyName("kelvin")]
    public object? Kelvin { get; init; }

    ///<summary>Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</summary>
    [JsonPropertyName("brightness_pct")]
    public double? BrightnessPct { get; init; }

    ///<summary>Light effect.</summary>
    [JsonPropertyName("effect")]
    public string? Effect { get; init; }

    ///<summary> eg: [255, 100, 100, 50]</summary>
    [JsonPropertyName("rgbw_color")]
    public object? RgbwColor { get; init; }

    ///<summary> eg: [255, 100, 100, 50, 70]</summary>
    [JsonPropertyName("rgbww_color")]
    public object? RgbwwColor { get; init; }

    [JsonPropertyName("color_name")]
    public object? ColorName { get; init; }

    ///<summary> eg: [300, 70]</summary>
    [JsonPropertyName("hs_color")]
    public object? HsColor { get; init; }

    ///<summary> eg: [0.52, 0.43]</summary>
    [JsonPropertyName("xy_color")]
    public object? XyColor { get; init; }

    [JsonPropertyName("color_temp")]
    public object? ColorTemp { get; init; }

    [JsonPropertyName("brightness")]
    public double? Brightness { get; init; }

    [JsonPropertyName("white")]
    public object? White { get; init; }

    ///<summary> eg: relax</summary>
    [JsonPropertyName("profile")]
    public string? Profile { get; init; }

    [JsonPropertyName("flash")]
    public object? Flash { get; init; }
}

public partial record LightTurnOffParameters
{
    ///<summary>Duration it takes to get to next state.</summary>
    [JsonPropertyName("transition")]
    public double? Transition { get; init; }

    [JsonPropertyName("flash")]
    public object? Flash { get; init; }
}

public partial record LightTurnOnParameters
{
    ///<summary>Duration it takes to get to next state.</summary>
    [JsonPropertyName("transition")]
    public double? Transition { get; init; }

    ///<summary>The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</summary>
    [JsonPropertyName("rgb_color")]
    public IReadOnlyCollection<int>? RgbColor { get; init; }

    ///<summary>Color temperature in Kelvin.</summary>
    [JsonPropertyName("kelvin")]
    public object? Kelvin { get; init; }

    ///<summary>Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</summary>
    [JsonPropertyName("brightness_pct")]
    public double? BrightnessPct { get; init; }

    ///<summary>Change brightness by a percentage.</summary>
    [JsonPropertyName("brightness_step_pct")]
    public double? BrightnessStepPct { get; init; }

    ///<summary>Light effect.</summary>
    [JsonPropertyName("effect")]
    public string? Effect { get; init; }

    ///<summary> eg: [255, 100, 100, 50]</summary>
    [JsonPropertyName("rgbw_color")]
    public object? RgbwColor { get; init; }

    ///<summary> eg: [255, 100, 100, 50, 70]</summary>
    [JsonPropertyName("rgbww_color")]
    public object? RgbwwColor { get; init; }

    [JsonPropertyName("color_name")]
    public object? ColorName { get; init; }

    ///<summary> eg: [300, 70]</summary>
    [JsonPropertyName("hs_color")]
    public object? HsColor { get; init; }

    ///<summary> eg: [0.52, 0.43]</summary>
    [JsonPropertyName("xy_color")]
    public object? XyColor { get; init; }

    [JsonPropertyName("color_temp")]
    public object? ColorTemp { get; init; }

    [JsonPropertyName("brightness")]
    public double? Brightness { get; init; }

    [JsonPropertyName("brightness_step")]
    public double? BrightnessStep { get; init; }

    [JsonPropertyName("white")]
    public object? White { get; init; }

    ///<summary> eg: relax</summary>
    [JsonPropertyName("profile")]
    public string? Profile { get; init; }

    [JsonPropertyName("flash")]
    public object? Flash { get; init; }
}

public partial class LogbookServices
{
    private readonly IHaContext _haContext;
    public LogbookServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Creates a custom entry in the logbook.</summary>
    public void Log(LogbookLogParameters data)
    {
        _haContext.CallService("logbook", "log", null, data);
    }

    ///<summary>Creates a custom entry in the logbook.</summary>
    ///<param name="name">Custom name for an entity, can be referenced using an `entity_id`. eg: Kitchen</param>
    ///<param name="message">Message of the logbook entry. eg: is being used</param>
    ///<param name="entityId">Entity to reference in the logbook entry.</param>
    ///<param name="domain">Determines which icon is used in the logbook entry. The icon illustrates the integration domain related to this logbook entry. eg: light</param>
    public void Log(string name, string message, string? entityId = null, string? domain = null)
    {
        _haContext.CallService("logbook", "log", null, new LogbookLogParameters { Name = name, Message = message, EntityId = entityId, Domain = domain });
    }
}

public partial record LogbookLogParameters
{
    ///<summary>Custom name for an entity, can be referenced using an `entity_id`. eg: Kitchen</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>Message of the logbook entry. eg: is being used</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Entity to reference in the logbook entry.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>Determines which icon is used in the logbook entry. The icon illustrates the integration domain related to this logbook entry. eg: light</summary>
    [JsonPropertyName("domain")]
    public string? Domain { get; init; }
}

public partial class LoggerServices
{
    private readonly IHaContext _haContext;
    public LoggerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets the default log level for integrations.</summary>
    public void SetDefaultLevel(LoggerSetDefaultLevelParameters data)
    {
        _haContext.CallService("logger", "set_default_level", null, data);
    }

    ///<summary>Sets the default log level for integrations.</summary>
    ///<param name="level">Default severity level for all integrations.</param>
    public void SetDefaultLevel(object? level = null)
    {
        _haContext.CallService("logger", "set_default_level", null, new LoggerSetDefaultLevelParameters { Level = level });
    }

    ///<summary>Sets the log level for one or more integrations.</summary>
    public void SetLevel(object? data = null)
    {
        _haContext.CallService("logger", "set_level", null, data);
    }
}

public partial record LoggerSetDefaultLevelParameters
{
    ///<summary>Default severity level for all integrations.</summary>
    [JsonPropertyName("level")]
    public object? Level { get; init; }
}

public partial class MediaPlayerServices
{
    private readonly IHaContext _haContext;
    public MediaPlayerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Removes all items from the playlist.</summary>
    ///<param name="target">The target for this service call</param>
    public void ClearPlaylist(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "clear_playlist", target, data);
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    ///<param name="target">The target for this service call</param>
    public void Join(ServiceTarget target, MediaPlayerJoinParameters data)
    {
        _haContext.CallService("media_player", "join", target, data);
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    ///<param name="groupMembers">The players which will be synced with the playback specified in `target`. eg: - media_player.multiroom_player2 - media_player.multiroom_player3 </param>
    public void Join(ServiceTarget target, IEnumerable<string> groupMembers)
    {
        _haContext.CallService("media_player", "join", target, new MediaPlayerJoinParameters { GroupMembers = groupMembers });
    }

    ///<summary>Selects the next track.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaNextTrack(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "media_next_track", target, data);
    }

    ///<summary>Pauses.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaPause(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "media_pause", target, data);
    }

    ///<summary>Starts playing.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaPlay(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "media_play", target, data);
    }

    ///<summary>Toggles play/pause.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaPlayPause(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "media_play_pause", target, data);
    }

    ///<summary>Selects the previous track.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaPreviousTrack(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "media_previous_track", target, data);
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaSeek(ServiceTarget target, MediaPlayerMediaSeekParameters data)
    {
        _haContext.CallService("media_player", "media_seek", target, data);
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    ///<param name="seekPosition">Target position in the currently playing media. The format is platform dependent.</param>
    public void MediaSeek(ServiceTarget target, double seekPosition)
    {
        _haContext.CallService("media_player", "media_seek", target, new MediaPlayerMediaSeekParameters { SeekPosition = seekPosition });
    }

    ///<summary>Stops playing.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaStop(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "media_stop", target, data);
    }

    ///<summary>Starts playing specified media.</summary>
    ///<param name="target">The target for this service call</param>
    public void PlayMedia(ServiceTarget target, MediaPlayerPlayMediaParameters data)
    {
        _haContext.CallService("media_player", "play_media", target, data);
    }

    ///<summary>Starts playing specified media.</summary>
    ///<param name="mediaContentId">The ID of the content to play. Platform dependent. eg: https://home-assistant.io/images/cast/splash.png</param>
    ///<param name="mediaContentType">The type of the content to play. Such as image, music, tv show, video, episode, channel, or playlist. eg: music</param>
    ///<param name="enqueue">If the content should be played now or be added to the queue.</param>
    ///<param name="announce">If the media should be played as an announcement. eg: true</param>
    public void PlayMedia(ServiceTarget target, string mediaContentId, string mediaContentType, object? enqueue = null, bool? announce = null)
    {
        _haContext.CallService("media_player", "play_media", target, new MediaPlayerPlayMediaParameters { MediaContentId = mediaContentId, MediaContentType = mediaContentType, Enqueue = enqueue, Announce = announce });
    }

    ///<summary>Playback mode that plays the media in a loop.</summary>
    ///<param name="target">The target for this service call</param>
    public void RepeatSet(ServiceTarget target, MediaPlayerRepeatSetParameters data)
    {
        _haContext.CallService("media_player", "repeat_set", target, data);
    }

    ///<summary>Playback mode that plays the media in a loop.</summary>
    ///<param name="repeat">Repeat mode to set.</param>
    public void RepeatSet(ServiceTarget target, object repeat)
    {
        _haContext.CallService("media_player", "repeat_set", target, new MediaPlayerRepeatSetParameters { Repeat = repeat });
    }

    ///<summary>Selects a specific sound mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectSoundMode(ServiceTarget target, MediaPlayerSelectSoundModeParameters data)
    {
        _haContext.CallService("media_player", "select_sound_mode", target, data);
    }

    ///<summary>Selects a specific sound mode.</summary>
    ///<param name="soundMode">Name of the sound mode to switch to. eg: Music</param>
    public void SelectSoundMode(ServiceTarget target, string? soundMode = null)
    {
        _haContext.CallService("media_player", "select_sound_mode", target, new MediaPlayerSelectSoundModeParameters { SoundMode = soundMode });
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectSource(ServiceTarget target, MediaPlayerSelectSourceParameters data)
    {
        _haContext.CallService("media_player", "select_source", target, data);
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    ///<param name="source">Name of the source to switch to. Platform dependent. eg: video1</param>
    public void SelectSource(ServiceTarget target, string source)
    {
        _haContext.CallService("media_player", "select_source", target, new MediaPlayerSelectSourceParameters { Source = source });
    }

    ///<summary>Playback mode that selects the media in randomized order.</summary>
    ///<param name="target">The target for this service call</param>
    public void ShuffleSet(ServiceTarget target, MediaPlayerShuffleSetParameters data)
    {
        _haContext.CallService("media_player", "shuffle_set", target, data);
    }

    ///<summary>Playback mode that selects the media in randomized order.</summary>
    ///<param name="shuffle">Whether or not shuffle mode is enabled.</param>
    public void ShuffleSet(ServiceTarget target, bool shuffle)
    {
        _haContext.CallService("media_player", "shuffle_set", target, new MediaPlayerShuffleSetParameters { Shuffle = shuffle });
    }

    ///<summary>Toggles a media player on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "toggle", target, data);
    }

    ///<summary>Turns off the power of the media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "turn_off", target, data);
    }

    ///<summary>Turns on the power of the media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "turn_on", target, data);
    }

    ///<summary>Removes the player from a group. Only works on platforms which support player groups.</summary>
    ///<param name="target">The target for this service call</param>
    public void Unjoin(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "unjoin", target, data);
    }

    ///<summary>Turns down the volume.</summary>
    ///<param name="target">The target for this service call</param>
    public void VolumeDown(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "volume_down", target, data);
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void VolumeMute(ServiceTarget target, MediaPlayerVolumeMuteParameters data)
    {
        _haContext.CallService("media_player", "volume_mute", target, data);
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    ///<param name="isVolumeMuted">Defines whether or not it is muted.</param>
    public void VolumeMute(ServiceTarget target, bool isVolumeMuted)
    {
        _haContext.CallService("media_player", "volume_mute", target, new MediaPlayerVolumeMuteParameters { IsVolumeMuted = isVolumeMuted });
    }

    ///<summary>Sets the volume level.</summary>
    ///<param name="target">The target for this service call</param>
    public void VolumeSet(ServiceTarget target, MediaPlayerVolumeSetParameters data)
    {
        _haContext.CallService("media_player", "volume_set", target, data);
    }

    ///<summary>Sets the volume level.</summary>
    ///<param name="volumeLevel">The volume. 0 is inaudible, 1 is the maximum volume.</param>
    public void VolumeSet(ServiceTarget target, double volumeLevel)
    {
        _haContext.CallService("media_player", "volume_set", target, new MediaPlayerVolumeSetParameters { VolumeLevel = volumeLevel });
    }

    ///<summary>Turns up the volume.</summary>
    ///<param name="target">The target for this service call</param>
    public void VolumeUp(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "volume_up", target, data);
    }
}

public partial record MediaPlayerJoinParameters
{
    ///<summary>The players which will be synced with the playback specified in `target`. eg: - media_player.multiroom_player2 - media_player.multiroom_player3 </summary>
    [JsonPropertyName("group_members")]
    public IEnumerable<string>? GroupMembers { get; init; }
}

public partial record MediaPlayerMediaSeekParameters
{
    ///<summary>Target position in the currently playing media. The format is platform dependent.</summary>
    [JsonPropertyName("seek_position")]
    public double? SeekPosition { get; init; }
}

public partial record MediaPlayerPlayMediaParameters
{
    ///<summary>The ID of the content to play. Platform dependent. eg: https://home-assistant.io/images/cast/splash.png</summary>
    [JsonPropertyName("media_content_id")]
    public string? MediaContentId { get; init; }

    ///<summary>The type of the content to play. Such as image, music, tv show, video, episode, channel, or playlist. eg: music</summary>
    [JsonPropertyName("media_content_type")]
    public string? MediaContentType { get; init; }

    ///<summary>If the content should be played now or be added to the queue.</summary>
    [JsonPropertyName("enqueue")]
    public object? Enqueue { get; init; }

    ///<summary>If the media should be played as an announcement. eg: true</summary>
    [JsonPropertyName("announce")]
    public bool? Announce { get; init; }
}

public partial record MediaPlayerRepeatSetParameters
{
    ///<summary>Repeat mode to set.</summary>
    [JsonPropertyName("repeat")]
    public object? Repeat { get; init; }
}

public partial record MediaPlayerSelectSoundModeParameters
{
    ///<summary>Name of the sound mode to switch to. eg: Music</summary>
    [JsonPropertyName("sound_mode")]
    public string? SoundMode { get; init; }
}

public partial record MediaPlayerSelectSourceParameters
{
    ///<summary>Name of the source to switch to. Platform dependent. eg: video1</summary>
    [JsonPropertyName("source")]
    public string? Source { get; init; }
}

public partial record MediaPlayerShuffleSetParameters
{
    ///<summary>Whether or not shuffle mode is enabled.</summary>
    [JsonPropertyName("shuffle")]
    public bool? Shuffle { get; init; }
}

public partial record MediaPlayerVolumeMuteParameters
{
    ///<summary>Defines whether or not it is muted.</summary>
    [JsonPropertyName("is_volume_muted")]
    public bool? IsVolumeMuted { get; init; }
}

public partial record MediaPlayerVolumeSetParameters
{
    ///<summary>The volume. 0 is inaudible, 1 is the maximum volume.</summary>
    [JsonPropertyName("volume_level")]
    public double? VolumeLevel { get; init; }
}

public partial class MqttServices
{
    private readonly IHaContext _haContext;
    public MqttServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Writes all messages on a specific topic into the `mqtt_dump.txt` file in your configuration folder.</summary>
    public void Dump(MqttDumpParameters data)
    {
        _haContext.CallService("mqtt", "dump", null, data);
    }

    ///<summary>Writes all messages on a specific topic into the `mqtt_dump.txt` file in your configuration folder.</summary>
    ///<param name="topic">Topic to listen to. eg: OpenZWave/#</param>
    ///<param name="duration">How long we should listen for messages in seconds.</param>
    public void Dump(string? topic = null, double? duration = null)
    {
        _haContext.CallService("mqtt", "dump", null, new MqttDumpParameters { Topic = topic, Duration = duration });
    }

    ///<summary>Publishes a message to an MQTT topic.</summary>
    public void Publish(MqttPublishParameters data)
    {
        _haContext.CallService("mqtt", "publish", null, data);
    }

    ///<summary>Publishes a message to an MQTT topic.</summary>
    ///<param name="topic">Topic to publish to. eg: /homeassistant/hello</param>
    ///<param name="payload">The payload to publish. eg: The temperature is {{ states(&apos;sensor.temperature&apos;) }}</param>
    ///<param name="evaluatePayload">When `payload` is a Python bytes literal, evaluate the bytes literal and publish the raw data.</param>
    ///<param name="qos">Quality of Service to use. 0: At most once. 1: At least once. 2: Exactly once.</param>
    ///<param name="retain">If the message should have the retain flag set. If set, the broker stores the most recent message on a topic.</param>
    public void Publish(string topic, object payload, bool? evaluatePayload = null, object? qos = null, bool? retain = null)
    {
        _haContext.CallService("mqtt", "publish", null, new MqttPublishParameters { Topic = topic, Payload = payload, EvaluatePayload = evaluatePayload, Qos = qos, Retain = retain });
    }

    ///<summary>Reloads MQTT entities from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("mqtt", "reload", null, data);
    }
}

public partial record MqttDumpParameters
{
    ///<summary>Topic to listen to. eg: OpenZWave/#</summary>
    [JsonPropertyName("topic")]
    public string? Topic { get; init; }

    ///<summary>How long we should listen for messages in seconds.</summary>
    [JsonPropertyName("duration")]
    public double? Duration { get; init; }
}

public partial record MqttPublishParameters
{
    ///<summary>Topic to publish to. eg: /homeassistant/hello</summary>
    [JsonPropertyName("topic")]
    public string? Topic { get; init; }

    ///<summary>The payload to publish. eg: The temperature is {{ states(&apos;sensor.temperature&apos;) }}</summary>
    [JsonPropertyName("payload")]
    public object? Payload { get; init; }

    ///<summary>When `payload` is a Python bytes literal, evaluate the bytes literal and publish the raw data.</summary>
    [JsonPropertyName("evaluate_payload")]
    public bool? EvaluatePayload { get; init; }

    ///<summary>Quality of Service to use. 0: At most once. 1: At least once. 2: Exactly once.</summary>
    [JsonPropertyName("qos")]
    public object? Qos { get; init; }

    ///<summary>If the message should have the retain flag set. If set, the broker stores the most recent message on a topic.</summary>
    [JsonPropertyName("retain")]
    public bool? Retain { get; init; }
}

public partial class NoderedServices
{
    private readonly IHaContext _haContext;
    public NoderedServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Trigger a Node-RED Node</summary>
    ///<param name="target">The target for this service call</param>
    public void Trigger(ServiceTarget target, NoderedTriggerParameters data)
    {
        _haContext.CallService("nodered", "trigger", target, data);
    }

    ///<summary>Trigger a Node-RED Node</summary>
    ///<param name="triggerEntityId">Entity Id to trigger the event node with. Only needed if the node is not triggered by a single entity. eg: sun.sun</param>
    ///<param name="skipCondition">Skip conditions of the node (defaults to false) eg: True</param>
    ///<param name="outputPath">Which output of the node to use (defaults to true, the top output). Only used when skip_condition is set to true. eg: True</param>
    ///<param name="payload">The payload the node will output when triggered. Works only when triggering an entity node, not an event node.</param>
    public void Trigger(ServiceTarget target, object? triggerEntityId = null, object? skipCondition = null, object? outputPath = null, object? payload = null)
    {
        _haContext.CallService("nodered", "trigger", target, new NoderedTriggerParameters { TriggerEntityId = triggerEntityId, SkipCondition = skipCondition, OutputPath = outputPath, Payload = payload });
    }
}

public partial record NoderedTriggerParameters
{
    ///<summary>Entity Id to trigger the event node with. Only needed if the node is not triggered by a single entity. eg: sun.sun</summary>
    [JsonPropertyName("trigger_entity_id")]
    public object? TriggerEntityId { get; init; }

    ///<summary>Skip conditions of the node (defaults to false) eg: True</summary>
    [JsonPropertyName("skip_condition")]
    public object? SkipCondition { get; init; }

    ///<summary>Which output of the node to use (defaults to true, the top output). Only used when skip_condition is set to true. eg: True</summary>
    [JsonPropertyName("output_path")]
    public object? OutputPath { get; init; }

    ///<summary>The payload the node will output when triggered. Works only when triggering an entity node, not an event node.</summary>
    [JsonPropertyName("payload")]
    public object? Payload { get; init; }
}

public partial class NotifyServices
{
    private readonly IHaContext _haContext;
    public NotifyServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sends a notification message using the mobile_app_galaxy_watch4_classic_75re integration.</summary>
    public void MobileAppGalaxyWatch4Classic75re(NotifyMobileAppGalaxyWatch4Classic75reParameters data)
    {
        _haContext.CallService("notify", "mobile_app_galaxy_watch4_classic_75re", null, data);
    }

    ///<summary>Sends a notification message using the mobile_app_galaxy_watch4_classic_75re integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void MobileAppGalaxyWatch4Classic75re(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "mobile_app_galaxy_watch4_classic_75re", null, new NotifyMobileAppGalaxyWatch4Classic75reParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the mobile_app_kaelyn_s10 integration.</summary>
    public void MobileAppKaelynS10(NotifyMobileAppKaelynS10Parameters data)
    {
        _haContext.CallService("notify", "mobile_app_kaelyn_s10", null, data);
    }

    ///<summary>Sends a notification message using the mobile_app_kaelyn_s10 integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void MobileAppKaelynS10(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "mobile_app_kaelyn_s10", null, new NotifyMobileAppKaelynS10Parameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the mobile_app_sm_s901e integration.</summary>
    public void MobileAppSmS901e(NotifyMobileAppSmS901eParameters data)
    {
        _haContext.CallService("notify", "mobile_app_sm_s901e", null, data);
    }

    ///<summary>Sends a notification message using the mobile_app_sm_s901e integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void MobileAppSmS901e(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "mobile_app_sm_s901e", null, new NotifyMobileAppSmS901eParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the notify service.</summary>
    public void Notify(NotifyNotifyParameters data)
    {
        _haContext.CallService("notify", "notify", null, data);
    }

    ///<summary>Sends a notification message using the notify service.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void Notify(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "notify", null, new NotifyNotifyParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification that is visible in the notifications panel.</summary>
    public void PersistentNotification(NotifyPersistentNotificationParameters data)
    {
        _haContext.CallService("notify", "persistent_notification", null, data);
    }

    ///<summary>Sends a notification that is visible in the notifications panel.</summary>
    ///<param name="message">Message body of the notification. eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title">Title of the notification. eg: Your Garage Door Friend</param>
    ///<param name="data">Some integrations provide extended functionality. For information on how to use _data_, refer to the integration documentation.. eg: platform specific</param>
    public void PersistentNotification(string message, string? title = null, object? data = null)
    {
        _haContext.CallService("notify", "persistent_notification", null, new NotifyPersistentNotificationParameters { Message = message, Title = title, Data = data });
    }

    ///<summary>Sends a notification message using the pushbullet service.</summary>
    public void Pushbullet(NotifyPushbulletParameters data)
    {
        _haContext.CallService("notify", "pushbullet", null, data);
    }

    ///<summary>Sends a notification message using the pushbullet service.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void Pushbullet(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "pushbullet", null, new NotifyPushbulletParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message.</summary>
    ///<param name="target">The target for this service call</param>
    public void SendMessage(ServiceTarget target, NotifySendMessageParameters data)
    {
        _haContext.CallService("notify", "send_message", target, data);
    }

    ///<summary>Sends a notification message.</summary>
    ///<param name="message">Your notification message.</param>
    ///<param name="title">Title for your notification message.</param>
    public void SendMessage(ServiceTarget target, string message, string? title = null)
    {
        _haContext.CallService("notify", "send_message", target, new NotifySendMessageParameters { Message = message, Title = title });
    }
}

public partial record NotifyMobileAppGalaxyWatch4Classic75reParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyMobileAppKaelynS10Parameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyMobileAppSmS901eParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyNotifyParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyPersistentNotificationParameters
{
    ///<summary>Message body of the notification. eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Title of the notification. eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>Some integrations provide extended functionality. For information on how to use _data_, refer to the integration documentation.. eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyPushbulletParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifySendMessageParameters
{
    ///<summary>Your notification message.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Title for your notification message.</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }
}

public partial class NumberServices
{
    private readonly IHaContext _haContext;
    public NumberServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets the value of a number.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, NumberSetValueParameters data)
    {
        _haContext.CallService("number", "set_value", target, data);
    }

    ///<summary>Sets the value of a number.</summary>
    ///<param name="value">The target value to set. eg: 42</param>
    public void SetValue(ServiceTarget target, string? value = null)
    {
        _haContext.CallService("number", "set_value", target, new NumberSetValueParameters { Value = value });
    }
}

public partial record NumberSetValueParameters
{
    ///<summary>The target value to set. eg: 42</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }
}

public partial class PersistentNotificationServices
{
    private readonly IHaContext _haContext;
    public PersistentNotificationServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Shows a notification on the notifications panel.</summary>
    public void Create(PersistentNotificationCreateParameters data)
    {
        _haContext.CallService("persistent_notification", "create", null, data);
    }

    ///<summary>Shows a notification on the notifications panel.</summary>
    ///<param name="message">Message body of the notification. eg: Please check your configuration.yaml.</param>
    ///<param name="title">Optional title of the notification. eg: Test notification</param>
    ///<param name="notificationId">ID of the notification. This new notification will overwrite an existing notification with the same ID. eg: 1234</param>
    public void Create(string message, string? title = null, string? notificationId = null)
    {
        _haContext.CallService("persistent_notification", "create", null, new PersistentNotificationCreateParameters { Message = message, Title = title, NotificationId = notificationId });
    }

    ///<summary>Deletes a notification from the notifications panel.</summary>
    public void Dismiss(PersistentNotificationDismissParameters data)
    {
        _haContext.CallService("persistent_notification", "dismiss", null, data);
    }

    ///<summary>Deletes a notification from the notifications panel.</summary>
    ///<param name="notificationId">ID of the notification to be deleted. eg: 1234</param>
    public void Dismiss(string notificationId)
    {
        _haContext.CallService("persistent_notification", "dismiss", null, new PersistentNotificationDismissParameters { NotificationId = notificationId });
    }

    ///<summary>Deletes all notifications from the notifications panel.</summary>
    public void DismissAll(object? data = null)
    {
        _haContext.CallService("persistent_notification", "dismiss_all", null, data);
    }
}

public partial record PersistentNotificationCreateParameters
{
    ///<summary>Message body of the notification. eg: Please check your configuration.yaml.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Optional title of the notification. eg: Test notification</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>ID of the notification. This new notification will overwrite an existing notification with the same ID. eg: 1234</summary>
    [JsonPropertyName("notification_id")]
    public string? NotificationId { get; init; }
}

public partial record PersistentNotificationDismissParameters
{
    ///<summary>ID of the notification to be deleted. eg: 1234</summary>
    [JsonPropertyName("notification_id")]
    public string? NotificationId { get; init; }
}

public partial class PersonServices
{
    private readonly IHaContext _haContext;
    public PersonServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads persons from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("person", "reload", null, data);
    }
}

public partial class QbittorrentServices
{
    private readonly IHaContext _haContext;
    public QbittorrentServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Gets a list of current torrents from all instances of qBittorrent</summary>
    public void GetAllTorrents(QbittorrentGetAllTorrentsParameters data)
    {
        _haContext.CallService("qbittorrent", "get_all_torrents", null, data);
    }

    ///<summary>Gets a list of current torrents from all instances of qBittorrent</summary>
    ///<param name="torrentFilter">What kind of torrents you want to return, such as All or Active. eg: all</param>
    public void GetAllTorrents(object torrentFilter)
    {
        _haContext.CallService("qbittorrent", "get_all_torrents", null, new QbittorrentGetAllTorrentsParameters { TorrentFilter = torrentFilter });
    }

    ///<summary>Gets a list of current torrents from all instances of qBittorrent</summary>
    public Task<JsonElement?> GetAllTorrentsAsync(QbittorrentGetAllTorrentsParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("qbittorrent", "get_all_torrents", null, data);
    }

    ///<summary>Gets a list of current torrents from all instances of qBittorrent</summary>
    ///<param name="torrentFilter">What kind of torrents you want to return, such as All or Active. eg: all</param>
    public Task<JsonElement?> GetAllTorrentsAsync(object torrentFilter)
    {
        return _haContext.CallServiceWithResponseAsync("qbittorrent", "get_all_torrents", null, new QbittorrentGetAllTorrentsParameters { TorrentFilter = torrentFilter });
    }

    ///<summary>Gets a list of current torrents</summary>
    public void GetTorrents(QbittorrentGetTorrentsParameters data)
    {
        _haContext.CallService("qbittorrent", "get_torrents", null, data);
    }

    ///<summary>Gets a list of current torrents</summary>
    ///<param name="deviceId">Which service to grab the list from</param>
    ///<param name="torrentFilter">What kind of torrents you want to return, such as All or Active. eg: all</param>
    public void GetTorrents(string deviceId, object torrentFilter)
    {
        _haContext.CallService("qbittorrent", "get_torrents", null, new QbittorrentGetTorrentsParameters { DeviceId = deviceId, TorrentFilter = torrentFilter });
    }

    ///<summary>Gets a list of current torrents</summary>
    public Task<JsonElement?> GetTorrentsAsync(QbittorrentGetTorrentsParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("qbittorrent", "get_torrents", null, data);
    }

    ///<summary>Gets a list of current torrents</summary>
    ///<param name="deviceId">Which service to grab the list from</param>
    ///<param name="torrentFilter">What kind of torrents you want to return, such as All or Active. eg: all</param>
    public Task<JsonElement?> GetTorrentsAsync(string deviceId, object torrentFilter)
    {
        return _haContext.CallServiceWithResponseAsync("qbittorrent", "get_torrents", null, new QbittorrentGetTorrentsParameters { DeviceId = deviceId, TorrentFilter = torrentFilter });
    }
}

public partial record QbittorrentGetAllTorrentsParameters
{
    ///<summary>What kind of torrents you want to return, such as All or Active. eg: all</summary>
    [JsonPropertyName("torrent_filter")]
    public object? TorrentFilter { get; init; }
}

public partial record QbittorrentGetTorrentsParameters
{
    ///<summary>Which service to grab the list from</summary>
    [JsonPropertyName("device_id")]
    public string? DeviceId { get; init; }

    ///<summary>What kind of torrents you want to return, such as All or Active. eg: all</summary>
    [JsonPropertyName("torrent_filter")]
    public object? TorrentFilter { get; init; }
}

public partial class RecorderServices
{
    private readonly IHaContext _haContext;
    public RecorderServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Stops the recording of events and state changes.</summary>
    public void Disable(object? data = null)
    {
        _haContext.CallService("recorder", "disable", null, data);
    }

    ///<summary>Starts the recording of events and state changes.</summary>
    public void Enable(object? data = null)
    {
        _haContext.CallService("recorder", "enable", null, data);
    }

    ///<summary>Starts purge task - to clean up old data from your database.</summary>
    public void Purge(RecorderPurgeParameters data)
    {
        _haContext.CallService("recorder", "purge", null, data);
    }

    ///<summary>Starts purge task - to clean up old data from your database.</summary>
    ///<param name="keepDays">Number of days to keep the data in the database. Starting today, counting backward. A value of `7` means that everything older than a week will be purged.</param>
    ///<param name="repack">Attempt to save disk space by rewriting the entire database file.</param>
    ///<param name="applyFilter">Apply `entity_id` and `event_type` filters in addition to time-based purge.</param>
    public void Purge(double? keepDays = null, bool? repack = null, bool? applyFilter = null)
    {
        _haContext.CallService("recorder", "purge", null, new RecorderPurgeParameters { KeepDays = keepDays, Repack = repack, ApplyFilter = applyFilter });
    }

    ///<summary>Starts a purge task to remove the data related to specific entities from your database.</summary>
    public void PurgeEntities(RecorderPurgeEntitiesParameters data)
    {
        _haContext.CallService("recorder", "purge_entities", null, data);
    }

    ///<summary>Starts a purge task to remove the data related to specific entities from your database.</summary>
    ///<param name="entityId">List of entities for which the data is to be removed from the recorder database.</param>
    ///<param name="domains">List of domains for which the data needs to be removed from the recorder database. eg: sun</param>
    ///<param name="entityGlobs">List of glob patterns used to select the entities for which the data is to be removed from the recorder database. eg: domain*.object_id*</param>
    ///<param name="keepDays">Number of days to keep the data for rows matching the filter. Starting today, counting backward. A value of `7` means that everything older than a week will be purged. The default of 0 days will remove all matching rows immediately.</param>
    public void PurgeEntities(IEnumerable<string>? entityId = null, object? domains = null, object? entityGlobs = null, double? keepDays = null)
    {
        _haContext.CallService("recorder", "purge_entities", null, new RecorderPurgeEntitiesParameters { EntityId = entityId, Domains = domains, EntityGlobs = entityGlobs, KeepDays = keepDays });
    }
}

public partial record RecorderPurgeParameters
{
    ///<summary>Number of days to keep the data in the database. Starting today, counting backward. A value of `7` means that everything older than a week will be purged.</summary>
    [JsonPropertyName("keep_days")]
    public double? KeepDays { get; init; }

    ///<summary>Attempt to save disk space by rewriting the entire database file.</summary>
    [JsonPropertyName("repack")]
    public bool? Repack { get; init; }

    ///<summary>Apply `entity_id` and `event_type` filters in addition to time-based purge.</summary>
    [JsonPropertyName("apply_filter")]
    public bool? ApplyFilter { get; init; }
}

public partial record RecorderPurgeEntitiesParameters
{
    ///<summary>List of entities for which the data is to be removed from the recorder database.</summary>
    [JsonPropertyName("entity_id")]
    public IEnumerable<string>? EntityId { get; init; }

    ///<summary>List of domains for which the data needs to be removed from the recorder database. eg: sun</summary>
    [JsonPropertyName("domains")]
    public object? Domains { get; init; }

    ///<summary>List of glob patterns used to select the entities for which the data is to be removed from the recorder database. eg: domain*.object_id*</summary>
    [JsonPropertyName("entity_globs")]
    public object? EntityGlobs { get; init; }

    ///<summary>Number of days to keep the data for rows matching the filter. Starting today, counting backward. A value of `7` means that everything older than a week will be purged. The default of 0 days will remove all matching rows immediately.</summary>
    [JsonPropertyName("keep_days")]
    public double? KeepDays { get; init; }
}

public partial class RemoteServices
{
    private readonly IHaContext _haContext;
    public RemoteServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Deletes a command or a list of commands from the database.</summary>
    ///<param name="target">The target for this service call</param>
    public void DeleteCommand(ServiceTarget target, RemoteDeleteCommandParameters data)
    {
        _haContext.CallService("remote", "delete_command", target, data);
    }

    ///<summary>Deletes a command or a list of commands from the database.</summary>
    ///<param name="device">Device from which commands will be deleted. eg: television</param>
    ///<param name="command">The single command or the list of commands to be deleted. eg: Mute</param>
    public void DeleteCommand(ServiceTarget target, object command, string? device = null)
    {
        _haContext.CallService("remote", "delete_command", target, new RemoteDeleteCommandParameters { Device = device, Command = command });
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    ///<param name="target">The target for this service call</param>
    public void LearnCommand(ServiceTarget target, RemoteLearnCommandParameters data)
    {
        _haContext.CallService("remote", "learn_command", target, data);
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    ///<param name="device">Device ID to learn command from. eg: television</param>
    ///<param name="command">A single command or a list of commands to learn. eg: Turn on</param>
    ///<param name="commandType">The type of command to be learned.</param>
    ///<param name="alternative">If code must be stored as an alternative. This is useful for discrete codes. Discrete codes are used for toggles that only perform one function. For example, a code to only turn a device on. If it is on already, sending the code won&apos;t change the state.</param>
    ///<param name="timeout">Timeout for the command to be learned.</param>
    public void LearnCommand(ServiceTarget target, string? device = null, object? command = null, object? commandType = null, bool? alternative = null, long? timeout = null)
    {
        _haContext.CallService("remote", "learn_command", target, new RemoteLearnCommandParameters { Device = device, Command = command, CommandType = commandType, Alternative = alternative, Timeout = timeout });
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    ///<param name="target">The target for this service call</param>
    public void SendCommand(ServiceTarget target, RemoteSendCommandParameters data)
    {
        _haContext.CallService("remote", "send_command", target, data);
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    ///<param name="device">Device ID to send command to. eg: 32756745</param>
    ///<param name="command">A single command or a list of commands to send. eg: Play</param>
    ///<param name="numRepeats">The number of times you want to repeat the commands.</param>
    ///<param name="delaySecs">The time you want to wait in between repeated commands.</param>
    ///<param name="holdSecs">The time you want to have it held before the release is send.</param>
    public void SendCommand(ServiceTarget target, object command, string? device = null, double? numRepeats = null, double? delaySecs = null, double? holdSecs = null)
    {
        _haContext.CallService("remote", "send_command", target, new RemoteSendCommandParameters { Device = device, Command = command, NumRepeats = numRepeats, DelaySecs = delaySecs, HoldSecs = holdSecs });
    }

    ///<summary>Sends the toggle command.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("remote", "toggle", target, data);
    }

    ///<summary>Sends the turn off command.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("remote", "turn_off", target, data);
    }

    ///<summary>Sends the turn on command.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, RemoteTurnOnParameters data)
    {
        _haContext.CallService("remote", "turn_on", target, data);
    }

    ///<summary>Sends the turn on command.</summary>
    ///<param name="activity">Activity ID or activity name to be started. eg: BedroomTV</param>
    public void TurnOn(ServiceTarget target, string? activity = null)
    {
        _haContext.CallService("remote", "turn_on", target, new RemoteTurnOnParameters { Activity = activity });
    }
}

public partial record RemoteDeleteCommandParameters
{
    ///<summary>Device from which commands will be deleted. eg: television</summary>
    [JsonPropertyName("device")]
    public string? Device { get; init; }

    ///<summary>The single command or the list of commands to be deleted. eg: Mute</summary>
    [JsonPropertyName("command")]
    public object? Command { get; init; }
}

public partial record RemoteLearnCommandParameters
{
    ///<summary>Device ID to learn command from. eg: television</summary>
    [JsonPropertyName("device")]
    public string? Device { get; init; }

    ///<summary>A single command or a list of commands to learn. eg: Turn on</summary>
    [JsonPropertyName("command")]
    public object? Command { get; init; }

    ///<summary>The type of command to be learned.</summary>
    [JsonPropertyName("command_type")]
    public object? CommandType { get; init; }

    ///<summary>If code must be stored as an alternative. This is useful for discrete codes. Discrete codes are used for toggles that only perform one function. For example, a code to only turn a device on. If it is on already, sending the code won&apos;t change the state.</summary>
    [JsonPropertyName("alternative")]
    public bool? Alternative { get; init; }

    ///<summary>Timeout for the command to be learned.</summary>
    [JsonPropertyName("timeout")]
    public long? Timeout { get; init; }
}

public partial record RemoteSendCommandParameters
{
    ///<summary>Device ID to send command to. eg: 32756745</summary>
    [JsonPropertyName("device")]
    public string? Device { get; init; }

    ///<summary>A single command or a list of commands to send. eg: Play</summary>
    [JsonPropertyName("command")]
    public object? Command { get; init; }

    ///<summary>The number of times you want to repeat the commands.</summary>
    [JsonPropertyName("num_repeats")]
    public double? NumRepeats { get; init; }

    ///<summary>The time you want to wait in between repeated commands.</summary>
    [JsonPropertyName("delay_secs")]
    public double? DelaySecs { get; init; }

    ///<summary>The time you want to have it held before the release is send.</summary>
    [JsonPropertyName("hold_secs")]
    public double? HoldSecs { get; init; }
}

public partial record RemoteTurnOnParameters
{
    ///<summary>Activity ID or activity name to be started. eg: BedroomTV</summary>
    [JsonPropertyName("activity")]
    public string? Activity { get; init; }
}

public partial class RestServices
{
    private readonly IHaContext _haContext;
    public RestServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads REST entities from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("rest", "reload", null, data);
    }
}

public partial class RestCommandServices
{
    private readonly IHaContext _haContext;
    public RestCommandServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public void GetDeviceInfo(object? data = null)
    {
        _haContext.CallService("rest_command", "get_device_info", null, data);
    }

    public Task<JsonElement?> GetDeviceInfoAsync(object? data = null)
    {
        return _haContext.CallServiceWithResponseAsync("rest_command", "get_device_info", null, data);
    }

    ///<summary>Reloads RESTful commands from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("rest_command", "reload", null, data);
    }
}

public partial class SceneServices
{
    private readonly IHaContext _haContext;
    public SceneServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Activates a scene with configuration.</summary>
    public void Apply(SceneApplyParameters data)
    {
        _haContext.CallService("scene", "apply", null, data);
    }

    ///<summary>Activates a scene with configuration.</summary>
    ///<param name="entities">List of entities and their target state. eg: light.kitchen: &quot;on&quot; light.ceiling:   state: &quot;on&quot;   brightness: 80 </param>
    ///<param name="transition">Time it takes the devices to transition into the states defined in the scene.</param>
    public void Apply(object entities, double? transition = null)
    {
        _haContext.CallService("scene", "apply", null, new SceneApplyParameters { Entities = entities, Transition = transition });
    }

    ///<summary>Creates a new scene.</summary>
    public void Create(SceneCreateParameters data)
    {
        _haContext.CallService("scene", "create", null, data);
    }

    ///<summary>Creates a new scene.</summary>
    ///<param name="sceneId">The entity ID of the new scene. eg: all_lights</param>
    ///<param name="entities">List of entities and their target state. If your entities are already in the target state right now, use `snapshot_entities` instead. eg: light.tv_back_light: &quot;on&quot; light.ceiling:   state: &quot;on&quot;   brightness: 200 </param>
    ///<param name="snapshotEntities">List of entities to be included in the snapshot. By taking a snapshot, you record the current state of those entities. If you do not want to use the current state of all your entities for this scene, you can combine the `snapshot_entities` with `entities`. eg: - light.ceiling - light.kitchen </param>
    public void Create(string sceneId, object? entities = null, IEnumerable<string>? snapshotEntities = null)
    {
        _haContext.CallService("scene", "create", null, new SceneCreateParameters { SceneId = sceneId, Entities = entities, SnapshotEntities = snapshotEntities });
    }

    ///<summary>Deletes a dynamically created scene.</summary>
    ///<param name="target">The target for this service call</param>
    public void Delete(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("scene", "delete", target, data);
    }

    ///<summary>Reloads the scenes from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("scene", "reload", null, data);
    }

    ///<summary>Activates a scene.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, SceneTurnOnParameters data)
    {
        _haContext.CallService("scene", "turn_on", target, data);
    }

    ///<summary>Activates a scene.</summary>
    ///<param name="transition">Time it takes the devices to transition into the states defined in the scene.</param>
    public void TurnOn(ServiceTarget target, double? transition = null)
    {
        _haContext.CallService("scene", "turn_on", target, new SceneTurnOnParameters { Transition = transition });
    }
}

public partial record SceneApplyParameters
{
    ///<summary>List of entities and their target state. eg: light.kitchen: &quot;on&quot; light.ceiling:   state: &quot;on&quot;   brightness: 80 </summary>
    [JsonPropertyName("entities")]
    public object? Entities { get; init; }

    ///<summary>Time it takes the devices to transition into the states defined in the scene.</summary>
    [JsonPropertyName("transition")]
    public double? Transition { get; init; }
}

public partial record SceneCreateParameters
{
    ///<summary>The entity ID of the new scene. eg: all_lights</summary>
    [JsonPropertyName("scene_id")]
    public string? SceneId { get; init; }

    ///<summary>List of entities and their target state. If your entities are already in the target state right now, use `snapshot_entities` instead. eg: light.tv_back_light: &quot;on&quot; light.ceiling:   state: &quot;on&quot;   brightness: 200 </summary>
    [JsonPropertyName("entities")]
    public object? Entities { get; init; }

    ///<summary>List of entities to be included in the snapshot. By taking a snapshot, you record the current state of those entities. If you do not want to use the current state of all your entities for this scene, you can combine the `snapshot_entities` with `entities`. eg: - light.ceiling - light.kitchen </summary>
    [JsonPropertyName("snapshot_entities")]
    public IEnumerable<string>? SnapshotEntities { get; init; }
}

public partial record SceneTurnOnParameters
{
    ///<summary>Time it takes the devices to transition into the states defined in the scene.</summary>
    [JsonPropertyName("transition")]
    public double? Transition { get; init; }
}

public partial class ScheduleServices
{
    private readonly IHaContext _haContext;
    public ScheduleServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads schedules from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("schedule", "reload", null, data);
    }
}

public partial class ScriptServices
{
    private readonly IHaContext _haContext;
    public ScriptServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public void FetchDeviceInfo(object? data = null)
    {
        _haContext.CallService("script", "fetch_device_info", null, data);
    }

    public Task<JsonElement?> FetchDeviceInfoAsync(object? data = null)
    {
        return _haContext.CallServiceWithResponseAsync("script", "fetch_device_info", null, data);
    }

    ///<summary>Reloads all the available scripts.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("script", "reload", null, data);
    }

    ///<summary>Toggle a script. Starts it, if isn&apos;t running, stops it otherwise.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("script", "toggle", target, data);
    }

    ///<summary>Stops a running script.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("script", "turn_off", target, data);
    }

    ///<summary>Runs the sequence of actions defined in a script.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("script", "turn_on", target, data);
    }
}

public partial class SelectServices
{
    private readonly IHaContext _haContext;
    public SelectServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Selects the first option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectFirst(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("select", "select_first", target, data);
    }

    ///<summary>Selects the last option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectLast(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("select", "select_last", target, data);
    }

    ///<summary>Selects the next option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectNext(ServiceTarget target, SelectSelectNextParameters data)
    {
        _haContext.CallService("select", "select_next", target, data);
    }

    ///<summary>Selects the next option.</summary>
    ///<param name="cycle">If the option should cycle from the last to the first.</param>
    public void SelectNext(ServiceTarget target, bool? cycle = null)
    {
        _haContext.CallService("select", "select_next", target, new SelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectOption(ServiceTarget target, SelectSelectOptionParameters data)
    {
        _haContext.CallService("select", "select_option", target, data);
    }

    ///<summary>Selects an option.</summary>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public void SelectOption(ServiceTarget target, string option)
    {
        _haContext.CallService("select", "select_option", target, new SelectSelectOptionParameters { Option = option });
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectPrevious(ServiceTarget target, SelectSelectPreviousParameters data)
    {
        _haContext.CallService("select", "select_previous", target, data);
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="cycle">If the option should cycle from the first to the last.</param>
    public void SelectPrevious(ServiceTarget target, bool? cycle = null)
    {
        _haContext.CallService("select", "select_previous", target, new SelectSelectPreviousParameters { Cycle = cycle });
    }
}

public partial record SelectSelectNextParameters
{
    ///<summary>If the option should cycle from the last to the first.</summary>
    [JsonPropertyName("cycle")]
    public bool? Cycle { get; init; }
}

public partial record SelectSelectOptionParameters
{
    ///<summary>Option to be selected. eg: &quot;Item A&quot;</summary>
    [JsonPropertyName("option")]
    public string? Option { get; init; }
}

public partial record SelectSelectPreviousParameters
{
    ///<summary>If the option should cycle from the first to the last.</summary>
    [JsonPropertyName("cycle")]
    public bool? Cycle { get; init; }
}

public partial class SirenServices
{
    private readonly IHaContext _haContext;
    public SirenServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Toggles the siren on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("siren", "toggle", target, data);
    }

    ///<summary>Turns the siren off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("siren", "turn_off", target, data);
    }

    ///<summary>Turns the siren on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, SirenTurnOnParameters data)
    {
        _haContext.CallService("siren", "turn_on", target, data);
    }

    ///<summary>Turns the siren on.</summary>
    ///<param name="tone">The tone to emit. When `available_tones` property is a map, either the key or the value can be used. Must be supported by the integration. eg: fire</param>
    ///<param name="volumeLevel">The volume. 0 is inaudible, 1 is the maximum volume. Must be supported by the integration. eg: 0.5</param>
    ///<param name="duration">Number of seconds the sound is played. Must be supported by the integration. eg: 15</param>
    public void TurnOn(ServiceTarget target, string? tone = null, double? volumeLevel = null, string? duration = null)
    {
        _haContext.CallService("siren", "turn_on", target, new SirenTurnOnParameters { Tone = tone, VolumeLevel = volumeLevel, Duration = duration });
    }
}

public partial record SirenTurnOnParameters
{
    ///<summary>The tone to emit. When `available_tones` property is a map, either the key or the value can be used. Must be supported by the integration. eg: fire</summary>
    [JsonPropertyName("tone")]
    public string? Tone { get; init; }

    ///<summary>The volume. 0 is inaudible, 1 is the maximum volume. Must be supported by the integration. eg: 0.5</summary>
    [JsonPropertyName("volume_level")]
    public double? VolumeLevel { get; init; }

    ///<summary>Number of seconds the sound is played. Must be supported by the integration. eg: 15</summary>
    [JsonPropertyName("duration")]
    public string? Duration { get; init; }
}

public partial class SonoffServices
{
    private readonly IHaContext _haContext;
    public SonoffServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sends a command to a device.</summary>
    public void SendCommand(SonoffSendCommandParameters data)
    {
        _haContext.CallService("sonoff", "send_command", null, data);
    }

    ///<summary>Sends a command to a device.</summary>
    ///<param name="device">Device ID to send command to. eg: 1000123456</param>
    ///<param name="cmd">A single command to send. eg: switch</param>
    public void SendCommand(object? device = null, object? cmd = null)
    {
        _haContext.CallService("sonoff", "send_command", null, new SonoffSendCommandParameters { Device = device, Cmd = cmd });
    }
}

public partial record SonoffSendCommandParameters
{
    ///<summary>Device ID to send command to. eg: 1000123456</summary>
    [JsonPropertyName("device")]
    public object? Device { get; init; }

    ///<summary>A single command to send. eg: switch</summary>
    [JsonPropertyName("cmd")]
    public object? Cmd { get; init; }
}

public partial class SwitchServices
{
    private readonly IHaContext _haContext;
    public SwitchServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Toggles a switch on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("switch", "toggle", target, data);
    }

    ///<summary>Turns a switch off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("switch", "turn_off", target, data);
    }

    ///<summary>Turns a switch on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("switch", "turn_on", target, data);
    }
}

public partial class SystemLogServices
{
    private readonly IHaContext _haContext;
    public SystemLogServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Deletes all log entries.</summary>
    public void Clear(object? data = null)
    {
        _haContext.CallService("system_log", "clear", null, data);
    }

    ///<summary>Write log entry.</summary>
    public void Write(SystemLogWriteParameters data)
    {
        _haContext.CallService("system_log", "write", null, data);
    }

    ///<summary>Write log entry.</summary>
    ///<param name="message">Message to log. eg: Something went wrong</param>
    ///<param name="level">Log level.</param>
    ///<param name="logger">Logger name under which to log the message. Defaults to `system_log.external`. eg: mycomponent.myplatform</param>
    public void Write(string message, object? level = null, string? logger = null)
    {
        _haContext.CallService("system_log", "write", null, new SystemLogWriteParameters { Message = message, Level = level, Logger = logger });
    }
}

public partial record SystemLogWriteParameters
{
    ///<summary>Message to log. eg: Something went wrong</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Log level.</summary>
    [JsonPropertyName("level")]
    public object? Level { get; init; }

    ///<summary>Logger name under which to log the message. Defaults to `system_log.external`. eg: mycomponent.myplatform</summary>
    [JsonPropertyName("logger")]
    public string? Logger { get; init; }
}

public partial class TemplateServices
{
    private readonly IHaContext _haContext;
    public TemplateServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads template entities from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("template", "reload", null, data);
    }
}

public partial class TimerServices
{
    private readonly IHaContext _haContext;
    public TimerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Resets a timer&apos;s duration to the last known initial value without firing the timer finished event.</summary>
    ///<param name="target">The target for this service call</param>
    public void Cancel(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("timer", "cancel", target, data);
    }

    ///<summary>Changes a timer by adding or subtracting a given duration.</summary>
    ///<param name="target">The target for this service call</param>
    public void Change(ServiceTarget target, TimerChangeParameters data)
    {
        _haContext.CallService("timer", "change", target, data);
    }

    ///<summary>Changes a timer by adding or subtracting a given duration.</summary>
    ///<param name="duration">Duration to add to or subtract from the running timer. eg: 00:01:00, 60 or -60</param>
    public void Change(ServiceTarget target, string duration)
    {
        _haContext.CallService("timer", "change", target, new TimerChangeParameters { Duration = duration });
    }

    ///<summary>Finishes a running timer earlier than scheduled.</summary>
    ///<param name="target">The target for this service call</param>
    public void Finish(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("timer", "finish", target, data);
    }

    ///<summary>Pauses a running timer, retaining the remaining duration for later continuation.</summary>
    ///<param name="target">The target for this service call</param>
    public void Pause(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("timer", "pause", target, data);
    }

    ///<summary>Reloads timers from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("timer", "reload", null, data);
    }

    ///<summary>Starts a timer or restarts it with a provided duration.</summary>
    ///<param name="target">The target for this service call</param>
    public void Start(ServiceTarget target, TimerStartParameters data)
    {
        _haContext.CallService("timer", "start", target, data);
    }

    ///<summary>Starts a timer or restarts it with a provided duration.</summary>
    ///<param name="duration">Custom duration to restart the timer with. eg: 00:01:00 or 60</param>
    public void Start(ServiceTarget target, string? duration = null)
    {
        _haContext.CallService("timer", "start", target, new TimerStartParameters { Duration = duration });
    }
}

public partial record TimerChangeParameters
{
    ///<summary>Duration to add to or subtract from the running timer. eg: 00:01:00, 60 or -60</summary>
    [JsonPropertyName("duration")]
    public string? Duration { get; init; }
}

public partial record TimerStartParameters
{
    ///<summary>Custom duration to restart the timer with. eg: 00:01:00 or 60</summary>
    [JsonPropertyName("duration")]
    public string? Duration { get; init; }
}

public partial class TodoServices
{
    private readonly IHaContext _haContext;
    public TodoServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Add a new to-do list item.</summary>
    ///<param name="target">The target for this service call</param>
    public void AddItem(ServiceTarget target, TodoAddItemParameters data)
    {
        _haContext.CallService("todo", "add_item", target, data);
    }

    ///<summary>Add a new to-do list item.</summary>
    ///<param name="item">The name that represents the to-do item. eg: Submit income tax return</param>
    ///<param name="dueDate">The date the to-do item is expected to be completed. eg: 2023-11-17</param>
    ///<param name="dueDatetime">The date and time the to-do item is expected to be completed. eg: 2023-11-17 13:30:00</param>
    ///<param name="description">A more complete description of the to-do item than provided by the item name. eg: A more complete description of the to-do item than that provided by the summary.</param>
    public void AddItem(ServiceTarget target, string item, DateOnly? dueDate = null, DateTime? dueDatetime = null, string? description = null)
    {
        _haContext.CallService("todo", "add_item", target, new TodoAddItemParameters { Item = item, DueDate = dueDate, DueDatetime = dueDatetime, Description = description });
    }

    ///<summary>Get items on a to-do list.</summary>
    ///<param name="target">The target for this service call</param>
    public void GetItems(ServiceTarget target, TodoGetItemsParameters data)
    {
        _haContext.CallService("todo", "get_items", target, data);
    }

    ///<summary>Get items on a to-do list.</summary>
    ///<param name="status">Only return to-do items with the specified statuses. Returns not completed actions by default. eg: needs_action</param>
    public void GetItems(ServiceTarget target, IEnumerable<object>? status = null)
    {
        _haContext.CallService("todo", "get_items", target, new TodoGetItemsParameters { Status = status });
    }

    ///<summary>Get items on a to-do list.</summary>
    ///<param name="target">The target for this service call</param>
    public Task<JsonElement?> GetItemsAsync(ServiceTarget target, TodoGetItemsParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("todo", "get_items", target, data);
    }

    ///<summary>Get items on a to-do list.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="status">Only return to-do items with the specified statuses. Returns not completed actions by default. eg: needs_action</param>
    public Task<JsonElement?> GetItemsAsync(ServiceTarget target, IEnumerable<object>? status = null)
    {
        return _haContext.CallServiceWithResponseAsync("todo", "get_items", target, new TodoGetItemsParameters { Status = status });
    }

    ///<summary>Remove all to-do list items that have been completed.</summary>
    ///<param name="target">The target for this service call</param>
    public void RemoveCompletedItems(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("todo", "remove_completed_items", target, data);
    }

    ///<summary>Remove an existing to-do list item by its name.</summary>
    ///<param name="target">The target for this service call</param>
    public void RemoveItem(ServiceTarget target, TodoRemoveItemParameters data)
    {
        _haContext.CallService("todo", "remove_item", target, data);
    }

    ///<summary>Remove an existing to-do list item by its name.</summary>
    ///<param name="item">The name for the to-do list item.</param>
    public void RemoveItem(ServiceTarget target, string item)
    {
        _haContext.CallService("todo", "remove_item", target, new TodoRemoveItemParameters { Item = item });
    }

    ///<summary>Update an existing to-do list item based on its name.</summary>
    ///<param name="target">The target for this service call</param>
    public void UpdateItem(ServiceTarget target, TodoUpdateItemParameters data)
    {
        _haContext.CallService("todo", "update_item", target, data);
    }

    ///<summary>Update an existing to-do list item based on its name.</summary>
    ///<param name="item">The current name of the to-do item. eg: Submit income tax return</param>
    ///<param name="rename">The new name for the to-do item eg: Something else</param>
    ///<param name="status">A status or confirmation of the to-do item. eg: needs_action</param>
    ///<param name="dueDate">The date the to-do item is expected to be completed. eg: 2023-11-17</param>
    ///<param name="dueDatetime">The date and time the to-do item is expected to be completed. eg: 2023-11-17 13:30:00</param>
    ///<param name="description">A more complete description of the to-do item than provided by the item name. eg: A more complete description of the to-do item than that provided by the summary.</param>
    public void UpdateItem(ServiceTarget target, string item, string? rename = null, object? status = null, DateOnly? dueDate = null, DateTime? dueDatetime = null, string? description = null)
    {
        _haContext.CallService("todo", "update_item", target, new TodoUpdateItemParameters { Item = item, Rename = rename, Status = status, DueDate = dueDate, DueDatetime = dueDatetime, Description = description });
    }
}

public partial record TodoAddItemParameters
{
    ///<summary>The name that represents the to-do item. eg: Submit income tax return</summary>
    [JsonPropertyName("item")]
    public string? Item { get; init; }

    ///<summary>The date the to-do item is expected to be completed. eg: 2023-11-17</summary>
    [JsonPropertyName("due_date")]
    public DateOnly? DueDate { get; init; }

    ///<summary>The date and time the to-do item is expected to be completed. eg: 2023-11-17 13:30:00</summary>
    [JsonPropertyName("due_datetime")]
    public DateTime? DueDatetime { get; init; }

    ///<summary>A more complete description of the to-do item than provided by the item name. eg: A more complete description of the to-do item than that provided by the summary.</summary>
    [JsonPropertyName("description")]
    public string? Description { get; init; }
}

public partial record TodoGetItemsParameters
{
    ///<summary>Only return to-do items with the specified statuses. Returns not completed actions by default. eg: needs_action</summary>
    [JsonPropertyName("status")]
    public IEnumerable<object>? Status { get; init; }
}

public partial record TodoRemoveItemParameters
{
    ///<summary>The name for the to-do list item.</summary>
    [JsonPropertyName("item")]
    public string? Item { get; init; }
}

public partial record TodoUpdateItemParameters
{
    ///<summary>The current name of the to-do item. eg: Submit income tax return</summary>
    [JsonPropertyName("item")]
    public string? Item { get; init; }

    ///<summary>The new name for the to-do item eg: Something else</summary>
    [JsonPropertyName("rename")]
    public string? Rename { get; init; }

    ///<summary>A status or confirmation of the to-do item. eg: needs_action</summary>
    [JsonPropertyName("status")]
    public object? Status { get; init; }

    ///<summary>The date the to-do item is expected to be completed. eg: 2023-11-17</summary>
    [JsonPropertyName("due_date")]
    public DateOnly? DueDate { get; init; }

    ///<summary>The date and time the to-do item is expected to be completed. eg: 2023-11-17 13:30:00</summary>
    [JsonPropertyName("due_datetime")]
    public DateTime? DueDatetime { get; init; }

    ///<summary>A more complete description of the to-do item than provided by the item name. eg: A more complete description of the to-do item than that provided by the summary.</summary>
    [JsonPropertyName("description")]
    public string? Description { get; init; }
}

public partial class TtsServices
{
    private readonly IHaContext _haContext;
    public TtsServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Removes all cached text-to-speech files and purges the memory.</summary>
    public void ClearCache(object? data = null)
    {
        _haContext.CallService("tts", "clear_cache", null, data);
    }

    ///<summary>Say something using text-to-speech on a media player with cloud.</summary>
    public void CloudSay(TtsCloudSayParameters data)
    {
        _haContext.CallService("tts", "cloud_say", null, data);
    }

    ///<summary>Say something using text-to-speech on a media player with cloud.</summary>
    ///<param name="entityId"></param>
    ///<param name="message"> eg: My name is hanna</param>
    ///<param name="cache"></param>
    ///<param name="language"> eg: ru</param>
    ///<param name="options"> eg: platform specific</param>
    public void CloudSay(string entityId, string message, bool? cache = null, string? language = null, object? options = null)
    {
        _haContext.CallService("tts", "cloud_say", null, new TtsCloudSayParameters { EntityId = entityId, Message = message, Cache = cache, Language = language, Options = options });
    }

    ///<summary>Say something using text-to-speech on a media player with google_translate.</summary>
    public void GoogleTranslateSay(TtsGoogleTranslateSayParameters data)
    {
        _haContext.CallService("tts", "google_translate_say", null, data);
    }

    ///<summary>Say something using text-to-speech on a media player with google_translate.</summary>
    ///<param name="entityId"></param>
    ///<param name="message"> eg: My name is hanna</param>
    ///<param name="cache"></param>
    ///<param name="language"> eg: ru</param>
    ///<param name="options"> eg: platform specific</param>
    public void GoogleTranslateSay(string entityId, string message, bool? cache = null, string? language = null, object? options = null)
    {
        _haContext.CallService("tts", "google_translate_say", null, new TtsGoogleTranslateSayParameters { EntityId = entityId, Message = message, Cache = cache, Language = language, Options = options });
    }

    ///<summary>Speaks something using text-to-speech on a media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void Speak(ServiceTarget target, TtsSpeakParameters data)
    {
        _haContext.CallService("tts", "speak", target, data);
    }

    ///<summary>Speaks something using text-to-speech on a media player.</summary>
    ///<param name="mediaPlayerEntityId">Media players to play the message.</param>
    ///<param name="message">The text you want to convert into speech so that you can listen to it on your device. eg: My name is hanna</param>
    ///<param name="cache">Stores this message locally so that when the text is requested again, the output can be produced more quickly.</param>
    ///<param name="language">Language to use for speech generation. eg: ru</param>
    ///<param name="options">A dictionary containing integration-specific options. eg: platform specific</param>
    public void Speak(ServiceTarget target, string mediaPlayerEntityId, string message, bool? cache = null, string? language = null, object? options = null)
    {
        _haContext.CallService("tts", "speak", target, new TtsSpeakParameters { MediaPlayerEntityId = mediaPlayerEntityId, Message = message, Cache = cache, Language = language, Options = options });
    }
}

public partial record TtsCloudSayParameters
{
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary> eg: My name is hanna</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    [JsonPropertyName("cache")]
    public bool? Cache { get; init; }

    ///<summary> eg: ru</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }
}

public partial record TtsGoogleTranslateSayParameters
{
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary> eg: My name is hanna</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    [JsonPropertyName("cache")]
    public bool? Cache { get; init; }

    ///<summary> eg: ru</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }
}

public partial record TtsSpeakParameters
{
    ///<summary>Media players to play the message.</summary>
    [JsonPropertyName("media_player_entity_id")]
    public string? MediaPlayerEntityId { get; init; }

    ///<summary>The text you want to convert into speech so that you can listen to it on your device. eg: My name is hanna</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Stores this message locally so that when the text is requested again, the output can be produced more quickly.</summary>
    [JsonPropertyName("cache")]
    public bool? Cache { get; init; }

    ///<summary>Language to use for speech generation. eg: ru</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary>A dictionary containing integration-specific options. eg: platform specific</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }
}

public partial class UpdateServices
{
    private readonly IHaContext _haContext;
    public UpdateServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Removes the skipped version marker from an update.</summary>
    ///<param name="target">The target for this service call</param>
    public void ClearSkipped(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("update", "clear_skipped", target, data);
    }

    ///<summary>Installs an update for a device or service.</summary>
    ///<param name="target">The target for this service call</param>
    public void Install(ServiceTarget target, UpdateInstallParameters data)
    {
        _haContext.CallService("update", "install", target, data);
    }

    ///<summary>Installs an update for a device or service.</summary>
    ///<param name="version">The version to install. If omitted, the latest version will be installed. eg: 1.0.0</param>
    ///<param name="backup">If supported by the integration, this creates a backup before starting the update.</param>
    public void Install(ServiceTarget target, string? version = null, bool? backup = null)
    {
        _haContext.CallService("update", "install", target, new UpdateInstallParameters { Version = version, Backup = backup });
    }

    ///<summary>Marks currently available update as skipped.</summary>
    ///<param name="target">The target for this service call</param>
    public void Skip(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("update", "skip", target, data);
    }
}

public partial record UpdateInstallParameters
{
    ///<summary>The version to install. If omitted, the latest version will be installed. eg: 1.0.0</summary>
    [JsonPropertyName("version")]
    public string? Version { get; init; }

    ///<summary>If supported by the integration, this creates a backup before starting the update.</summary>
    [JsonPropertyName("backup")]
    public bool? Backup { get; init; }
}

public partial class VacuumServices
{
    private readonly IHaContext _haContext;
    public VacuumServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Tells the vacuum cleaner to do a spot clean-up.</summary>
    ///<param name="target">The target for this service call</param>
    public void CleanSpot(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("vacuum", "clean_spot", target, data);
    }

    ///<summary>Locates the vacuum cleaner robot.</summary>
    ///<param name="target">The target for this service call</param>
    public void Locate(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("vacuum", "locate", target, data);
    }

    ///<summary>Pauses the cleaning task.</summary>
    ///<param name="target">The target for this service call</param>
    public void Pause(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("vacuum", "pause", target, data);
    }

    ///<summary>Tells the vacuum cleaner to return to its dock.</summary>
    ///<param name="target">The target for this service call</param>
    public void ReturnToBase(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("vacuum", "return_to_base", target, data);
    }

    ///<summary>Sends a command to the vacuum cleaner.</summary>
    ///<param name="target">The target for this service call</param>
    public void SendCommand(ServiceTarget target, VacuumSendCommandParameters data)
    {
        _haContext.CallService("vacuum", "send_command", target, data);
    }

    ///<summary>Sends a command to the vacuum cleaner.</summary>
    ///<param name="command">Command to execute. The commands are integration-specific. eg: set_dnd_timer</param>
    ///<param name="params">Parameters for the command. The parameters are integration-specific. eg: { &quot;key&quot;: &quot;value&quot; }</param>
    public void SendCommand(ServiceTarget target, string command, object? @params = null)
    {
        _haContext.CallService("vacuum", "send_command", target, new VacuumSendCommandParameters { Command = command, Params = @params });
    }

    ///<summary>Sets the fan speed of the vacuum cleaner.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetFanSpeed(ServiceTarget target, VacuumSetFanSpeedParameters data)
    {
        _haContext.CallService("vacuum", "set_fan_speed", target, data);
    }

    ///<summary>Sets the fan speed of the vacuum cleaner.</summary>
    ///<param name="fanSpeed">Fan speed. The value depends on the integration. Some integrations have speed steps, like &apos;medium&apos;. Some use a percentage, between 0 and 100. eg: low</param>
    public void SetFanSpeed(ServiceTarget target, string fanSpeed)
    {
        _haContext.CallService("vacuum", "set_fan_speed", target, new VacuumSetFanSpeedParameters { FanSpeed = fanSpeed });
    }

    ///<summary>Starts or resumes the cleaning task.</summary>
    ///<param name="target">The target for this service call</param>
    public void Start(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("vacuum", "start", target, data);
    }

    ///<summary>Stops the current cleaning task.</summary>
    ///<param name="target">The target for this service call</param>
    public void Stop(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("vacuum", "stop", target, data);
    }
}

public partial record VacuumSendCommandParameters
{
    ///<summary>Command to execute. The commands are integration-specific. eg: set_dnd_timer</summary>
    [JsonPropertyName("command")]
    public string? Command { get; init; }

    ///<summary>Parameters for the command. The parameters are integration-specific. eg: { &quot;key&quot;: &quot;value&quot; }</summary>
    [JsonPropertyName("params")]
    public object? Params { get; init; }
}

public partial record VacuumSetFanSpeedParameters
{
    ///<summary>Fan speed. The value depends on the integration. Some integrations have speed steps, like &apos;medium&apos;. Some use a percentage, between 0 and 100. eg: low</summary>
    [JsonPropertyName("fan_speed")]
    public string? FanSpeed { get; init; }
}

public partial class WaterHeaterServices
{
    private readonly IHaContext _haContext;
    public WaterHeaterServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Turns away mode on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetAwayMode(ServiceTarget target, WaterHeaterSetAwayModeParameters data)
    {
        _haContext.CallService("water_heater", "set_away_mode", target, data);
    }

    ///<summary>Turns away mode on/off.</summary>
    ///<param name="awayMode">New value of away mode.</param>
    public void SetAwayMode(ServiceTarget target, bool awayMode)
    {
        _haContext.CallService("water_heater", "set_away_mode", target, new WaterHeaterSetAwayModeParameters { AwayMode = awayMode });
    }

    ///<summary>Sets the operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetOperationMode(ServiceTarget target, WaterHeaterSetOperationModeParameters data)
    {
        _haContext.CallService("water_heater", "set_operation_mode", target, data);
    }

    ///<summary>Sets the operation mode.</summary>
    ///<param name="operationMode">New value of the operation mode. For a list of possible modes, refer to the integration documentation. eg: eco</param>
    public void SetOperationMode(ServiceTarget target, string operationMode)
    {
        _haContext.CallService("water_heater", "set_operation_mode", target, new WaterHeaterSetOperationModeParameters { OperationMode = operationMode });
    }

    ///<summary>Sets the target temperature.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetTemperature(ServiceTarget target, WaterHeaterSetTemperatureParameters data)
    {
        _haContext.CallService("water_heater", "set_temperature", target, data);
    }

    ///<summary>Sets the target temperature.</summary>
    ///<param name="temperature">New target temperature for the water heater.</param>
    ///<param name="operationMode">New value of the operation mode. For a list of possible modes, refer to the integration documentation. eg: eco</param>
    public void SetTemperature(ServiceTarget target, double temperature, string? operationMode = null)
    {
        _haContext.CallService("water_heater", "set_temperature", target, new WaterHeaterSetTemperatureParameters { Temperature = temperature, OperationMode = operationMode });
    }

    ///<summary>Turns water heater off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("water_heater", "turn_off", target, data);
    }

    ///<summary>Turns water heater on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("water_heater", "turn_on", target, data);
    }
}

public partial record WaterHeaterSetAwayModeParameters
{
    ///<summary>New value of away mode.</summary>
    [JsonPropertyName("away_mode")]
    public bool? AwayMode { get; init; }
}

public partial record WaterHeaterSetOperationModeParameters
{
    ///<summary>New value of the operation mode. For a list of possible modes, refer to the integration documentation. eg: eco</summary>
    [JsonPropertyName("operation_mode")]
    public string? OperationMode { get; init; }
}

public partial record WaterHeaterSetTemperatureParameters
{
    ///<summary>New target temperature for the water heater.</summary>
    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    ///<summary>New value of the operation mode. For a list of possible modes, refer to the integration documentation. eg: eco</summary>
    [JsonPropertyName("operation_mode")]
    public string? OperationMode { get; init; }
}

public partial class WeatherServices
{
    private readonly IHaContext _haContext;
    public WeatherServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Get weather forecasts.</summary>
    ///<param name="target">The target for this service call</param>
    public void GetForecasts(ServiceTarget target, WeatherGetForecastsParameters data)
    {
        _haContext.CallService("weather", "get_forecasts", target, data);
    }

    ///<summary>Get weather forecasts.</summary>
    ///<param name="type">Forecast type: daily, hourly or twice daily.</param>
    public void GetForecasts(ServiceTarget target, object @type)
    {
        _haContext.CallService("weather", "get_forecasts", target, new WeatherGetForecastsParameters { Type = @type });
    }

    ///<summary>Get weather forecasts.</summary>
    ///<param name="target">The target for this service call</param>
    public Task<JsonElement?> GetForecastsAsync(ServiceTarget target, WeatherGetForecastsParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("weather", "get_forecasts", target, data);
    }

    ///<summary>Get weather forecasts.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="type">Forecast type: daily, hourly or twice daily.</param>
    public Task<JsonElement?> GetForecastsAsync(ServiceTarget target, object @type)
    {
        return _haContext.CallServiceWithResponseAsync("weather", "get_forecasts", target, new WeatherGetForecastsParameters { Type = @type });
    }
}

public partial record WeatherGetForecastsParameters
{
    ///<summary>Forecast type: daily, hourly or twice daily.</summary>
    [JsonPropertyName("type")]
    public object? Type { get; init; }
}

public partial class WhatsappServices
{
    private readonly IHaContext _haContext;
    public WhatsappServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Subscribe to user presence update like online, offline, typing, etc... Please first use send infinity presence update service to always appear online.</summary>
    public void PresenceSubscribe(WhatsappPresenceSubscribeParameters data)
    {
        _haContext.CallService("whatsapp", "presence_subscribe", null, data);
    }

    ///<summary>Subscribe to user presence update like online, offline, typing, etc... Please first use send infinity presence update service to always appear online.</summary>
    ///<param name="clientId">Which instance of whatsapp should be used eg: default</param>
    ///<param name="userId">Target User ID eg: 391234567890@s.whatsapp.net</param>
    public void PresenceSubscribe(object clientId, object userId)
    {
        _haContext.CallService("whatsapp", "presence_subscribe", null, new WhatsappPresenceSubscribeParameters { ClientId = clientId, UserId = userId });
    }

    ///<summary>Send presence update like online, offline, typing, etc... for a long time</summary>
    public void SendInfinityPresenceUpdate(WhatsappSendInfinityPresenceUpdateParameters data)
    {
        _haContext.CallService("whatsapp", "send_infinity_presence_update", null, data);
    }

    ///<summary>Send presence update like online, offline, typing, etc... for a long time</summary>
    ///<param name="clientId">Which instance of whatsapp should be used eg: default</param>
    ///<param name="type">Presence type eg: composing</param>
    ///<param name="to">Target User ID eg: 391234567890@s.whatsapp.net</param>
    public void SendInfinityPresenceUpdate(object clientId, object @type, object? to = null)
    {
        _haContext.CallService("whatsapp", "send_infinity_presence_update", null, new WhatsappSendInfinityPresenceUpdateParameters { ClientId = clientId, Type = @type, To = to });
    }

    ///<summary>Send a Whatsapp message</summary>
    public void SendMessage(WhatsappSendMessageParameters data)
    {
        _haContext.CallService("whatsapp", "send_message", null, data);
    }

    ///<summary>Send a Whatsapp message</summary>
    ///<param name="clientId">Which instance of whatsapp should the message come from eg: default</param>
    ///<param name="to">Target User ID eg: 391234567890@s.whatsapp.net</param>
    ///<param name="body">Message&apos;s body</param>
    public void SendMessage(object clientId, object to, object body)
    {
        _haContext.CallService("whatsapp", "send_message", null, new WhatsappSendMessageParameters { ClientId = clientId, To = to, Body = body });
    }

    ///<summary>Send presence update like online, offline, typing, etc...</summary>
    public void SendPresenceUpdate(WhatsappSendPresenceUpdateParameters data)
    {
        _haContext.CallService("whatsapp", "send_presence_update", null, data);
    }

    ///<summary>Send presence update like online, offline, typing, etc...</summary>
    ///<param name="clientId">Which instance of whatsapp should be used eg: default</param>
    ///<param name="type">Presence type eg: composing</param>
    ///<param name="to">Target User ID eg: 391234567890@s.whatsapp.net</param>
    public void SendPresenceUpdate(object clientId, object @type, object? to = null)
    {
        _haContext.CallService("whatsapp", "send_presence_update", null, new WhatsappSendPresenceUpdateParameters { ClientId = clientId, Type = @type, To = to });
    }

    ///<summary>Sets the current user&apos;s status message</summary>
    public void SetStatus(WhatsappSetStatusParameters data)
    {
        _haContext.CallService("whatsapp", "set_status", null, data);
    }

    ///<summary>Sets the current user&apos;s status message</summary>
    ///<param name="clientId">Which instance of whatsapp should be used eg: default</param>
    ///<param name="status">New status message eg: Available</param>
    public void SetStatus(object clientId, object status)
    {
        _haContext.CallService("whatsapp", "set_status", null, new WhatsappSetStatusParameters { ClientId = clientId, Status = status });
    }
}

public partial record WhatsappPresenceSubscribeParameters
{
    ///<summary>Which instance of whatsapp should be used eg: default</summary>
    [JsonPropertyName("clientId")]
    public object? ClientId { get; init; }

    ///<summary>Target User ID eg: 391234567890@s.whatsapp.net</summary>
    [JsonPropertyName("userId")]
    public object? UserId { get; init; }
}

public partial record WhatsappSendInfinityPresenceUpdateParameters
{
    ///<summary>Which instance of whatsapp should be used eg: default</summary>
    [JsonPropertyName("clientId")]
    public object? ClientId { get; init; }

    ///<summary>Presence type eg: composing</summary>
    [JsonPropertyName("type")]
    public object? Type { get; init; }

    ///<summary>Target User ID eg: 391234567890@s.whatsapp.net</summary>
    [JsonPropertyName("to")]
    public object? To { get; init; }
}

public partial record WhatsappSendMessageParameters
{
    ///<summary>Which instance of whatsapp should the message come from eg: default</summary>
    [JsonPropertyName("clientId")]
    public object? ClientId { get; init; }

    ///<summary>Target User ID eg: 391234567890@s.whatsapp.net</summary>
    [JsonPropertyName("to")]
    public object? To { get; init; }

    ///<summary>Message&apos;s body</summary>
    [JsonPropertyName("body")]
    public object? Body { get; init; }
}

public partial record WhatsappSendPresenceUpdateParameters
{
    ///<summary>Which instance of whatsapp should be used eg: default</summary>
    [JsonPropertyName("clientId")]
    public object? ClientId { get; init; }

    ///<summary>Presence type eg: composing</summary>
    [JsonPropertyName("type")]
    public object? Type { get; init; }

    ///<summary>Target User ID eg: 391234567890@s.whatsapp.net</summary>
    [JsonPropertyName("to")]
    public object? To { get; init; }
}

public partial record WhatsappSetStatusParameters
{
    ///<summary>Which instance of whatsapp should be used eg: default</summary>
    [JsonPropertyName("clientId")]
    public object? ClientId { get; init; }

    ///<summary>New status message eg: Available</summary>
    [JsonPropertyName("status")]
    public object? Status { get; init; }
}

public partial class WorkdayServices
{
    private readonly IHaContext _haContext;
    public WorkdayServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Check if date is workday.</summary>
    ///<param name="target">The target for this service call</param>
    public void CheckDate(ServiceTarget target, WorkdayCheckDateParameters data)
    {
        _haContext.CallService("workday", "check_date", target, data);
    }

    ///<summary>Check if date is workday.</summary>
    ///<param name="checkDate">Date to check if workday. eg: 2022-12-25</param>
    public void CheckDate(ServiceTarget target, DateOnly? checkDate = null)
    {
        _haContext.CallService("workday", "check_date", target, new WorkdayCheckDateParameters { CheckDate = checkDate });
    }

    ///<summary>Check if date is workday.</summary>
    ///<param name="target">The target for this service call</param>
    public Task<JsonElement?> CheckDateAsync(ServiceTarget target, WorkdayCheckDateParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("workday", "check_date", target, data);
    }

    ///<summary>Check if date is workday.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="checkDate">Date to check if workday. eg: 2022-12-25</param>
    public Task<JsonElement?> CheckDateAsync(ServiceTarget target, DateOnly? checkDate = null)
    {
        return _haContext.CallServiceWithResponseAsync("workday", "check_date", target, new WorkdayCheckDateParameters { CheckDate = checkDate });
    }
}

public partial record WorkdayCheckDateParameters
{
    ///<summary>Date to check if workday. eg: 2022-12-25</summary>
    [JsonPropertyName("check_date")]
    public DateOnly? CheckDate { get; init; }
}

public partial class ZoneServices
{
    private readonly IHaContext _haContext;
    public ZoneServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads zones from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("zone", "reload", null, data);
    }
}

public static class AutomationEntityExtensionMethods
{
    ///<summary>Toggles (enable / disable) an automation.</summary>
    public static void Toggle(this IAutomationEntityCore target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles (enable / disable) an automation.</summary>
    public static void Toggle(this IEnumerable<IAutomationEntityCore> target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Triggers the actions of an automation.</summary>
    public static void Trigger(this IAutomationEntityCore target, AutomationTriggerParameters data)
    {
        target.CallService("trigger", data);
    }

    ///<summary>Triggers the actions of an automation.</summary>
    public static void Trigger(this IEnumerable<IAutomationEntityCore> target, AutomationTriggerParameters data)
    {
        target.CallService("trigger", data);
    }

    ///<summary>Triggers the actions of an automation.</summary>
    ///<param name="target">The IAutomationEntityCore to call this service for</param>
    ///<param name="skipCondition">Defines whether or not the conditions will be skipped.</param>
    public static void Trigger(this IAutomationEntityCore target, bool? skipCondition = null)
    {
        target.CallService("trigger", new AutomationTriggerParameters { SkipCondition = skipCondition });
    }

    ///<summary>Triggers the actions of an automation.</summary>
    ///<param name="target">The IEnumerable&lt;IAutomationEntityCore&gt; to call this service for</param>
    ///<param name="skipCondition">Defines whether or not the conditions will be skipped.</param>
    public static void Trigger(this IEnumerable<IAutomationEntityCore> target, bool? skipCondition = null)
    {
        target.CallService("trigger", new AutomationTriggerParameters { SkipCondition = skipCondition });
    }

    ///<summary>Disables an automation.</summary>
    public static void TurnOff(this IAutomationEntityCore target, AutomationTurnOffParameters data)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Disables an automation.</summary>
    public static void TurnOff(this IEnumerable<IAutomationEntityCore> target, AutomationTurnOffParameters data)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Disables an automation.</summary>
    ///<param name="target">The IAutomationEntityCore to call this service for</param>
    ///<param name="stopActions">Stops currently running actions.</param>
    public static void TurnOff(this IAutomationEntityCore target, bool? stopActions = null)
    {
        target.CallService("turn_off", new AutomationTurnOffParameters { StopActions = stopActions });
    }

    ///<summary>Disables an automation.</summary>
    ///<param name="target">The IEnumerable&lt;IAutomationEntityCore&gt; to call this service for</param>
    ///<param name="stopActions">Stops currently running actions.</param>
    public static void TurnOff(this IEnumerable<IAutomationEntityCore> target, bool? stopActions = null)
    {
        target.CallService("turn_off", new AutomationTurnOffParameters { StopActions = stopActions });
    }

    ///<summary>Enables an automation.</summary>
    public static void TurnOn(this IAutomationEntityCore target, object? data = null)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Enables an automation.</summary>
    public static void TurnOn(this IEnumerable<IAutomationEntityCore> target, object? data = null)
    {
        target.CallService("turn_on", data);
    }
}

public static class ButtonEntityExtensionMethods
{
    ///<summary>Press the button entity.</summary>
    public static void Press(this IButtonEntityCore target, object? data = null)
    {
        target.CallService("press", data);
    }

    ///<summary>Press the button entity.</summary>
    public static void Press(this IEnumerable<IButtonEntityCore> target, object? data = null)
    {
        target.CallService("press", data);
    }
}

public static class CalendarEntityExtensionMethods
{
    ///<summary>Adds a new calendar event.</summary>
    public static void CreateEvent(this ICalendarEntityCore target, CalendarCreateEventParameters data)
    {
        target.CallService("create_event", data);
    }

    ///<summary>Adds a new calendar event.</summary>
    public static void CreateEvent(this IEnumerable<ICalendarEntityCore> target, CalendarCreateEventParameters data)
    {
        target.CallService("create_event", data);
    }

    ///<summary>Adds a new calendar event.</summary>
    ///<param name="target">The ICalendarEntityCore to call this service for</param>
    ///<param name="summary">Defines the short summary or subject for the event. eg: Department Party</param>
    ///<param name="description">A more complete description of the event than the one provided by the summary. eg: Meeting to provide technical review for &apos;Phoenix&apos; design.</param>
    ///<param name="startDateTime">The date and time the event should start. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">The date and time the event should end. eg: 2022-03-22 22:00:00</param>
    ///<param name="startDate">The date the all-day event should start. eg: 2022-03-22</param>
    ///<param name="endDate">The date the all-day event should end (exclusive). eg: 2022-03-23</param>
    ///<param name="in">Days or weeks that you want to create the event in. eg: {&quot;days&quot;: 2} or {&quot;weeks&quot;: 2}</param>
    ///<param name="location">The location of the event. eg: Conference Room - F123, Bldg. 002</param>
    public static void CreateEvent(this ICalendarEntityCore target, string summary, string? description = null, DateTime? startDateTime = null, DateTime? endDateTime = null, DateOnly? startDate = null, DateOnly? endDate = null, object? @in = null, string? location = null)
    {
        target.CallService("create_event", new CalendarCreateEventParameters { Summary = summary, Description = description, StartDateTime = startDateTime, EndDateTime = endDateTime, StartDate = startDate, EndDate = endDate, In = @in, Location = location });
    }

    ///<summary>Adds a new calendar event.</summary>
    ///<param name="target">The IEnumerable&lt;ICalendarEntityCore&gt; to call this service for</param>
    ///<param name="summary">Defines the short summary or subject for the event. eg: Department Party</param>
    ///<param name="description">A more complete description of the event than the one provided by the summary. eg: Meeting to provide technical review for &apos;Phoenix&apos; design.</param>
    ///<param name="startDateTime">The date and time the event should start. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">The date and time the event should end. eg: 2022-03-22 22:00:00</param>
    ///<param name="startDate">The date the all-day event should start. eg: 2022-03-22</param>
    ///<param name="endDate">The date the all-day event should end (exclusive). eg: 2022-03-23</param>
    ///<param name="in">Days or weeks that you want to create the event in. eg: {&quot;days&quot;: 2} or {&quot;weeks&quot;: 2}</param>
    ///<param name="location">The location of the event. eg: Conference Room - F123, Bldg. 002</param>
    public static void CreateEvent(this IEnumerable<ICalendarEntityCore> target, string summary, string? description = null, DateTime? startDateTime = null, DateTime? endDateTime = null, DateOnly? startDate = null, DateOnly? endDate = null, object? @in = null, string? location = null)
    {
        target.CallService("create_event", new CalendarCreateEventParameters { Summary = summary, Description = description, StartDateTime = startDateTime, EndDateTime = endDateTime, StartDate = startDate, EndDate = endDate, In = @in, Location = location });
    }

    ///<summary>Get events on a calendar within a time range.</summary>
    public static Task<JsonElement?> GetEventsAsync(this ICalendarEntityCore target, CalendarGetEventsParameters data)
    {
        return target.CallServiceWithResponseAsync("get_events", data);
    }

    ///<summary>Get events on a calendar within a time range.</summary>
    ///<param name="target">The ICalendarEntityCore to call this service for</param>
    ///<param name="startDateTime">Returns active events after this time (exclusive). When not set, defaults to now. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">Returns active events before this time (exclusive). Cannot be used with Duration. eg: 2022-03-22 22:00:00</param>
    ///<param name="duration">Returns active events from Start time for the specified duration.</param>
    public static Task<JsonElement?> GetEventsAsync(this ICalendarEntityCore target, DateTime? startDateTime = null, DateTime? endDateTime = null, object? duration = null)
    {
        return target.CallServiceWithResponseAsync("get_events", new CalendarGetEventsParameters { StartDateTime = startDateTime, EndDateTime = endDateTime, Duration = duration });
    }

    ///<summary>Get events on a calendar within a time range.</summary>
    public static void GetEvents(this ICalendarEntityCore target, CalendarGetEventsParameters data)
    {
        target.CallService("get_events", data);
    }

    ///<summary>Get events on a calendar within a time range.</summary>
    public static void GetEvents(this IEnumerable<ICalendarEntityCore> target, CalendarGetEventsParameters data)
    {
        target.CallService("get_events", data);
    }

    ///<summary>Get events on a calendar within a time range.</summary>
    ///<param name="target">The ICalendarEntityCore to call this service for</param>
    ///<param name="startDateTime">Returns active events after this time (exclusive). When not set, defaults to now. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">Returns active events before this time (exclusive). Cannot be used with Duration. eg: 2022-03-22 22:00:00</param>
    ///<param name="duration">Returns active events from Start time for the specified duration.</param>
    public static void GetEvents(this ICalendarEntityCore target, DateTime? startDateTime = null, DateTime? endDateTime = null, object? duration = null)
    {
        target.CallService("get_events", new CalendarGetEventsParameters { StartDateTime = startDateTime, EndDateTime = endDateTime, Duration = duration });
    }

    ///<summary>Get events on a calendar within a time range.</summary>
    ///<param name="target">The IEnumerable&lt;ICalendarEntityCore&gt; to call this service for</param>
    ///<param name="startDateTime">Returns active events after this time (exclusive). When not set, defaults to now. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">Returns active events before this time (exclusive). Cannot be used with Duration. eg: 2022-03-22 22:00:00</param>
    ///<param name="duration">Returns active events from Start time for the specified duration.</param>
    public static void GetEvents(this IEnumerable<ICalendarEntityCore> target, DateTime? startDateTime = null, DateTime? endDateTime = null, object? duration = null)
    {
        target.CallService("get_events", new CalendarGetEventsParameters { StartDateTime = startDateTime, EndDateTime = endDateTime, Duration = duration });
    }
}

public static class CameraEntityExtensionMethods
{
    ///<summary>Disables the motion detection.</summary>
    public static void DisableMotionDetection(this ICameraEntityCore target, object? data = null)
    {
        target.CallService("disable_motion_detection", data);
    }

    ///<summary>Disables the motion detection.</summary>
    public static void DisableMotionDetection(this IEnumerable<ICameraEntityCore> target, object? data = null)
    {
        target.CallService("disable_motion_detection", data);
    }

    ///<summary>Enables the motion detection.</summary>
    public static void EnableMotionDetection(this ICameraEntityCore target, object? data = null)
    {
        target.CallService("enable_motion_detection", data);
    }

    ///<summary>Enables the motion detection.</summary>
    public static void EnableMotionDetection(this IEnumerable<ICameraEntityCore> target, object? data = null)
    {
        target.CallService("enable_motion_detection", data);
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    public static void PlayStream(this ICameraEntityCore target, CameraPlayStreamParameters data)
    {
        target.CallService("play_stream", data);
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    public static void PlayStream(this IEnumerable<ICameraEntityCore> target, CameraPlayStreamParameters data)
    {
        target.CallService("play_stream", data);
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    ///<param name="target">The ICameraEntityCore to call this service for</param>
    ///<param name="mediaPlayer">Media players to stream to.</param>
    ///<param name="format">Stream format supported by the media player.</param>
    public static void PlayStream(this ICameraEntityCore target, string mediaPlayer, object? format = null)
    {
        target.CallService("play_stream", new CameraPlayStreamParameters { MediaPlayer = mediaPlayer, Format = format });
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    ///<param name="target">The IEnumerable&lt;ICameraEntityCore&gt; to call this service for</param>
    ///<param name="mediaPlayer">Media players to stream to.</param>
    ///<param name="format">Stream format supported by the media player.</param>
    public static void PlayStream(this IEnumerable<ICameraEntityCore> target, string mediaPlayer, object? format = null)
    {
        target.CallService("play_stream", new CameraPlayStreamParameters { MediaPlayer = mediaPlayer, Format = format });
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    public static void Record(this ICameraEntityCore target, CameraRecordParameters data)
    {
        target.CallService("record", data);
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    public static void Record(this IEnumerable<ICameraEntityCore> target, CameraRecordParameters data)
    {
        target.CallService("record", data);
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    ///<param name="target">The ICameraEntityCore to call this service for</param>
    ///<param name="filename">Full path to filename. Must be mp4. eg: /tmp/snapshot_{{ entity_id.name }}.mp4</param>
    ///<param name="duration">Planned duration of the recording. The actual duration may vary.</param>
    ///<param name="lookback">Planned lookback period to include in the recording (in addition to the duration). Only available if there is currently an active HLS stream. The actual length of the lookback period may vary.</param>
    public static void Record(this ICameraEntityCore target, string filename, double? duration = null, double? lookback = null)
    {
        target.CallService("record", new CameraRecordParameters { Filename = filename, Duration = duration, Lookback = lookback });
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    ///<param name="target">The IEnumerable&lt;ICameraEntityCore&gt; to call this service for</param>
    ///<param name="filename">Full path to filename. Must be mp4. eg: /tmp/snapshot_{{ entity_id.name }}.mp4</param>
    ///<param name="duration">Planned duration of the recording. The actual duration may vary.</param>
    ///<param name="lookback">Planned lookback period to include in the recording (in addition to the duration). Only available if there is currently an active HLS stream. The actual length of the lookback period may vary.</param>
    public static void Record(this IEnumerable<ICameraEntityCore> target, string filename, double? duration = null, double? lookback = null)
    {
        target.CallService("record", new CameraRecordParameters { Filename = filename, Duration = duration, Lookback = lookback });
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    public static void Snapshot(this ICameraEntityCore target, CameraSnapshotParameters data)
    {
        target.CallService("snapshot", data);
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    public static void Snapshot(this IEnumerable<ICameraEntityCore> target, CameraSnapshotParameters data)
    {
        target.CallService("snapshot", data);
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    ///<param name="target">The ICameraEntityCore to call this service for</param>
    ///<param name="filename">Full path to filename. eg: /tmp/snapshot_{{ entity_id.name }}.jpg</param>
    public static void Snapshot(this ICameraEntityCore target, string filename)
    {
        target.CallService("snapshot", new CameraSnapshotParameters { Filename = filename });
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    ///<param name="target">The IEnumerable&lt;ICameraEntityCore&gt; to call this service for</param>
    ///<param name="filename">Full path to filename. eg: /tmp/snapshot_{{ entity_id.name }}.jpg</param>
    public static void Snapshot(this IEnumerable<ICameraEntityCore> target, string filename)
    {
        target.CallService("snapshot", new CameraSnapshotParameters { Filename = filename });
    }

    ///<summary>Turns off the camera.</summary>
    public static void TurnOff(this ICameraEntityCore target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns off the camera.</summary>
    public static void TurnOff(this IEnumerable<ICameraEntityCore> target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns on the camera.</summary>
    public static void TurnOn(this ICameraEntityCore target, object? data = null)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turns on the camera.</summary>
    public static void TurnOn(this IEnumerable<ICameraEntityCore> target, object? data = null)
    {
        target.CallService("turn_on", data);
    }
}

public static class ClimateEntityExtensionMethods
{
    ///<summary>Turns auxiliary heater on/off.</summary>
    public static void SetAuxHeat(this IClimateEntityCore target, ClimateSetAuxHeatParameters data)
    {
        target.CallService("set_aux_heat", data);
    }

    ///<summary>Turns auxiliary heater on/off.</summary>
    public static void SetAuxHeat(this IEnumerable<IClimateEntityCore> target, ClimateSetAuxHeatParameters data)
    {
        target.CallService("set_aux_heat", data);
    }

    ///<summary>Turns auxiliary heater on/off.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="auxHeat">New value of auxiliary heater.</param>
    public static void SetAuxHeat(this IClimateEntityCore target, bool auxHeat)
    {
        target.CallService("set_aux_heat", new ClimateSetAuxHeatParameters { AuxHeat = auxHeat });
    }

    ///<summary>Turns auxiliary heater on/off.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="auxHeat">New value of auxiliary heater.</param>
    public static void SetAuxHeat(this IEnumerable<IClimateEntityCore> target, bool auxHeat)
    {
        target.CallService("set_aux_heat", new ClimateSetAuxHeatParameters { AuxHeat = auxHeat });
    }

    ///<summary>Sets fan operation mode.</summary>
    public static void SetFanMode(this IClimateEntityCore target, ClimateSetFanModeParameters data)
    {
        target.CallService("set_fan_mode", data);
    }

    ///<summary>Sets fan operation mode.</summary>
    public static void SetFanMode(this IEnumerable<IClimateEntityCore> target, ClimateSetFanModeParameters data)
    {
        target.CallService("set_fan_mode", data);
    }

    ///<summary>Sets fan operation mode.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="fanMode">Fan operation mode. eg: low</param>
    public static void SetFanMode(this IClimateEntityCore target, string fanMode)
    {
        target.CallService("set_fan_mode", new ClimateSetFanModeParameters { FanMode = fanMode });
    }

    ///<summary>Sets fan operation mode.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="fanMode">Fan operation mode. eg: low</param>
    public static void SetFanMode(this IEnumerable<IClimateEntityCore> target, string fanMode)
    {
        target.CallService("set_fan_mode", new ClimateSetFanModeParameters { FanMode = fanMode });
    }

    ///<summary>Sets target humidity.</summary>
    public static void SetHumidity(this IClimateEntityCore target, ClimateSetHumidityParameters data)
    {
        target.CallService("set_humidity", data);
    }

    ///<summary>Sets target humidity.</summary>
    public static void SetHumidity(this IEnumerable<IClimateEntityCore> target, ClimateSetHumidityParameters data)
    {
        target.CallService("set_humidity", data);
    }

    ///<summary>Sets target humidity.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="humidity">Target humidity.</param>
    public static void SetHumidity(this IClimateEntityCore target, double humidity)
    {
        target.CallService("set_humidity", new ClimateSetHumidityParameters { Humidity = humidity });
    }

    ///<summary>Sets target humidity.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="humidity">Target humidity.</param>
    public static void SetHumidity(this IEnumerable<IClimateEntityCore> target, double humidity)
    {
        target.CallService("set_humidity", new ClimateSetHumidityParameters { Humidity = humidity });
    }

    ///<summary>Sets HVAC operation mode.</summary>
    public static void SetHvacMode(this IClimateEntityCore target, ClimateSetHvacModeParameters data)
    {
        target.CallService("set_hvac_mode", data);
    }

    ///<summary>Sets HVAC operation mode.</summary>
    public static void SetHvacMode(this IEnumerable<IClimateEntityCore> target, ClimateSetHvacModeParameters data)
    {
        target.CallService("set_hvac_mode", data);
    }

    ///<summary>Sets HVAC operation mode.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public static void SetHvacMode(this IClimateEntityCore target, object? hvacMode = null)
    {
        target.CallService("set_hvac_mode", new ClimateSetHvacModeParameters { HvacMode = hvacMode });
    }

    ///<summary>Sets HVAC operation mode.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public static void SetHvacMode(this IEnumerable<IClimateEntityCore> target, object? hvacMode = null)
    {
        target.CallService("set_hvac_mode", new ClimateSetHvacModeParameters { HvacMode = hvacMode });
    }

    ///<summary>Sets preset mode.</summary>
    public static void SetPresetMode(this IClimateEntityCore target, ClimateSetPresetModeParameters data)
    {
        target.CallService("set_preset_mode", data);
    }

    ///<summary>Sets preset mode.</summary>
    public static void SetPresetMode(this IEnumerable<IClimateEntityCore> target, ClimateSetPresetModeParameters data)
    {
        target.CallService("set_preset_mode", data);
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="presetMode">Preset mode. eg: away</param>
    public static void SetPresetMode(this IClimateEntityCore target, string presetMode)
    {
        target.CallService("set_preset_mode", new ClimateSetPresetModeParameters { PresetMode = presetMode });
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="presetMode">Preset mode. eg: away</param>
    public static void SetPresetMode(this IEnumerable<IClimateEntityCore> target, string presetMode)
    {
        target.CallService("set_preset_mode", new ClimateSetPresetModeParameters { PresetMode = presetMode });
    }

    ///<summary>Sets horizontal swing operation mode.</summary>
    public static void SetSwingHorizontalMode(this IClimateEntityCore target, ClimateSetSwingHorizontalModeParameters data)
    {
        target.CallService("set_swing_horizontal_mode", data);
    }

    ///<summary>Sets horizontal swing operation mode.</summary>
    public static void SetSwingHorizontalMode(this IEnumerable<IClimateEntityCore> target, ClimateSetSwingHorizontalModeParameters data)
    {
        target.CallService("set_swing_horizontal_mode", data);
    }

    ///<summary>Sets horizontal swing operation mode.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="swingHorizontalMode">Horizontal swing operation mode. eg: on</param>
    public static void SetSwingHorizontalMode(this IClimateEntityCore target, string swingHorizontalMode)
    {
        target.CallService("set_swing_horizontal_mode", new ClimateSetSwingHorizontalModeParameters { SwingHorizontalMode = swingHorizontalMode });
    }

    ///<summary>Sets horizontal swing operation mode.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="swingHorizontalMode">Horizontal swing operation mode. eg: on</param>
    public static void SetSwingHorizontalMode(this IEnumerable<IClimateEntityCore> target, string swingHorizontalMode)
    {
        target.CallService("set_swing_horizontal_mode", new ClimateSetSwingHorizontalModeParameters { SwingHorizontalMode = swingHorizontalMode });
    }

    ///<summary>Sets swing operation mode.</summary>
    public static void SetSwingMode(this IClimateEntityCore target, ClimateSetSwingModeParameters data)
    {
        target.CallService("set_swing_mode", data);
    }

    ///<summary>Sets swing operation mode.</summary>
    public static void SetSwingMode(this IEnumerable<IClimateEntityCore> target, ClimateSetSwingModeParameters data)
    {
        target.CallService("set_swing_mode", data);
    }

    ///<summary>Sets swing operation mode.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="swingMode">Swing operation mode. eg: on</param>
    public static void SetSwingMode(this IClimateEntityCore target, string swingMode)
    {
        target.CallService("set_swing_mode", new ClimateSetSwingModeParameters { SwingMode = swingMode });
    }

    ///<summary>Sets swing operation mode.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="swingMode">Swing operation mode. eg: on</param>
    public static void SetSwingMode(this IEnumerable<IClimateEntityCore> target, string swingMode)
    {
        target.CallService("set_swing_mode", new ClimateSetSwingModeParameters { SwingMode = swingMode });
    }

    ///<summary>Sets the temperature setpoint.</summary>
    public static void SetTemperature(this IClimateEntityCore target, ClimateSetTemperatureParameters data)
    {
        target.CallService("set_temperature", data);
    }

    ///<summary>Sets the temperature setpoint.</summary>
    public static void SetTemperature(this IEnumerable<IClimateEntityCore> target, ClimateSetTemperatureParameters data)
    {
        target.CallService("set_temperature", data);
    }

    ///<summary>Sets the temperature setpoint.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="temperature">The temperature setpoint.</param>
    ///<param name="targetTempHigh">The max temperature setpoint.</param>
    ///<param name="targetTempLow">The min temperature setpoint.</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public static void SetTemperature(this IClimateEntityCore target, double? temperature = null, double? targetTempHigh = null, double? targetTempLow = null, object? hvacMode = null)
    {
        target.CallService("set_temperature", new ClimateSetTemperatureParameters { Temperature = temperature, TargetTempHigh = targetTempHigh, TargetTempLow = targetTempLow, HvacMode = hvacMode });
    }

    ///<summary>Sets the temperature setpoint.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="temperature">The temperature setpoint.</param>
    ///<param name="targetTempHigh">The max temperature setpoint.</param>
    ///<param name="targetTempLow">The min temperature setpoint.</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public static void SetTemperature(this IEnumerable<IClimateEntityCore> target, double? temperature = null, double? targetTempHigh = null, double? targetTempLow = null, object? hvacMode = null)
    {
        target.CallService("set_temperature", new ClimateSetTemperatureParameters { Temperature = temperature, TargetTempHigh = targetTempHigh, TargetTempLow = targetTempLow, HvacMode = hvacMode });
    }

    ///<summary>Toggles climate device, from on to off, or off to on.</summary>
    public static void Toggle(this IClimateEntityCore target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles climate device, from on to off, or off to on.</summary>
    public static void Toggle(this IEnumerable<IClimateEntityCore> target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Turns climate device off.</summary>
    public static void TurnOff(this IClimateEntityCore target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns climate device off.</summary>
    public static void TurnOff(this IEnumerable<IClimateEntityCore> target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns climate device on.</summary>
    public static void TurnOn(this IClimateEntityCore target, object? data = null)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turns climate device on.</summary>
    public static void TurnOn(this IEnumerable<IClimateEntityCore> target, object? data = null)
    {
        target.CallService("turn_on", data);
    }
}

public static class ConnectlifeEntityExtensionMethods
{
    ///<summary>Sets a value for the status. Use with care.</summary>
    public static void SetValue(this ISensorEntityCore target, ConnectlifeSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets a value for the status. Use with care.</summary>
    public static void SetValue(this IEnumerable<ISensorEntityCore> target, ConnectlifeSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets a value for the status. Use with care.</summary>
    ///<param name="target">The ISensorEntityCore to call this service for</param>
    ///<param name="value">Value to set.</param>
    public static void SetValue(this ISensorEntityCore target, double value)
    {
        target.CallService("set_value", new ConnectlifeSetValueParameters { Value = value });
    }

    ///<summary>Sets a value for the status. Use with care.</summary>
    ///<param name="target">The IEnumerable&lt;ISensorEntityCore&gt; to call this service for</param>
    ///<param name="value">Value to set.</param>
    public static void SetValue(this IEnumerable<ISensorEntityCore> target, double value)
    {
        target.CallService("set_value", new ConnectlifeSetValueParameters { Value = value });
    }
}

public static class GoogleEntityExtensionMethods
{
    ///<summary>Adds a new calendar event.</summary>
    public static void CreateEvent(this ICalendarEntityCore target, GoogleCreateEventParameters data)
    {
        target.CallService("create_event", data);
    }

    ///<summary>Adds a new calendar event.</summary>
    public static void CreateEvent(this IEnumerable<ICalendarEntityCore> target, GoogleCreateEventParameters data)
    {
        target.CallService("create_event", data);
    }

    ///<summary>Adds a new calendar event.</summary>
    ///<param name="target">The ICalendarEntityCore to call this service for</param>
    ///<param name="summary">Acts as the title of the event. eg: Bowling</param>
    ///<param name="description">The description of the event. Optional. eg: Birthday bowling</param>
    ///<param name="startDateTime">The date and time the event should start. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">The date and time the event should end. eg: 2022-03-22 22:00:00</param>
    ///<param name="startDate">The date the whole day event should start. eg: 2022-03-10</param>
    ///<param name="endDate">The date the whole day event should end. eg: 2022-03-11</param>
    ///<param name="in">Days or weeks that you want to create the event in. eg: &quot;days&quot;: 2 or &quot;weeks&quot;: 2</param>
    ///<param name="location">The location of the event. Optional. eg: Conference Room - F123, Bldg. 002</param>
    public static void CreateEvent(this ICalendarEntityCore target, string summary, string? description = null, string? startDateTime = null, string? endDateTime = null, string? startDate = null, string? endDate = null, object? @in = null, string? location = null)
    {
        target.CallService("create_event", new GoogleCreateEventParameters { Summary = summary, Description = description, StartDateTime = startDateTime, EndDateTime = endDateTime, StartDate = startDate, EndDate = endDate, In = @in, Location = location });
    }

    ///<summary>Adds a new calendar event.</summary>
    ///<param name="target">The IEnumerable&lt;ICalendarEntityCore&gt; to call this service for</param>
    ///<param name="summary">Acts as the title of the event. eg: Bowling</param>
    ///<param name="description">The description of the event. Optional. eg: Birthday bowling</param>
    ///<param name="startDateTime">The date and time the event should start. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">The date and time the event should end. eg: 2022-03-22 22:00:00</param>
    ///<param name="startDate">The date the whole day event should start. eg: 2022-03-10</param>
    ///<param name="endDate">The date the whole day event should end. eg: 2022-03-11</param>
    ///<param name="in">Days or weeks that you want to create the event in. eg: &quot;days&quot;: 2 or &quot;weeks&quot;: 2</param>
    ///<param name="location">The location of the event. Optional. eg: Conference Room - F123, Bldg. 002</param>
    public static void CreateEvent(this IEnumerable<ICalendarEntityCore> target, string summary, string? description = null, string? startDateTime = null, string? endDateTime = null, string? startDate = null, string? endDate = null, object? @in = null, string? location = null)
    {
        target.CallService("create_event", new GoogleCreateEventParameters { Summary = summary, Description = description, StartDateTime = startDateTime, EndDateTime = endDateTime, StartDate = startDate, EndDate = endDate, In = @in, Location = location });
    }
}

public static class InputBooleanEntityExtensionMethods
{
    ///<summary>Toggles the helper on/off.</summary>
    public static void Toggle(this IInputBooleanEntityCore target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles the helper on/off.</summary>
    public static void Toggle(this IEnumerable<IInputBooleanEntityCore> target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Turns off the helper.</summary>
    public static void TurnOff(this IInputBooleanEntityCore target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns off the helper.</summary>
    public static void TurnOff(this IEnumerable<IInputBooleanEntityCore> target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns on the helper.</summary>
    public static void TurnOn(this IInputBooleanEntityCore target, object? data = null)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turns on the helper.</summary>
    public static void TurnOn(this IEnumerable<IInputBooleanEntityCore> target, object? data = null)
    {
        target.CallService("turn_on", data);
    }
}

public static class InputButtonEntityExtensionMethods
{
    ///<summary>Mimics the physical button press on the device.</summary>
    public static void Press(this IInputButtonEntityCore target, object? data = null)
    {
        target.CallService("press", data);
    }

    ///<summary>Mimics the physical button press on the device.</summary>
    public static void Press(this IEnumerable<IInputButtonEntityCore> target, object? data = null)
    {
        target.CallService("press", data);
    }
}

public static class InputNumberEntityExtensionMethods
{
    ///<summary>Decrements the current value by 1 step.</summary>
    public static void Decrement(this IInputNumberEntityCore target, object? data = null)
    {
        target.CallService("decrement", data);
    }

    ///<summary>Decrements the current value by 1 step.</summary>
    public static void Decrement(this IEnumerable<IInputNumberEntityCore> target, object? data = null)
    {
        target.CallService("decrement", data);
    }

    ///<summary>Increments the current value by 1 step.</summary>
    public static void Increment(this IInputNumberEntityCore target, object? data = null)
    {
        target.CallService("increment", data);
    }

    ///<summary>Increments the current value by 1 step.</summary>
    public static void Increment(this IEnumerable<IInputNumberEntityCore> target, object? data = null)
    {
        target.CallService("increment", data);
    }

    ///<summary>Sets the value.</summary>
    public static void SetValue(this IInputNumberEntityCore target, InputNumberSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the value.</summary>
    public static void SetValue(this IEnumerable<IInputNumberEntityCore> target, InputNumberSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The IInputNumberEntityCore to call this service for</param>
    ///<param name="value">The target value.</param>
    public static void SetValue(this IInputNumberEntityCore target, double value)
    {
        target.CallService("set_value", new InputNumberSetValueParameters { Value = value });
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The IEnumerable&lt;IInputNumberEntityCore&gt; to call this service for</param>
    ///<param name="value">The target value.</param>
    public static void SetValue(this IEnumerable<IInputNumberEntityCore> target, double value)
    {
        target.CallService("set_value", new InputNumberSetValueParameters { Value = value });
    }
}

public static class InputTextEntityExtensionMethods
{
    ///<summary>Sets the value.</summary>
    public static void SetValue(this IInputTextEntityCore target, InputTextSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the value.</summary>
    public static void SetValue(this IEnumerable<IInputTextEntityCore> target, InputTextSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The IInputTextEntityCore to call this service for</param>
    ///<param name="value">The target value. eg: This is an example text</param>
    public static void SetValue(this IInputTextEntityCore target, string value)
    {
        target.CallService("set_value", new InputTextSetValueParameters { Value = value });
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The IEnumerable&lt;IInputTextEntityCore&gt; to call this service for</param>
    ///<param name="value">The target value. eg: This is an example text</param>
    public static void SetValue(this IEnumerable<IInputTextEntityCore> target, string value)
    {
        target.CallService("set_value", new InputTextSetValueParameters { Value = value });
    }
}

public static class KodiEntityExtensionMethods
{
    ///<summary>Adds music to the default playlist (i.e. playlistid=0).</summary>
    public static void AddToPlaylist(this IMediaPlayerEntityCore target, KodiAddToPlaylistParameters data)
    {
        target.CallService("add_to_playlist", data);
    }

    ///<summary>Adds music to the default playlist (i.e. playlistid=0).</summary>
    public static void AddToPlaylist(this IEnumerable<IMediaPlayerEntityCore> target, KodiAddToPlaylistParameters data)
    {
        target.CallService("add_to_playlist", data);
    }

    ///<summary>Adds music to the default playlist (i.e. playlistid=0).</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="mediaType">Media type identifier. It must be one of SONG or ALBUM. eg: ALBUM</param>
    ///<param name="mediaId">Unique Id of the media entry to add (`songid` or albumid`). If not defined, `media_name` and `artist_name` are needed to search the Kodi music library. eg: 123456</param>
    ///<param name="mediaName">Optional media name for filtering media. Can be &apos;ALL&apos; when `media_type` is &apos;ALBUM&apos; and `artist_name` is specified, to add all songs from one artist. eg: Highway to Hell</param>
    ///<param name="artistName">Optional artist name for filtering media. eg: AC/DC</param>
    public static void AddToPlaylist(this IMediaPlayerEntityCore target, string mediaType, string? mediaId = null, string? mediaName = null, string? artistName = null)
    {
        target.CallService("add_to_playlist", new KodiAddToPlaylistParameters { MediaType = mediaType, MediaId = mediaId, MediaName = mediaName, ArtistName = artistName });
    }

    ///<summary>Adds music to the default playlist (i.e. playlistid=0).</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="mediaType">Media type identifier. It must be one of SONG or ALBUM. eg: ALBUM</param>
    ///<param name="mediaId">Unique Id of the media entry to add (`songid` or albumid`). If not defined, `media_name` and `artist_name` are needed to search the Kodi music library. eg: 123456</param>
    ///<param name="mediaName">Optional media name for filtering media. Can be &apos;ALL&apos; when `media_type` is &apos;ALBUM&apos; and `artist_name` is specified, to add all songs from one artist. eg: Highway to Hell</param>
    ///<param name="artistName">Optional artist name for filtering media. eg: AC/DC</param>
    public static void AddToPlaylist(this IEnumerable<IMediaPlayerEntityCore> target, string mediaType, string? mediaId = null, string? mediaName = null, string? artistName = null)
    {
        target.CallService("add_to_playlist", new KodiAddToPlaylistParameters { MediaType = mediaType, MediaId = mediaId, MediaName = mediaName, ArtistName = artistName });
    }

    ///<summary>Calls a Kodi JSONRPC API method with optional parameters. Results of the Kodi API call will be redirected in a Home Assistant event: `kodi_call_method_result`.</summary>
    public static void CallMethod(this IMediaPlayerEntityCore target, KodiCallMethodParameters data)
    {
        target.CallService("call_method", data);
    }

    ///<summary>Calls a Kodi JSONRPC API method with optional parameters. Results of the Kodi API call will be redirected in a Home Assistant event: `kodi_call_method_result`.</summary>
    public static void CallMethod(this IEnumerable<IMediaPlayerEntityCore> target, KodiCallMethodParameters data)
    {
        target.CallService("call_method", data);
    }

    ///<summary>Calls a Kodi JSONRPC API method with optional parameters. Results of the Kodi API call will be redirected in a Home Assistant event: `kodi_call_method_result`.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="method">Name of the Kodi JSONRPC API method to be called. eg: VideoLibrary.GetRecentlyAddedEpisodes</param>
    public static void CallMethod(this IMediaPlayerEntityCore target, string @method)
    {
        target.CallService("call_method", new KodiCallMethodParameters { Method = @method });
    }

    ///<summary>Calls a Kodi JSONRPC API method with optional parameters. Results of the Kodi API call will be redirected in a Home Assistant event: `kodi_call_method_result`.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="method">Name of the Kodi JSONRPC API method to be called. eg: VideoLibrary.GetRecentlyAddedEpisodes</param>
    public static void CallMethod(this IEnumerable<IMediaPlayerEntityCore> target, string @method)
    {
        target.CallService("call_method", new KodiCallMethodParameters { Method = @method });
    }
}

public static class LightEntityExtensionMethods
{
    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state.</summary>
    public static void Toggle(this ILightEntityCore target, LightToggleParameters data)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state.</summary>
    public static void Toggle(this IEnumerable<ILightEntityCore> target, LightToggleParameters data)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state.</summary>
    ///<param name="target">The ILightEntityCore to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
    ///<param name="kelvin">Color temperature in Kelvin.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="effect">Light effect.</param>
    ///<param name="rgbwColor"> eg: [255, 100, 100, 50]</param>
    ///<param name="rgbwwColor"> eg: [255, 100, 100, 50, 70]</param>
    ///<param name="colorName"></param>
    ///<param name="hsColor"> eg: [300, 70]</param>
    ///<param name="xyColor"> eg: [0.52, 0.43]</param>
    ///<param name="colorTemp"></param>
    ///<param name="brightness"></param>
    ///<param name="white"></param>
    ///<param name="profile"> eg: relax</param>
    ///<param name="flash"></param>
    public static void Toggle(this ILightEntityCore target, double? transition = null, IReadOnlyCollection<int>? rgbColor = null, object? kelvin = null, double? brightnessPct = null, string? effect = null, object? rgbwColor = null, object? rgbwwColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, double? brightness = null, object? white = null, string? profile = null, object? flash = null)
    {
        target.CallService("toggle", new LightToggleParameters { Transition = transition, RgbColor = rgbColor, Kelvin = kelvin, BrightnessPct = brightnessPct, Effect = effect, RgbwColor = rgbwColor, RgbwwColor = rgbwwColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Brightness = brightness, White = white, Profile = profile, Flash = flash });
    }

    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state.</summary>
    ///<param name="target">The IEnumerable&lt;ILightEntityCore&gt; to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
    ///<param name="kelvin">Color temperature in Kelvin.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="effect">Light effect.</param>
    ///<param name="rgbwColor"> eg: [255, 100, 100, 50]</param>
    ///<param name="rgbwwColor"> eg: [255, 100, 100, 50, 70]</param>
    ///<param name="colorName"></param>
    ///<param name="hsColor"> eg: [300, 70]</param>
    ///<param name="xyColor"> eg: [0.52, 0.43]</param>
    ///<param name="colorTemp"></param>
    ///<param name="brightness"></param>
    ///<param name="white"></param>
    ///<param name="profile"> eg: relax</param>
    ///<param name="flash"></param>
    public static void Toggle(this IEnumerable<ILightEntityCore> target, double? transition = null, IReadOnlyCollection<int>? rgbColor = null, object? kelvin = null, double? brightnessPct = null, string? effect = null, object? rgbwColor = null, object? rgbwwColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, double? brightness = null, object? white = null, string? profile = null, object? flash = null)
    {
        target.CallService("toggle", new LightToggleParameters { Transition = transition, RgbColor = rgbColor, Kelvin = kelvin, BrightnessPct = brightnessPct, Effect = effect, RgbwColor = rgbwColor, RgbwwColor = rgbwwColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Brightness = brightness, White = white, Profile = profile, Flash = flash });
    }

    ///<summary>Turn off one or more lights.</summary>
    public static void TurnOff(this ILightEntityCore target, LightTurnOffParameters data)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turn off one or more lights.</summary>
    public static void TurnOff(this IEnumerable<ILightEntityCore> target, LightTurnOffParameters data)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turn off one or more lights.</summary>
    ///<param name="target">The ILightEntityCore to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="flash"></param>
    public static void TurnOff(this ILightEntityCore target, double? transition = null, object? flash = null)
    {
        target.CallService("turn_off", new LightTurnOffParameters { Transition = transition, Flash = flash });
    }

    ///<summary>Turn off one or more lights.</summary>
    ///<param name="target">The IEnumerable&lt;ILightEntityCore&gt; to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="flash"></param>
    public static void TurnOff(this IEnumerable<ILightEntityCore> target, double? transition = null, object? flash = null)
    {
        target.CallService("turn_off", new LightTurnOffParameters { Transition = transition, Flash = flash });
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already.</summary>
    public static void TurnOn(this ILightEntityCore target, LightTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already.</summary>
    public static void TurnOn(this IEnumerable<ILightEntityCore> target, LightTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already.</summary>
    ///<param name="target">The ILightEntityCore to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
    ///<param name="kelvin">Color temperature in Kelvin.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="brightnessStepPct">Change brightness by a percentage.</param>
    ///<param name="effect">Light effect.</param>
    ///<param name="rgbwColor"> eg: [255, 100, 100, 50]</param>
    ///<param name="rgbwwColor"> eg: [255, 100, 100, 50, 70]</param>
    ///<param name="colorName"></param>
    ///<param name="hsColor"> eg: [300, 70]</param>
    ///<param name="xyColor"> eg: [0.52, 0.43]</param>
    ///<param name="colorTemp"></param>
    ///<param name="brightness"></param>
    ///<param name="brightnessStep"></param>
    ///<param name="white"></param>
    ///<param name="profile"> eg: relax</param>
    ///<param name="flash"></param>
    public static void TurnOn(this ILightEntityCore target, double? transition = null, IReadOnlyCollection<int>? rgbColor = null, object? kelvin = null, double? brightnessPct = null, double? brightnessStepPct = null, string? effect = null, object? rgbwColor = null, object? rgbwwColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, double? brightness = null, double? brightnessStep = null, object? white = null, string? profile = null, object? flash = null)
    {
        target.CallService("turn_on", new LightTurnOnParameters { Transition = transition, RgbColor = rgbColor, Kelvin = kelvin, BrightnessPct = brightnessPct, BrightnessStepPct = brightnessStepPct, Effect = effect, RgbwColor = rgbwColor, RgbwwColor = rgbwwColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Brightness = brightness, BrightnessStep = brightnessStep, White = white, Profile = profile, Flash = flash });
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already.</summary>
    ///<param name="target">The IEnumerable&lt;ILightEntityCore&gt; to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
    ///<param name="kelvin">Color temperature in Kelvin.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="brightnessStepPct">Change brightness by a percentage.</param>
    ///<param name="effect">Light effect.</param>
    ///<param name="rgbwColor"> eg: [255, 100, 100, 50]</param>
    ///<param name="rgbwwColor"> eg: [255, 100, 100, 50, 70]</param>
    ///<param name="colorName"></param>
    ///<param name="hsColor"> eg: [300, 70]</param>
    ///<param name="xyColor"> eg: [0.52, 0.43]</param>
    ///<param name="colorTemp"></param>
    ///<param name="brightness"></param>
    ///<param name="brightnessStep"></param>
    ///<param name="white"></param>
    ///<param name="profile"> eg: relax</param>
    ///<param name="flash"></param>
    public static void TurnOn(this IEnumerable<ILightEntityCore> target, double? transition = null, IReadOnlyCollection<int>? rgbColor = null, object? kelvin = null, double? brightnessPct = null, double? brightnessStepPct = null, string? effect = null, object? rgbwColor = null, object? rgbwwColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, double? brightness = null, double? brightnessStep = null, object? white = null, string? profile = null, object? flash = null)
    {
        target.CallService("turn_on", new LightTurnOnParameters { Transition = transition, RgbColor = rgbColor, Kelvin = kelvin, BrightnessPct = brightnessPct, BrightnessStepPct = brightnessStepPct, Effect = effect, RgbwColor = rgbwColor, RgbwwColor = rgbwwColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Brightness = brightness, BrightnessStep = brightnessStep, White = white, Profile = profile, Flash = flash });
    }
}

public static class MediaPlayerEntityExtensionMethods
{
    ///<summary>Removes all items from the playlist.</summary>
    public static void ClearPlaylist(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("clear_playlist", data);
    }

    ///<summary>Removes all items from the playlist.</summary>
    public static void ClearPlaylist(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("clear_playlist", data);
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    public static void Join(this IMediaPlayerEntityCore target, MediaPlayerJoinParameters data)
    {
        target.CallService("join", data);
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    public static void Join(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerJoinParameters data)
    {
        target.CallService("join", data);
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="groupMembers">The players which will be synced with the playback specified in `target`. eg: - media_player.multiroom_player2 - media_player.multiroom_player3 </param>
    public static void Join(this IMediaPlayerEntityCore target, IEnumerable<string> groupMembers)
    {
        target.CallService("join", new MediaPlayerJoinParameters { GroupMembers = groupMembers });
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="groupMembers">The players which will be synced with the playback specified in `target`. eg: - media_player.multiroom_player2 - media_player.multiroom_player3 </param>
    public static void Join(this IEnumerable<IMediaPlayerEntityCore> target, IEnumerable<string> groupMembers)
    {
        target.CallService("join", new MediaPlayerJoinParameters { GroupMembers = groupMembers });
    }

    ///<summary>Selects the next track.</summary>
    public static void MediaNextTrack(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("media_next_track", data);
    }

    ///<summary>Selects the next track.</summary>
    public static void MediaNextTrack(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("media_next_track", data);
    }

    ///<summary>Pauses.</summary>
    public static void MediaPause(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("media_pause", data);
    }

    ///<summary>Pauses.</summary>
    public static void MediaPause(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("media_pause", data);
    }

    ///<summary>Starts playing.</summary>
    public static void MediaPlay(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("media_play", data);
    }

    ///<summary>Starts playing.</summary>
    public static void MediaPlay(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("media_play", data);
    }

    ///<summary>Toggles play/pause.</summary>
    public static void MediaPlayPause(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("media_play_pause", data);
    }

    ///<summary>Toggles play/pause.</summary>
    public static void MediaPlayPause(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("media_play_pause", data);
    }

    ///<summary>Selects the previous track.</summary>
    public static void MediaPreviousTrack(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("media_previous_track", data);
    }

    ///<summary>Selects the previous track.</summary>
    public static void MediaPreviousTrack(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("media_previous_track", data);
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    public static void MediaSeek(this IMediaPlayerEntityCore target, MediaPlayerMediaSeekParameters data)
    {
        target.CallService("media_seek", data);
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    public static void MediaSeek(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerMediaSeekParameters data)
    {
        target.CallService("media_seek", data);
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="seekPosition">Target position in the currently playing media. The format is platform dependent.</param>
    public static void MediaSeek(this IMediaPlayerEntityCore target, double seekPosition)
    {
        target.CallService("media_seek", new MediaPlayerMediaSeekParameters { SeekPosition = seekPosition });
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="seekPosition">Target position in the currently playing media. The format is platform dependent.</param>
    public static void MediaSeek(this IEnumerable<IMediaPlayerEntityCore> target, double seekPosition)
    {
        target.CallService("media_seek", new MediaPlayerMediaSeekParameters { SeekPosition = seekPosition });
    }

    ///<summary>Stops playing.</summary>
    public static void MediaStop(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("media_stop", data);
    }

    ///<summary>Stops playing.</summary>
    public static void MediaStop(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("media_stop", data);
    }

    ///<summary>Starts playing specified media.</summary>
    public static void PlayMedia(this IMediaPlayerEntityCore target, MediaPlayerPlayMediaParameters data)
    {
        target.CallService("play_media", data);
    }

    ///<summary>Starts playing specified media.</summary>
    public static void PlayMedia(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerPlayMediaParameters data)
    {
        target.CallService("play_media", data);
    }

    ///<summary>Starts playing specified media.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="mediaContentId">The ID of the content to play. Platform dependent. eg: https://home-assistant.io/images/cast/splash.png</param>
    ///<param name="mediaContentType">The type of the content to play. Such as image, music, tv show, video, episode, channel, or playlist. eg: music</param>
    ///<param name="enqueue">If the content should be played now or be added to the queue.</param>
    ///<param name="announce">If the media should be played as an announcement. eg: true</param>
    public static void PlayMedia(this IMediaPlayerEntityCore target, string mediaContentId, string mediaContentType, object? enqueue = null, bool? announce = null)
    {
        target.CallService("play_media", new MediaPlayerPlayMediaParameters { MediaContentId = mediaContentId, MediaContentType = mediaContentType, Enqueue = enqueue, Announce = announce });
    }

    ///<summary>Starts playing specified media.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="mediaContentId">The ID of the content to play. Platform dependent. eg: https://home-assistant.io/images/cast/splash.png</param>
    ///<param name="mediaContentType">The type of the content to play. Such as image, music, tv show, video, episode, channel, or playlist. eg: music</param>
    ///<param name="enqueue">If the content should be played now or be added to the queue.</param>
    ///<param name="announce">If the media should be played as an announcement. eg: true</param>
    public static void PlayMedia(this IEnumerable<IMediaPlayerEntityCore> target, string mediaContentId, string mediaContentType, object? enqueue = null, bool? announce = null)
    {
        target.CallService("play_media", new MediaPlayerPlayMediaParameters { MediaContentId = mediaContentId, MediaContentType = mediaContentType, Enqueue = enqueue, Announce = announce });
    }

    ///<summary>Playback mode that plays the media in a loop.</summary>
    public static void RepeatSet(this IMediaPlayerEntityCore target, MediaPlayerRepeatSetParameters data)
    {
        target.CallService("repeat_set", data);
    }

    ///<summary>Playback mode that plays the media in a loop.</summary>
    public static void RepeatSet(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerRepeatSetParameters data)
    {
        target.CallService("repeat_set", data);
    }

    ///<summary>Playback mode that plays the media in a loop.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="repeat">Repeat mode to set.</param>
    public static void RepeatSet(this IMediaPlayerEntityCore target, object repeat)
    {
        target.CallService("repeat_set", new MediaPlayerRepeatSetParameters { Repeat = repeat });
    }

    ///<summary>Playback mode that plays the media in a loop.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="repeat">Repeat mode to set.</param>
    public static void RepeatSet(this IEnumerable<IMediaPlayerEntityCore> target, object repeat)
    {
        target.CallService("repeat_set", new MediaPlayerRepeatSetParameters { Repeat = repeat });
    }

    ///<summary>Selects a specific sound mode.</summary>
    public static void SelectSoundMode(this IMediaPlayerEntityCore target, MediaPlayerSelectSoundModeParameters data)
    {
        target.CallService("select_sound_mode", data);
    }

    ///<summary>Selects a specific sound mode.</summary>
    public static void SelectSoundMode(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerSelectSoundModeParameters data)
    {
        target.CallService("select_sound_mode", data);
    }

    ///<summary>Selects a specific sound mode.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="soundMode">Name of the sound mode to switch to. eg: Music</param>
    public static void SelectSoundMode(this IMediaPlayerEntityCore target, string? soundMode = null)
    {
        target.CallService("select_sound_mode", new MediaPlayerSelectSoundModeParameters { SoundMode = soundMode });
    }

    ///<summary>Selects a specific sound mode.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="soundMode">Name of the sound mode to switch to. eg: Music</param>
    public static void SelectSoundMode(this IEnumerable<IMediaPlayerEntityCore> target, string? soundMode = null)
    {
        target.CallService("select_sound_mode", new MediaPlayerSelectSoundModeParameters { SoundMode = soundMode });
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    public static void SelectSource(this IMediaPlayerEntityCore target, MediaPlayerSelectSourceParameters data)
    {
        target.CallService("select_source", data);
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    public static void SelectSource(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerSelectSourceParameters data)
    {
        target.CallService("select_source", data);
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="source">Name of the source to switch to. Platform dependent. eg: video1</param>
    public static void SelectSource(this IMediaPlayerEntityCore target, string source)
    {
        target.CallService("select_source", new MediaPlayerSelectSourceParameters { Source = source });
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="source">Name of the source to switch to. Platform dependent. eg: video1</param>
    public static void SelectSource(this IEnumerable<IMediaPlayerEntityCore> target, string source)
    {
        target.CallService("select_source", new MediaPlayerSelectSourceParameters { Source = source });
    }

    ///<summary>Playback mode that selects the media in randomized order.</summary>
    public static void ShuffleSet(this IMediaPlayerEntityCore target, MediaPlayerShuffleSetParameters data)
    {
        target.CallService("shuffle_set", data);
    }

    ///<summary>Playback mode that selects the media in randomized order.</summary>
    public static void ShuffleSet(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerShuffleSetParameters data)
    {
        target.CallService("shuffle_set", data);
    }

    ///<summary>Playback mode that selects the media in randomized order.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="shuffle">Whether or not shuffle mode is enabled.</param>
    public static void ShuffleSet(this IMediaPlayerEntityCore target, bool shuffle)
    {
        target.CallService("shuffle_set", new MediaPlayerShuffleSetParameters { Shuffle = shuffle });
    }

    ///<summary>Playback mode that selects the media in randomized order.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="shuffle">Whether or not shuffle mode is enabled.</param>
    public static void ShuffleSet(this IEnumerable<IMediaPlayerEntityCore> target, bool shuffle)
    {
        target.CallService("shuffle_set", new MediaPlayerShuffleSetParameters { Shuffle = shuffle });
    }

    ///<summary>Toggles a media player on/off.</summary>
    public static void Toggle(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles a media player on/off.</summary>
    public static void Toggle(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Turns off the power of the media player.</summary>
    public static void TurnOff(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns off the power of the media player.</summary>
    public static void TurnOff(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns on the power of the media player.</summary>
    public static void TurnOn(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turns on the power of the media player.</summary>
    public static void TurnOn(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Removes the player from a group. Only works on platforms which support player groups.</summary>
    public static void Unjoin(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("unjoin", data);
    }

    ///<summary>Removes the player from a group. Only works on platforms which support player groups.</summary>
    public static void Unjoin(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("unjoin", data);
    }

    ///<summary>Turns down the volume.</summary>
    public static void VolumeDown(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("volume_down", data);
    }

    ///<summary>Turns down the volume.</summary>
    public static void VolumeDown(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("volume_down", data);
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    public static void VolumeMute(this IMediaPlayerEntityCore target, MediaPlayerVolumeMuteParameters data)
    {
        target.CallService("volume_mute", data);
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    public static void VolumeMute(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerVolumeMuteParameters data)
    {
        target.CallService("volume_mute", data);
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="isVolumeMuted">Defines whether or not it is muted.</param>
    public static void VolumeMute(this IMediaPlayerEntityCore target, bool isVolumeMuted)
    {
        target.CallService("volume_mute", new MediaPlayerVolumeMuteParameters { IsVolumeMuted = isVolumeMuted });
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="isVolumeMuted">Defines whether or not it is muted.</param>
    public static void VolumeMute(this IEnumerable<IMediaPlayerEntityCore> target, bool isVolumeMuted)
    {
        target.CallService("volume_mute", new MediaPlayerVolumeMuteParameters { IsVolumeMuted = isVolumeMuted });
    }

    ///<summary>Sets the volume level.</summary>
    public static void VolumeSet(this IMediaPlayerEntityCore target, MediaPlayerVolumeSetParameters data)
    {
        target.CallService("volume_set", data);
    }

    ///<summary>Sets the volume level.</summary>
    public static void VolumeSet(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerVolumeSetParameters data)
    {
        target.CallService("volume_set", data);
    }

    ///<summary>Sets the volume level.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="volumeLevel">The volume. 0 is inaudible, 1 is the maximum volume.</param>
    public static void VolumeSet(this IMediaPlayerEntityCore target, double volumeLevel)
    {
        target.CallService("volume_set", new MediaPlayerVolumeSetParameters { VolumeLevel = volumeLevel });
    }

    ///<summary>Sets the volume level.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="volumeLevel">The volume. 0 is inaudible, 1 is the maximum volume.</param>
    public static void VolumeSet(this IEnumerable<IMediaPlayerEntityCore> target, double volumeLevel)
    {
        target.CallService("volume_set", new MediaPlayerVolumeSetParameters { VolumeLevel = volumeLevel });
    }

    ///<summary>Turns up the volume.</summary>
    public static void VolumeUp(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("volume_up", data);
    }

    ///<summary>Turns up the volume.</summary>
    public static void VolumeUp(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("volume_up", data);
    }
}

public static class NoderedEntityExtensionMethods
{
    ///<summary>Trigger a Node-RED Node</summary>
    public static void Trigger(this ISwitchEntityCore target, NoderedTriggerParameters data)
    {
        target.CallService("trigger", data);
    }

    ///<summary>Trigger a Node-RED Node</summary>
    public static void Trigger(this IEnumerable<ISwitchEntityCore> target, NoderedTriggerParameters data)
    {
        target.CallService("trigger", data);
    }

    ///<summary>Trigger a Node-RED Node</summary>
    ///<param name="target">The ISwitchEntityCore to call this service for</param>
    ///<param name="triggerEntityId">Entity Id to trigger the event node with. Only needed if the node is not triggered by a single entity. eg: sun.sun</param>
    ///<param name="skipCondition">Skip conditions of the node (defaults to false) eg: True</param>
    ///<param name="outputPath">Which output of the node to use (defaults to true, the top output). Only used when skip_condition is set to true. eg: True</param>
    ///<param name="payload">The payload the node will output when triggered. Works only when triggering an entity node, not an event node.</param>
    public static void Trigger(this ISwitchEntityCore target, object? triggerEntityId = null, object? skipCondition = null, object? outputPath = null, object? payload = null)
    {
        target.CallService("trigger", new NoderedTriggerParameters { TriggerEntityId = triggerEntityId, SkipCondition = skipCondition, OutputPath = outputPath, Payload = payload });
    }

    ///<summary>Trigger a Node-RED Node</summary>
    ///<param name="target">The IEnumerable&lt;ISwitchEntityCore&gt; to call this service for</param>
    ///<param name="triggerEntityId">Entity Id to trigger the event node with. Only needed if the node is not triggered by a single entity. eg: sun.sun</param>
    ///<param name="skipCondition">Skip conditions of the node (defaults to false) eg: True</param>
    ///<param name="outputPath">Which output of the node to use (defaults to true, the top output). Only used when skip_condition is set to true. eg: True</param>
    ///<param name="payload">The payload the node will output when triggered. Works only when triggering an entity node, not an event node.</param>
    public static void Trigger(this IEnumerable<ISwitchEntityCore> target, object? triggerEntityId = null, object? skipCondition = null, object? outputPath = null, object? payload = null)
    {
        target.CallService("trigger", new NoderedTriggerParameters { TriggerEntityId = triggerEntityId, SkipCondition = skipCondition, OutputPath = outputPath, Payload = payload });
    }
}

public static class ScriptEntityExtensionMethods
{
    ///<summary>Toggle a script. Starts it, if isn&apos;t running, stops it otherwise.</summary>
    public static void Toggle(this IScriptEntityCore target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggle a script. Starts it, if isn&apos;t running, stops it otherwise.</summary>
    public static void Toggle(this IEnumerable<IScriptEntityCore> target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Stops a running script.</summary>
    public static void TurnOff(this IScriptEntityCore target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Stops a running script.</summary>
    public static void TurnOff(this IEnumerable<IScriptEntityCore> target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Runs the sequence of actions defined in a script.</summary>
    public static void TurnOn(this IScriptEntityCore target, object? data = null)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Runs the sequence of actions defined in a script.</summary>
    public static void TurnOn(this IEnumerable<IScriptEntityCore> target, object? data = null)
    {
        target.CallService("turn_on", data);
    }
}

public static class SelectEntityExtensionMethods
{
    ///<summary>Selects the first option.</summary>
    public static void SelectFirst(this ISelectEntityCore target, object? data = null)
    {
        target.CallService("select_first", data);
    }

    ///<summary>Selects the first option.</summary>
    public static void SelectFirst(this IEnumerable<ISelectEntityCore> target, object? data = null)
    {
        target.CallService("select_first", data);
    }

    ///<summary>Selects the last option.</summary>
    public static void SelectLast(this ISelectEntityCore target, object? data = null)
    {
        target.CallService("select_last", data);
    }

    ///<summary>Selects the last option.</summary>
    public static void SelectLast(this IEnumerable<ISelectEntityCore> target, object? data = null)
    {
        target.CallService("select_last", data);
    }

    ///<summary>Selects the next option.</summary>
    public static void SelectNext(this ISelectEntityCore target, SelectSelectNextParameters data)
    {
        target.CallService("select_next", data);
    }

    ///<summary>Selects the next option.</summary>
    public static void SelectNext(this IEnumerable<ISelectEntityCore> target, SelectSelectNextParameters data)
    {
        target.CallService("select_next", data);
    }

    ///<summary>Selects the next option.</summary>
    ///<param name="target">The ISelectEntityCore to call this service for</param>
    ///<param name="cycle">If the option should cycle from the last to the first.</param>
    public static void SelectNext(this ISelectEntityCore target, bool? cycle = null)
    {
        target.CallService("select_next", new SelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Selects the next option.</summary>
    ///<param name="target">The IEnumerable&lt;ISelectEntityCore&gt; to call this service for</param>
    ///<param name="cycle">If the option should cycle from the last to the first.</param>
    public static void SelectNext(this IEnumerable<ISelectEntityCore> target, bool? cycle = null)
    {
        target.CallService("select_next", new SelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Selects an option.</summary>
    public static void SelectOption(this ISelectEntityCore target, SelectSelectOptionParameters data)
    {
        target.CallService("select_option", data);
    }

    ///<summary>Selects an option.</summary>
    public static void SelectOption(this IEnumerable<ISelectEntityCore> target, SelectSelectOptionParameters data)
    {
        target.CallService("select_option", data);
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The ISelectEntityCore to call this service for</param>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public static void SelectOption(this ISelectEntityCore target, string option)
    {
        target.CallService("select_option", new SelectSelectOptionParameters { Option = option });
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The IEnumerable&lt;ISelectEntityCore&gt; to call this service for</param>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public static void SelectOption(this IEnumerable<ISelectEntityCore> target, string option)
    {
        target.CallService("select_option", new SelectSelectOptionParameters { Option = option });
    }

    ///<summary>Selects the previous option.</summary>
    public static void SelectPrevious(this ISelectEntityCore target, SelectSelectPreviousParameters data)
    {
        target.CallService("select_previous", data);
    }

    ///<summary>Selects the previous option.</summary>
    public static void SelectPrevious(this IEnumerable<ISelectEntityCore> target, SelectSelectPreviousParameters data)
    {
        target.CallService("select_previous", data);
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The ISelectEntityCore to call this service for</param>
    ///<param name="cycle">If the option should cycle from the first to the last.</param>
    public static void SelectPrevious(this ISelectEntityCore target, bool? cycle = null)
    {
        target.CallService("select_previous", new SelectSelectPreviousParameters { Cycle = cycle });
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The IEnumerable&lt;ISelectEntityCore&gt; to call this service for</param>
    ///<param name="cycle">If the option should cycle from the first to the last.</param>
    public static void SelectPrevious(this IEnumerable<ISelectEntityCore> target, bool? cycle = null)
    {
        target.CallService("select_previous", new SelectSelectPreviousParameters { Cycle = cycle });
    }
}

public static class SwitchEntityExtensionMethods
{
    ///<summary>Toggles a switch on/off.</summary>
    public static void Toggle(this ISwitchEntityCore target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles a switch on/off.</summary>
    public static void Toggle(this IEnumerable<ISwitchEntityCore> target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Turns a switch off.</summary>
    public static void TurnOff(this ISwitchEntityCore target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns a switch off.</summary>
    public static void TurnOff(this IEnumerable<ISwitchEntityCore> target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns a switch on.</summary>
    public static void TurnOn(this ISwitchEntityCore target, object? data = null)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turns a switch on.</summary>
    public static void TurnOn(this IEnumerable<ISwitchEntityCore> target, object? data = null)
    {
        target.CallService("turn_on", data);
    }
}

public static class TimerEntityExtensionMethods
{
    ///<summary>Resets a timer&apos;s duration to the last known initial value without firing the timer finished event.</summary>
    public static void Cancel(this ITimerEntityCore target, object? data = null)
    {
        target.CallService("cancel", data);
    }

    ///<summary>Resets a timer&apos;s duration to the last known initial value without firing the timer finished event.</summary>
    public static void Cancel(this IEnumerable<ITimerEntityCore> target, object? data = null)
    {
        target.CallService("cancel", data);
    }

    ///<summary>Changes a timer by adding or subtracting a given duration.</summary>
    public static void Change(this ITimerEntityCore target, TimerChangeParameters data)
    {
        target.CallService("change", data);
    }

    ///<summary>Changes a timer by adding or subtracting a given duration.</summary>
    public static void Change(this IEnumerable<ITimerEntityCore> target, TimerChangeParameters data)
    {
        target.CallService("change", data);
    }

    ///<summary>Changes a timer by adding or subtracting a given duration.</summary>
    ///<param name="target">The ITimerEntityCore to call this service for</param>
    ///<param name="duration">Duration to add to or subtract from the running timer. eg: 00:01:00, 60 or -60</param>
    public static void Change(this ITimerEntityCore target, string duration)
    {
        target.CallService("change", new TimerChangeParameters { Duration = duration });
    }

    ///<summary>Changes a timer by adding or subtracting a given duration.</summary>
    ///<param name="target">The IEnumerable&lt;ITimerEntityCore&gt; to call this service for</param>
    ///<param name="duration">Duration to add to or subtract from the running timer. eg: 00:01:00, 60 or -60</param>
    public static void Change(this IEnumerable<ITimerEntityCore> target, string duration)
    {
        target.CallService("change", new TimerChangeParameters { Duration = duration });
    }

    ///<summary>Finishes a running timer earlier than scheduled.</summary>
    public static void Finish(this ITimerEntityCore target, object? data = null)
    {
        target.CallService("finish", data);
    }

    ///<summary>Finishes a running timer earlier than scheduled.</summary>
    public static void Finish(this IEnumerable<ITimerEntityCore> target, object? data = null)
    {
        target.CallService("finish", data);
    }

    ///<summary>Pauses a running timer, retaining the remaining duration for later continuation.</summary>
    public static void Pause(this ITimerEntityCore target, object? data = null)
    {
        target.CallService("pause", data);
    }

    ///<summary>Pauses a running timer, retaining the remaining duration for later continuation.</summary>
    public static void Pause(this IEnumerable<ITimerEntityCore> target, object? data = null)
    {
        target.CallService("pause", data);
    }

    ///<summary>Starts a timer or restarts it with a provided duration.</summary>
    public static void Start(this ITimerEntityCore target, TimerStartParameters data)
    {
        target.CallService("start", data);
    }

    ///<summary>Starts a timer or restarts it with a provided duration.</summary>
    public static void Start(this IEnumerable<ITimerEntityCore> target, TimerStartParameters data)
    {
        target.CallService("start", data);
    }

    ///<summary>Starts a timer or restarts it with a provided duration.</summary>
    ///<param name="target">The ITimerEntityCore to call this service for</param>
    ///<param name="duration">Custom duration to restart the timer with. eg: 00:01:00 or 60</param>
    public static void Start(this ITimerEntityCore target, string? duration = null)
    {
        target.CallService("start", new TimerStartParameters { Duration = duration });
    }

    ///<summary>Starts a timer or restarts it with a provided duration.</summary>
    ///<param name="target">The IEnumerable&lt;ITimerEntityCore&gt; to call this service for</param>
    ///<param name="duration">Custom duration to restart the timer with. eg: 00:01:00 or 60</param>
    public static void Start(this IEnumerable<ITimerEntityCore> target, string? duration = null)
    {
        target.CallService("start", new TimerStartParameters { Duration = duration });
    }
}

public static class TodoEntityExtensionMethods
{
    ///<summary>Add a new to-do list item.</summary>
    public static void AddItem(this TodoEntity target, TodoAddItemParameters data)
    {
        target.CallService("add_item", data);
    }

    ///<summary>Add a new to-do list item.</summary>
    public static void AddItem(this IEnumerable<TodoEntity> target, TodoAddItemParameters data)
    {
        target.CallService("add_item", data);
    }

    ///<summary>Add a new to-do list item.</summary>
    ///<param name="target">The TodoEntity to call this service for</param>
    ///<param name="item">The name that represents the to-do item. eg: Submit income tax return</param>
    ///<param name="dueDate">The date the to-do item is expected to be completed. eg: 2023-11-17</param>
    ///<param name="dueDatetime">The date and time the to-do item is expected to be completed. eg: 2023-11-17 13:30:00</param>
    ///<param name="description">A more complete description of the to-do item than provided by the item name. eg: A more complete description of the to-do item than that provided by the summary.</param>
    public static void AddItem(this TodoEntity target, string item, DateOnly? dueDate = null, DateTime? dueDatetime = null, string? description = null)
    {
        target.CallService("add_item", new TodoAddItemParameters { Item = item, DueDate = dueDate, DueDatetime = dueDatetime, Description = description });
    }

    ///<summary>Add a new to-do list item.</summary>
    ///<param name="target">The IEnumerable&lt;TodoEntity&gt; to call this service for</param>
    ///<param name="item">The name that represents the to-do item. eg: Submit income tax return</param>
    ///<param name="dueDate">The date the to-do item is expected to be completed. eg: 2023-11-17</param>
    ///<param name="dueDatetime">The date and time the to-do item is expected to be completed. eg: 2023-11-17 13:30:00</param>
    ///<param name="description">A more complete description of the to-do item than provided by the item name. eg: A more complete description of the to-do item than that provided by the summary.</param>
    public static void AddItem(this IEnumerable<TodoEntity> target, string item, DateOnly? dueDate = null, DateTime? dueDatetime = null, string? description = null)
    {
        target.CallService("add_item", new TodoAddItemParameters { Item = item, DueDate = dueDate, DueDatetime = dueDatetime, Description = description });
    }

    ///<summary>Get items on a to-do list.</summary>
    public static Task<JsonElement?> GetItemsAsync(this TodoEntity target, TodoGetItemsParameters data)
    {
        return target.CallServiceWithResponseAsync("get_items", data);
    }

    ///<summary>Get items on a to-do list.</summary>
    ///<param name="target">The TodoEntity to call this service for</param>
    ///<param name="status">Only return to-do items with the specified statuses. Returns not completed actions by default. eg: needs_action</param>
    public static Task<JsonElement?> GetItemsAsync(this TodoEntity target, IEnumerable<object>? status = null)
    {
        return target.CallServiceWithResponseAsync("get_items", new TodoGetItemsParameters { Status = status });
    }

    ///<summary>Get items on a to-do list.</summary>
    public static void GetItems(this TodoEntity target, TodoGetItemsParameters data)
    {
        target.CallService("get_items", data);
    }

    ///<summary>Get items on a to-do list.</summary>
    public static void GetItems(this IEnumerable<TodoEntity> target, TodoGetItemsParameters data)
    {
        target.CallService("get_items", data);
    }

    ///<summary>Get items on a to-do list.</summary>
    ///<param name="target">The TodoEntity to call this service for</param>
    ///<param name="status">Only return to-do items with the specified statuses. Returns not completed actions by default. eg: needs_action</param>
    public static void GetItems(this TodoEntity target, IEnumerable<object>? status = null)
    {
        target.CallService("get_items", new TodoGetItemsParameters { Status = status });
    }

    ///<summary>Get items on a to-do list.</summary>
    ///<param name="target">The IEnumerable&lt;TodoEntity&gt; to call this service for</param>
    ///<param name="status">Only return to-do items with the specified statuses. Returns not completed actions by default. eg: needs_action</param>
    public static void GetItems(this IEnumerable<TodoEntity> target, IEnumerable<object>? status = null)
    {
        target.CallService("get_items", new TodoGetItemsParameters { Status = status });
    }

    ///<summary>Remove all to-do list items that have been completed.</summary>
    public static void RemoveCompletedItems(this TodoEntity target, object? data = null)
    {
        target.CallService("remove_completed_items", data);
    }

    ///<summary>Remove all to-do list items that have been completed.</summary>
    public static void RemoveCompletedItems(this IEnumerable<TodoEntity> target, object? data = null)
    {
        target.CallService("remove_completed_items", data);
    }

    ///<summary>Remove an existing to-do list item by its name.</summary>
    public static void RemoveItem(this TodoEntity target, TodoRemoveItemParameters data)
    {
        target.CallService("remove_item", data);
    }

    ///<summary>Remove an existing to-do list item by its name.</summary>
    public static void RemoveItem(this IEnumerable<TodoEntity> target, TodoRemoveItemParameters data)
    {
        target.CallService("remove_item", data);
    }

    ///<summary>Remove an existing to-do list item by its name.</summary>
    ///<param name="target">The TodoEntity to call this service for</param>
    ///<param name="item">The name for the to-do list item.</param>
    public static void RemoveItem(this TodoEntity target, string item)
    {
        target.CallService("remove_item", new TodoRemoveItemParameters { Item = item });
    }

    ///<summary>Remove an existing to-do list item by its name.</summary>
    ///<param name="target">The IEnumerable&lt;TodoEntity&gt; to call this service for</param>
    ///<param name="item">The name for the to-do list item.</param>
    public static void RemoveItem(this IEnumerable<TodoEntity> target, string item)
    {
        target.CallService("remove_item", new TodoRemoveItemParameters { Item = item });
    }

    ///<summary>Update an existing to-do list item based on its name.</summary>
    public static void UpdateItem(this TodoEntity target, TodoUpdateItemParameters data)
    {
        target.CallService("update_item", data);
    }

    ///<summary>Update an existing to-do list item based on its name.</summary>
    public static void UpdateItem(this IEnumerable<TodoEntity> target, TodoUpdateItemParameters data)
    {
        target.CallService("update_item", data);
    }

    ///<summary>Update an existing to-do list item based on its name.</summary>
    ///<param name="target">The TodoEntity to call this service for</param>
    ///<param name="item">The current name of the to-do item. eg: Submit income tax return</param>
    ///<param name="rename">The new name for the to-do item eg: Something else</param>
    ///<param name="status">A status or confirmation of the to-do item. eg: needs_action</param>
    ///<param name="dueDate">The date the to-do item is expected to be completed. eg: 2023-11-17</param>
    ///<param name="dueDatetime">The date and time the to-do item is expected to be completed. eg: 2023-11-17 13:30:00</param>
    ///<param name="description">A more complete description of the to-do item than provided by the item name. eg: A more complete description of the to-do item than that provided by the summary.</param>
    public static void UpdateItem(this TodoEntity target, string item, string? rename = null, object? status = null, DateOnly? dueDate = null, DateTime? dueDatetime = null, string? description = null)
    {
        target.CallService("update_item", new TodoUpdateItemParameters { Item = item, Rename = rename, Status = status, DueDate = dueDate, DueDatetime = dueDatetime, Description = description });
    }

    ///<summary>Update an existing to-do list item based on its name.</summary>
    ///<param name="target">The IEnumerable&lt;TodoEntity&gt; to call this service for</param>
    ///<param name="item">The current name of the to-do item. eg: Submit income tax return</param>
    ///<param name="rename">The new name for the to-do item eg: Something else</param>
    ///<param name="status">A status or confirmation of the to-do item. eg: needs_action</param>
    ///<param name="dueDate">The date the to-do item is expected to be completed. eg: 2023-11-17</param>
    ///<param name="dueDatetime">The date and time the to-do item is expected to be completed. eg: 2023-11-17 13:30:00</param>
    ///<param name="description">A more complete description of the to-do item than provided by the item name. eg: A more complete description of the to-do item than that provided by the summary.</param>
    public static void UpdateItem(this IEnumerable<TodoEntity> target, string item, string? rename = null, object? status = null, DateOnly? dueDate = null, DateTime? dueDatetime = null, string? description = null)
    {
        target.CallService("update_item", new TodoUpdateItemParameters { Item = item, Rename = rename, Status = status, DueDate = dueDate, DueDatetime = dueDatetime, Description = description });
    }
}

public static class UpdateEntityExtensionMethods
{
    ///<summary>Removes the skipped version marker from an update.</summary>
    public static void ClearSkipped(this IUpdateEntityCore target, object? data = null)
    {
        target.CallService("clear_skipped", data);
    }

    ///<summary>Removes the skipped version marker from an update.</summary>
    public static void ClearSkipped(this IEnumerable<IUpdateEntityCore> target, object? data = null)
    {
        target.CallService("clear_skipped", data);
    }

    ///<summary>Installs an update for a device or service.</summary>
    public static void Install(this IUpdateEntityCore target, UpdateInstallParameters data)
    {
        target.CallService("install", data);
    }

    ///<summary>Installs an update for a device or service.</summary>
    public static void Install(this IEnumerable<IUpdateEntityCore> target, UpdateInstallParameters data)
    {
        target.CallService("install", data);
    }

    ///<summary>Installs an update for a device or service.</summary>
    ///<param name="target">The IUpdateEntityCore to call this service for</param>
    ///<param name="version">The version to install. If omitted, the latest version will be installed. eg: 1.0.0</param>
    ///<param name="backup">If supported by the integration, this creates a backup before starting the update.</param>
    public static void Install(this IUpdateEntityCore target, string? version = null, bool? backup = null)
    {
        target.CallService("install", new UpdateInstallParameters { Version = version, Backup = backup });
    }

    ///<summary>Installs an update for a device or service.</summary>
    ///<param name="target">The IEnumerable&lt;IUpdateEntityCore&gt; to call this service for</param>
    ///<param name="version">The version to install. If omitted, the latest version will be installed. eg: 1.0.0</param>
    ///<param name="backup">If supported by the integration, this creates a backup before starting the update.</param>
    public static void Install(this IEnumerable<IUpdateEntityCore> target, string? version = null, bool? backup = null)
    {
        target.CallService("install", new UpdateInstallParameters { Version = version, Backup = backup });
    }

    ///<summary>Marks currently available update as skipped.</summary>
    public static void Skip(this IUpdateEntityCore target, object? data = null)
    {
        target.CallService("skip", data);
    }

    ///<summary>Marks currently available update as skipped.</summary>
    public static void Skip(this IEnumerable<IUpdateEntityCore> target, object? data = null)
    {
        target.CallService("skip", data);
    }
}

public static class WeatherEntityExtensionMethods
{
    ///<summary>Get weather forecasts.</summary>
    public static Task<JsonElement?> GetForecastsAsync(this IWeatherEntityCore target, WeatherGetForecastsParameters data)
    {
        return target.CallServiceWithResponseAsync("get_forecasts", data);
    }

    ///<summary>Get weather forecasts.</summary>
    ///<param name="target">The IWeatherEntityCore to call this service for</param>
    ///<param name="type">Forecast type: daily, hourly or twice daily.</param>
    public static Task<JsonElement?> GetForecastsAsync(this IWeatherEntityCore target, object @type)
    {
        return target.CallServiceWithResponseAsync("get_forecasts", new WeatherGetForecastsParameters { Type = @type });
    }

    ///<summary>Get weather forecasts.</summary>
    public static void GetForecasts(this IWeatherEntityCore target, WeatherGetForecastsParameters data)
    {
        target.CallService("get_forecasts", data);
    }

    ///<summary>Get weather forecasts.</summary>
    public static void GetForecasts(this IEnumerable<IWeatherEntityCore> target, WeatherGetForecastsParameters data)
    {
        target.CallService("get_forecasts", data);
    }

    ///<summary>Get weather forecasts.</summary>
    ///<param name="target">The IWeatherEntityCore to call this service for</param>
    ///<param name="type">Forecast type: daily, hourly or twice daily.</param>
    public static void GetForecasts(this IWeatherEntityCore target, object @type)
    {
        target.CallService("get_forecasts", new WeatherGetForecastsParameters { Type = @type });
    }

    ///<summary>Get weather forecasts.</summary>
    ///<param name="target">The IEnumerable&lt;IWeatherEntityCore&gt; to call this service for</param>
    ///<param name="type">Forecast type: daily, hourly or twice daily.</param>
    public static void GetForecasts(this IEnumerable<IWeatherEntityCore> target, object @type)
    {
        target.CallService("get_forecasts", new WeatherGetForecastsParameters { Type = @type });
    }
}